/*>videoscale.c
 *
 * BeebIt - BBC Micro Model B Emulator
 *
 * Enhanced host screen mode compatibility
 *
 * (C) Copyright Crispian Daniels, 2024
 *
 * Email: <convertedgames@3insdale.me.uk>
 */

#include "hostmap.h"
#include "beebit.h"
#include "kernel.h"
#include "riscos.h"
#include "swis.h"
#include "video.h"
#include "videoscale.h"
#include "videoula.h"

extern _kernel_swi_regs regs;

char *displayzoomiconarray[13] = {
  NULL,
  "1:1",
  "3:2",
  "2:1",
  "5:2",
  "3:1",
  NULL,
  "4:1",
  NULL,
  "5:1",
  NULL,
  "6:1",
  (char*)-1
};
char **displayzoomicons = displayzoomiconarray;

#ifdef VIDEOSCALE_WITH_OVERSCALE
void (*scalegraphics1)(intptr_t bufferaddress, intptr_t hostaddress);
void (*scaleteletext1)(intptr_t bufferaddress, intptr_t hostaddress);
int scalelineslimit;
int scalelengthlimit;

void limitcallscalegraphics(intptr_t bufferaddress, intptr_t hostaddress)
{
  if (hostaddress + host_scaledlinelength - nhostscreen > scalelineslimit * nhostscreenlinelength)
  {
    return;
  }

  int length = local_linelengthfloor;
  if (length > scalelengthlimit) local_linelengthfloor = scalelengthlimit;

  scalegraphics1(bufferaddress, hostaddress);

  local_linelengthfloor = length;
}

void limitcallscaleteletext(intptr_t bufferaddress, intptr_t hostaddress)
{
  if (hostaddress + host_scaledlinelength - nhostscreen > scalelineslimit * nhostscreenlinelength)
  {
    return;
  }

  int length = local_linelengthfloor;
  if (length > scalelengthlimit) local_linelengthfloor = scalelengthlimit;

  scaleteletext1(bufferaddress, hostaddress);

  local_linelengthfloor = length;
}

void limitedblankrow(intptr_t hostaddress, int length, int mask)
{
  if (hostaddress + nhostscreenlinelength - nhostscreen > scalelineslimit * nhostscreenlinelength)
  {
    return;
  }

  if (length > nhostscreenlinelength)
    length = nhostscreenlinelength;

  blankrow(hostaddress, length, mask);
}

void limitscale(VIDEOSCALECHOICE *choice, int length, int lines)
{
  scalelengthlimit = length;
  scalelineslimit = lines;
  scalegraphics1 = choice->scalegraphics;
  scaleteletext1 = choice->scaleteletext;
  choice->scalegraphics = limitcallscalegraphics;
  choice->scaleteletext = limitcallscaleteletext;
}
#endif

static void readzoomavailabilitymodevars(intptr_t mode,int* ratioshift,int *xres,int *yres)
{
  int xeig,yeig;

  regs.r[0] = mode;
  regs.r[1] = 4;
  _kernel_swi(OS_ReadModeVariable,&regs,&regs);
  xeig = regs.r[2];
  regs.r[1] = 5;
  _kernel_swi(OS_ReadModeVariable,&regs,&regs);
  yeig = regs.r[2];
  regs.r[1] = 11;
  _kernel_swi(OS_ReadModeVariable,&regs,&regs);
  *xres = regs.r[2] + 1;
  regs.r[1] = 12;
  _kernel_swi(OS_ReadModeVariable,&regs,&regs);
  *yres = regs.r[2] + 1;

  *ratioshift = 1 + xeig - yeig;
}

int getoverscalezoomavailabilityformode(intptr_t mode)
{
  int xres,yres;
  int ratioshift,flags;
  int integerscale,twicescale;

  readzoomavailabilitymodevars(mode,&ratioshift,&xres,&yres);
  flags = 0;
  
  for (int i=0; displayzoomiconarray[i] != (char*)-1; i++)
  {
    if (!displayzoomiconarray[i])
      continue;

    if (i & 1)
    {
      integerscale = (i+1)>>1;
      
      if (ratioshift >= 0 || integerscale == ((integerscale >> -ratioshift) << -ratioshift))
      {
        flags |= (1<<i);
      }
    }
    else
    {
      twicescale = i+1;
      
      if (ratioshift >= 1 || twicescale == ((twicescale >> 1-ratioshift) << 1-ratioshift))
      {
        flags |= (1<<i);
      }
    }
  }

  return flags;
}

static int getfittedzoomavailabilityformode(intptr_t mode,int nlines)
{
  int xres,yres;
  int ratioshift,flags;
  int scaledx,scaledy;
  int integerscale,twicescale;

  readzoomavailabilitymodevars(mode,&ratioshift,&xres,&yres);
  flags = 0;
  
  for (int i=0; displayzoomiconarray[i] != (char*)-1; i++)
  {
    if (!displayzoomiconarray[i])
      continue;

    if (i & 1)
    {
      integerscale = (i+1)>>1;
      
      if (ratioshift >= 0 || integerscale == ((integerscale >> -ratioshift) << -ratioshift))
      {
        scaledx = 640 * integerscale;
        
        if (ratioshift >= 0)
          scaledy = (nlines * integerscale << ratioshift);
        else
          scaledy = (nlines * integerscale >> -ratioshift);
        
        if (scaledx <= xres && scaledy <= yres)
          flags |= (1<<i);
      }
    }
    else
    {
      twicescale = i+1;
      
      if (ratioshift >= 1 || twicescale == ((twicescale >> 1-ratioshift) << 1-ratioshift))
      {
          scaledx = 640 * twicescale >> 1;
        
          if (ratioshift >= 1)
            scaledy = (nlines * twicescale << ratioshift-1);
          else
            scaledy = (nlines * twicescale >> 1-ratioshift);
        
          if (scaledx <= xres && scaledy <= yres)
            flags |= (1<<i);
      }
    }
  }

  return flags;
}

int get256linezoomavailabilityformode(intptr_t mode)
{
  return getfittedzoomavailabilityformode(mode,256);
}

int getzoomnumberformode(intptr_t mode)
{
  int number,i;

  if (beebit_displayzoom >= DISPLAY_ZOOM_FIRST_IN_TABLE)
  {
    i = beebit_displayzoom - DISPLAY_ZOOM_FIRST_IN_TABLE;

#ifdef VIDEOSCALE_WITH_OVERSCALE
    if (getoverscalezoomavailabilityformode(mode) & (1<<i))
#else
    if (get256linezoomavailabilityformode(mode) & (1<<i))
#endif
      return i;
  }
  number = 0;
  i = get256linezoomavailabilityformode(mode);
  for (; i>1; i>>=1)
  {
    number++;
  }
  
  return number;
}

int hostmode7isexpectedmode7(void)
{
  int xres,yres;

  regs.r[0] = 7;
  regs.r[1] = 3;
  _kernel_swi(OS_ReadModeVariable,&regs,&regs);

  if (regs.r[2] != 15)
    return 0; /*not 16 colours*/

  regs.r[1] = 11;
  _kernel_swi(OS_ReadModeVariable,&regs,&regs);
  xres = regs.r[2] + 1;
  regs.r[1] = 12;
  _kernel_swi(OS_ReadModeVariable,&regs,&regs);
  yres = regs.r[2] + 1;

  /*accept 320 x 250 Mode 7*/
  /*and reject 640 x 500 Mode 7, too big for a Mode 12 screen save buffer*/
  return xres == 320 || yres == 250;
}

int getentrysizeforbarrelshiftedlookup(VIDEOSCALELUTPARAMETERS *lutparams, int log2bpp)
{
  int bits,entrysize;
  bits = lutparams->leftpixel+lutparams->rightpixel<<log2bpp;
  
  for (entrysize = 4; bits > (entrysize<<3);)
    entrysize<<=2;
  
  return entrysize;
}

void video4lutinit(VIDEOSCALELUTPARAMETERS *lutparams)
{
  int i,j,n,nstop;
  unsigned int leftmask,rightmask,v;
  int shift;
  int *ilut;

  nstop = getentrysizeforbarrelshiftedlookup(lutparams,2)<<1;

  ilut = (int*)((intptr_t)videoscale_workspace+lutparams->offset);

  for (i=0; i<256; i++)
  {
    leftmask = (unsigned int)host_colourmasks[i&7];
    rightmask = (unsigned int)host_colourmasks[(i>>4)&7];

    for (j=0,n=lutparams->leftpixel;j+7<n;j+=8)
    {
      *ilut++ = (int)leftmask;
    }

    if (j<n)
    {
      shift = n-j<<2;
      v = (rightmask<<shift) | (leftmask>>32-shift);
      n+=lutparams->rightpixel;
      j+=8;
      if (j>n)
      {
        shift = j-n<<2;
        v = (v<<shift)>>shift;
      }
      *ilut++ = (int)v;
    }
    else
    {
      n+=lutparams->rightpixel;
    }

    for (;j+7<n;j+=8)
    {
      *ilut++ = (int)rightmask;
    }

    if (j<n)
    {
      shift = n-j<<2;
      v = (rightmask>>32-shift);
      *ilut++ = (int)v;
      j+=8;
    }

    for (;j<nstop;j+=8)
    {
      *ilut++ = 0;
    }
  }
}

void video8lutinit(VIDEOSCALELUTPARAMETERS *lutparams)
{
  int i,j,n,nstop;
  unsigned int leftmask,rightmask,v;
  int shift;
  int *ilut;

  nstop = getentrysizeforbarrelshiftedlookup(lutparams,3);
  ilut = (int*)((intptr_t)videoscale_workspace+lutparams->offset);

  for (i=0; i<256; i++)
  {
    leftmask = (unsigned int)host_colourmasks[i&7];
    rightmask = (unsigned int)host_colourmasks[(i>>4)&7];

    for (j=0,n=lutparams->leftpixel;j+3<n;j+=4)
    {
      *ilut++ = (int)leftmask;
    }

    if (j<n)
    {
      shift = n-j<<3;
      v = (rightmask<<shift) | (leftmask>>32-shift);
      n+=lutparams->rightpixel;
      j+=4;
      if (j>n)
      {
        shift = j-n<<3;
        v = (v<<shift)>>shift;
      }
      *ilut++ = (int)v;
    }
    else
    {
      n+=lutparams->rightpixel;
    }

    for (;j+3<n;j+=4)
    {
      *ilut++ = (int)rightmask;
    }

    if (j<n)
    {
      shift = n-j<<3;
      v = (rightmask>>32-shift);
      *ilut++ = (int)v;
      j+=4;
    }

    for (;j<nstop;j+=4)
    {
      *ilut++ = 0;
    }
  }
}

void video16lutinit(VIDEOSCALELUTPARAMETERS *lutparams)
{
  int i,j,n,nstop;
  unsigned int leftmask,rightmask,v;
  int shift;
  int *ilut;

  nstop = getentrysizeforbarrelshiftedlookup(lutparams,4)>>1;
  ilut = (int*)((intptr_t)videoscale_workspace+lutparams->offset);

  for (i=0; i<256; i++)
  {
    leftmask = (unsigned int)host_colourmasks[i&7];
    rightmask = (unsigned int)host_colourmasks[(i>>4)&7];

    for (j=0,n=lutparams->leftpixel;j+1<n;j+=2)
    {
      *ilut++ = (int)leftmask;
    }

    if (j<n)
    {
      shift = n-j<<4;
      v = (rightmask<<shift) | (leftmask>>32-shift);
      n+=lutparams->rightpixel;
      j+=2;
      if (j>n)
      {
        shift = j-n<<4;
        v = (v<<shift)>>shift;
      }
      *ilut++ = (int)v;
    }
    else
    {
      n+=lutparams->rightpixel;
    }

    for (;j+1<n;j+=2)
    {
      *ilut++ = (int)rightmask;
    }

    if (j<n)
    {
      shift = n-j<<4;
      v = (rightmask>>32-shift);
      *ilut++ = (int)v;
      j+=2;
    }

    for (;j<nstop;j+=2)
    {
      *ilut++ = 0;
    }
  }
}

void video32lutinit(VIDEOSCALELUTPARAMETERS *lutparams)
{
  int i,j,n,nstop;
  unsigned int leftmask,rightmask;
  int *ilut;

  nstop = getentrysizeforbarrelshiftedlookup(lutparams,5)>>2;
  ilut = (int*)((intptr_t)videoscale_workspace+lutparams->offset);

  for (i=0; i<256; i++)
  {
    leftmask = (unsigned int)host_colourmasks[i&7];
    rightmask = (unsigned int)host_colourmasks[(i>>4)&7];

    for (j=0,n=lutparams->leftpixel;j<n;j++)
    {
      *ilut++ = (int)leftmask;
    }

    n+=lutparams->rightpixel;

    for (;j<n;j++)
    {
      *ilut++ = (int)rightmask;
    }

    for (;j<nstop;j++)
    {
      *ilut++ = 0;
    }
  }
}

void setlutparameters(VIDEOSCALELUTPARAMETERS *lutparams, int leftpixel, int rightpixel)
{
  lutparams->offset = 0;
  lutparams->leftpixel = leftpixel;
  lutparams->rightpixel = rightpixel;
}

void setverticalscalesandteletextform(VIDEOSCALECHOICE *choice, int graphicsscale, int horizontalform)
{
  int partscale;

  choice->verticalscales.graphics = graphicsscale;

  if (graphicsscale & 1)
  {
    if (graphicsscale == 1)
    {
      choice->teletextform = (1<<2) + horizontalform;
      choice->verticalscales.unroundedteletext = graphicsscale;
      choice->verticalscales.roundedteletext = graphicsscale;
    }
    else
    {
      partscale = graphicsscale/3;
      choice->teletextform = (3<<2) + horizontalform;
      choice->verticalscales.unroundedteletext = graphicsscale - partscale - partscale;
      choice->verticalscales.roundedteletext = partscale;
    }
  }
  else
  {
    partscale = graphicsscale/2;
    choice->teletextform = (2<<2) + horizontalform;
    choice->verticalscales.unroundedteletext = partscale;
    choice->verticalscales.roundedteletext = partscale;
  }
}

void videoscalechoose(intptr_t mode, VIDEOSCALECHOICE *choice)
{
  int modeflags,ncolour;
  int log2bpp,xres,yres;
  int xresbeforescale,xresafterscale,xresremainder,yresremainder;
  int c,zoomnumber,scaleselector,es;
  int xeig,yeig,ratioshift;
  int linelengthmask;
#ifdef VIDEOSCALE_WITH_OVERSCALE
  int xlimit,ylimit;
#endif
  const int xresbeforescalemax = 1024; /*the limit at standard line frequency*/

  regs.r[0] = mode;
  regs.r[1] = 0;
  _kernel_swi(OS_ReadModeVariable,&regs,&regs);
  modeflags = regs.r[2];
  regs.r[1] = 3;
  _kernel_swi(OS_ReadModeVariable,&regs,&regs);
  ncolour = regs.r[2];
  regs.r[1] = 4;
  _kernel_swi(OS_ReadModeVariable,&regs,&regs);
  xeig = regs.r[2];
  regs.r[1] = 5;
  _kernel_swi(OS_ReadModeVariable,&regs,&regs);
  yeig = regs.r[2];
  regs.r[1] = 9;
  _kernel_swi(OS_ReadModeVariable,&regs,&regs);
  log2bpp = regs.r[2];
  regs.r[1] = 11;
  _kernel_swi(OS_ReadModeVariable,&regs,&regs);
  xres = regs.r[2] + 1;
  regs.r[1] = 12;
  _kernel_swi(OS_ReadModeVariable,&regs,&regs);
  yres = regs.r[2] + 1;

  scaleselector = 0;
  ratioshift = 1 + xeig - yeig;

  choice->mode = -1;
  choice->alignmentmask = ~3;
  choice->linelengthfloor = (xres >> 3) << log2bpp;
  choice->lutsize = 0;
  choice->screenoffsetlines = 0;
  choice->screenoffsetremainder = 0;
  setlutparameters(&choice->graphicslutparameters,1,1);
  setlutparameters(&choice->teletextlutparameters,1,1);
  choice->initgraphics = NULL;
  choice->initteletext = NULL;
  choice->scalegraphics = NULL;
  choice->scaleteletext = NULL;

  zoomnumber = getzoomnumberformode(mode);

  if (zoomnumber & 1)
  {
    scaleselector = ((zoomnumber+1)>>1)<<8;
  }
  else
  {
    scaleselector = (zoomnumber+1)<<7;
  }

  scaleselector |= log2bpp;

  //check whether the mode is directly supported
  if (modeflags == 0 || modeflags == 0x80)
  {
    switch (scaleselector)
    {
      case 0x0102:
        if (modeflags == 0x80)
          break;

        if (ratioshift == 0)
        {
          choice->mode = 12;
          setverticalscalesandteletextform(choice, 1, 1);
        }
        else if (ratioshift == 1)
        {
          choice->mode = 20;
          setverticalscalesandteletextform(choice, 2, 1);
        }
        break;
      case 0x0103:
        if (modeflags == 0x80)
        {
          if (ncolour != 255)
            break;
        }
        else
        {
          if (ncolour != 63)
            break;
        }

        if (ratioshift == 0)
        {
          choice->mode = 15;
          setverticalscalesandteletextform(choice, 1, 3);
        }
        else if (ratioshift == 1)
        {
          choice->mode = 21;
          setverticalscalesandteletextform(choice, 2, 3);
        }
        break;
    }
  }

#ifdef VIDEOSCALE_WITH_OVERSCALE
  if (xres < 640 || yres < (256<<ratioshift))
  {
    choice->mode = -1;
  }
#endif

  if (choice->mode != -1)
  {
    if (mode == 12)
    {
      /*check to see if we can use 16 colour mode 7*/
      regs.r[0] = 7;
      if (_kernel_swi_c(OS_CheckModeValid,&regs,&regs,&c) == NULL && c == 0)
      {
        if (hostmode7isexpectedmode7())
        {
          choice->teletextform = 0;
        }
      }
    }
    if (xres > xresbeforescalemax)
    {
      choice->linelengthfloor = (xresbeforescalemax >> 3) << log2bpp;
    }
    xresremainder = xres - ((choice->linelengthfloor>>log2bpp)<<3);
    yresremainder = yres - (256<<ratioshift);
    
    choice->scaledlinelengthfloor = choice->linelengthfloor;
    choice->screenoffsetlines = yresremainder>>1;
    choice->screenoffsetremainder = ((xresremainder << log2bpp-1)>>5)<<2;
    return;
  }

  choice->mode = 12;
  setverticalscalesandteletextform(choice, 1, 1);

  setlutparameters(&choice->graphicslutparameters,(scaleselector+0x80)>>8,scaleselector>>8);
  choice->teletextlutparameters = choice->graphicslutparameters;
  if (ratioshift >= 1)
    setverticalscalesandteletextform(choice, (scaleselector>>7)<<ratioshift-1, 1);
  else
    setverticalscalesandteletextform(choice, scaleselector>>7-ratioshift+1, 1);

  switch (scaleselector)
  {
    default:
      choice->scalegraphics = video4copyscale;
      choice->scaleteletext = video4copyscale;
      break;
      
    case 0x0182:
      setlutparameters(&choice->teletextlutparameters,2,2);
      choice->teletextform &= ~1;
      choice->initgraphics = video4lutinit;
      choice->initteletext = video4lutinit;
      choice->scalegraphics = video6lutscale;
      choice->scaleteletext = video8lutsixdotscale;
      break;
    case 0x0202:
      choice->initgraphics = video4lutinit;
      choice->scalegraphics = video8lutscale;
      choice->scaleteletext = video8lutscale;
      break;
    case 0x0282:
      choice->initgraphics = video4lutinit;
      choice->scalegraphics = video10lutscale;
      choice->scaleteletext = video10lutscale;
      break;
    case 0x0302:
      setlutparameters(&choice->teletextlutparameters,4,4);
      choice->teletextform &= ~1;
      choice->initgraphics = video4lutinit;
      choice->initteletext = video4lutinit;
      choice->scalegraphics = video12lutscale;
      choice->scaleteletext = video16lutsixdotscale;
      break;
    case 0x0402:
      choice->initgraphics = video4lutinit;
      choice->scalegraphics = video16lutscale;
      choice->scaleteletext = video16lutscale;
      break;
    case 0x0502:
      choice->initgraphics = video4lutinit;
      choice->scalegraphics = video20lutscale;
      choice->scaleteletext = video20lutscale;
      break;
    case 0x0602:
      setlutparameters(&choice->teletextlutparameters,8,8);
      choice->teletextform &= ~1;
      choice->initgraphics = video4lutinit;
      choice->initteletext = video4lutinit;
      choice->scalegraphics = video24lutscale;
      choice->scaleteletext = video32lutsixdotscale;
      break;

    case 0x0103:
      choice->initgraphics = video8lutinit;
      choice->scalegraphics = video8lutscale;
      choice->scaleteletext = video8lutscale;
      break;
    case 0x0183:
      setlutparameters(&choice->teletextlutparameters,2,2);
      choice->teletextform &= ~1;
      choice->initgraphics = video8lutinit;
      choice->initteletext = video8lutinit;
      choice->scalegraphics = video12lutscale;
      choice->scaleteletext = video16lutsixdotscale;
      break;
    case 0x0203:
      choice->initgraphics = video8lutinit;
      choice->scalegraphics = video16lutscale;
      choice->scaleteletext = video16lutscale;
      break;
    case 0x0283:
      choice->initgraphics = video8lutinit;
      choice->scalegraphics = video20lutscale;
      choice->scaleteletext = video20lutscale;
      break;
    case 0x0303:
      setlutparameters(&choice->teletextlutparameters,4,4);
      choice->teletextform &= ~1;
      choice->initgraphics = video8lutinit;
      choice->initteletext = video8lutinit;
      choice->scalegraphics = video24lutscale;
      choice->scaleteletext = video32lutsixdotscale;
      break;
    case 0x0403:
      choice->initgraphics = video8lutinit;
      choice->scalegraphics = video32lutscale;
      choice->scaleteletext = video32lutscale;
      break;
    case 0x0503:
      choice->initgraphics = video8lutinit;
      choice->scalegraphics = video40lutscale;
      choice->scaleteletext = video40lutscale;
      break;
    case 0x0603:
      setlutparameters(&choice->teletextlutparameters,8,8);
      choice->teletextform &= ~1;
      choice->initgraphics = video8lutinit;
      choice->initteletext = video8lutinit;
      choice->scalegraphics = video48lutscale;
      choice->scaleteletext = video64lutsixdotscale;
      break;

    case 0x0104:
      choice->initgraphics = video16lutinit;
      choice->scalegraphics = video16lutscale;
      choice->scaleteletext = video16lutscale;
      break;
    case 0x0184:
      setlutparameters(&choice->teletextlutparameters,2,2);
      choice->teletextform &= ~1;
      choice->initgraphics = video16lutinit;
      choice->initteletext = video16lutinit;
      choice->scalegraphics = video24lutscale;
      choice->scaleteletext = video32lutsixdotscale;
      break;
    case 0x0204:
      choice->initgraphics = video16lutinit;
      choice->scalegraphics = video32lutscale;
      choice->scaleteletext = video32lutscale;
      break;
    case 0x0284:
      choice->initgraphics = video16lutinit;
      choice->scalegraphics = video40lutscale;
      choice->scaleteletext = video40lutscale;
      break;
    case 0x0304:
      setlutparameters(&choice->teletextlutparameters,4,4);
      choice->teletextform &= ~1;
      choice->initgraphics = video16lutinit;
      choice->initteletext = video16lutinit;
      choice->scalegraphics = video48lutscale;
      choice->scaleteletext = video64lutsixdotscale;
      break;
    case 0x0404:
      choice->initgraphics = video16lutinit;
      choice->scalegraphics = video64lutscale;
      choice->scaleteletext = video64lutscale;
      break;
    case 0x0504:
      choice->graphicslutparameters.leftpixel = 3;
      choice->graphicslutparameters.rightpixel = 3;
      choice->initgraphics = video16lutinit;
      choice->scalegraphics = video80from48lutscale;
      choice->scaleteletext = video80from48lutscale;
      break;
    case 0x0604:
      choice->graphicslutparameters.leftpixel = 2;
      choice->graphicslutparameters.rightpixel = 2;
      setlutparameters(&choice->teletextlutparameters,2,2);
      choice->teletextform &= ~1;
      choice->initgraphics = video16lutinit;
      choice->initteletext = video16lutinit;
      choice->scalegraphics = video96from32lutscale;
      choice->scaleteletext = video128from32lutsixdotscale;
      break;

    case 0x0105:
      choice->initgraphics = video32lutinit;
      choice->scalegraphics = video32lutscale;
      choice->scaleteletext = video32lutscale;
      break;
    case 0x0185:
      setlutparameters(&choice->teletextlutparameters,2,2);
      choice->teletextform &= ~1;
      choice->initgraphics = video32lutinit;
      choice->initteletext = video32lutinit;
      choice->scalegraphics = video48lutscale;
      choice->scaleteletext = video64lutsixdotscale;
      break;
    case 0x0205:
      choice->initgraphics = video32lutinit;
      choice->scalegraphics = video64lutscale;
      choice->scaleteletext = video64lutscale;
      break;
    case 0x0285:
      choice->graphicslutparameters.leftpixel = 2;
      choice->graphicslutparameters.rightpixel = 1;
      choice->initgraphics = video32lutinit;
      choice->scalegraphics = video80from48lutscale;
      choice->scaleteletext = video80from48lutscale;
      break;
    case 0x0305:
      choice->graphicslutparameters.leftpixel = 1;
      choice->graphicslutparameters.rightpixel = 1;
      setlutparameters(&choice->teletextlutparameters,1,1);
      choice->teletextform &= ~1;
      choice->initgraphics = video32lutinit;
      choice->initteletext = video32lutinit;
      choice->scalegraphics = video96from32lutscale;
      choice->scaleteletext = video128from32lutsixdotscale;
      break;
    case 0x0405:
      choice->graphicslutparameters.leftpixel = 1;
      choice->graphicslutparameters.rightpixel = 1;
      choice->initgraphics = video32lutinit;
      choice->scalegraphics = video128from32lutscale;
      choice->scaleteletext = video128from32lutscale;
      break;
    case 0x0505:
      choice->graphicslutparameters.leftpixel = 1;
      choice->graphicslutparameters.rightpixel = 1;
      choice->initgraphics = video32lutinit;
      choice->scalegraphics = video160from32lutscale;
      choice->scaleteletext = video160from32lutscale;
      break;
    case 0x0605:
      choice->graphicslutparameters.leftpixel = 1;
      choice->graphicslutparameters.rightpixel = 1;
      setlutparameters(&choice->teletextlutparameters,1,1);
      choice->teletextform &= ~1;
      choice->initgraphics = video32lutinit;
      choice->initteletext = video32lutinit;
      choice->scalegraphics = video192from32lutscale;
      choice->scaleteletext = video256from32lutsixdotscale;
      break;
  }

  linelengthmask = ~3;

  if ((choice->teletextform & 1) == 0)
  {
    //six dot scaling spans 2 words
    linelengthmask &= ~7;
    choice->alignmentmask &= ~7;
  }
  if (log2bpp == 2 && (scaleselector & 0x80))
  {
    //the 4-bit half-integer scale functions step by 2 words
    linelengthmask &= ~7;
  }

  xresbeforescale = (xres<<1)/(scaleselector>>7);

  if (xresbeforescale > xresbeforescalemax)
  {
    xresbeforescale = xresbeforescalemax;
  }

  xresbeforescale &= (linelengthmask<<1);
  xresafterscale = (xresbeforescale*(scaleselector>>7))>>1;
  xresremainder = xres - xresafterscale;
  yresremainder = yres - ((256<<ratioshift)>>1)*(scaleselector>>7);

#ifdef VIDEOSCALE_WITH_OVERSCALE
  if (xresremainder < 0)
    xresremainder = 0;
  if (yresremainder < 0)
    yresremainder = 0;
#endif

  choice->linelengthfloor = xresbeforescale>>1;
  choice->scaledlinelengthfloor = (((xresafterscale << log2bpp)+31)>>5)<<2;
  choice->screenoffsetlines = yresremainder>>1;
  choice->screenoffsetremainder = ((xresremainder << log2bpp-1)>>5)<<2;

  if (choice->initgraphics)
  {
    es = getentrysizeforbarrelshiftedlookup(&choice->graphicslutparameters,log2bpp);
    choice->graphicslutparameters.offset = choice->lutsize;
    choice->lutsize = choice->lutsize + 256*es;
  }
  if (choice->initteletext)
  {
    es = getentrysizeforbarrelshiftedlookup(&choice->teletextlutparameters,log2bpp);
    choice->teletextlutparameters.offset = choice->lutsize;
    choice->lutsize = choice->lutsize + 256*es;
  }

#ifdef VIDEOSCALE_WITH_OVERSCALE
  xlimit = choice->linelengthfloor;
  if (choice->linelengthfloor < 320)
  {
    choice->linelengthfloor = 320;
  }
  ylimit = yres;
  limitscale(choice, xlimit, ylimit);
#endif
}
