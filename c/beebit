/*>beebit.c
 *
 * BeebIt - BBC Micro Model B Emulator
 *
 * (C) Copyright Michael J Foot, 1998-2024
 *
 * Email: <mjfoot.nz@gmail.com>
 *
 * Enhanced host screen mode compatibility (and more)
 *   contributed by Crispian Daniels in 2024
 *
 * Email: <convertedgames@3insdale.me.uk>
 */

#include <stdio.h>
#include <string.h>
/*#include <time.h>*/
#include "hostmap.h"
#include "1770fdc.h"
#include "8271fdc.h"
#include "6845crtc.h"
#include "6850acia.h"
#include "adc.h"
#include "beebit.h"
#include "kernel.h"
#include "keyboard.h"
#include "main.h"
#include "riscos.h"
#include "scrmode.h"
#include "scrsave.h"
#include "sheila.h"
#include "swis.h"
#include "video.h"

#define OS_Sprite 0x2E
#define ZeriBeep_Attach 0x55E40
#define ZeriBeep_Detach 0x55E41
#define KeyBuffer_Claim 0x65400
#define KeyBuffer_Release 0x65401
#define KeyBuffer_Read 0x65402

#define __DEVELOP__

/*#define NEXT_TIME CLK_TCK/25;*/ /*25 times per second*/

extern _kernel_swi_regs regs;

int beebit_trace;
char beebit_osrom[MACHINE_COMPACT+1][128];
int beebit_romwrite[(MACHINE_COMPACT*16)+16];
char beebit_romimage[(MACHINE_COMPACT*16)+16][128];
char beebit_rompath[128];
char beebit_keylayout[128];
char beebit_discimage[4][128];
int beebit_sectorcount[4];
int beebit_imagetype[4];
int beebit_discwritable[2];
FILE *beebit_driveimage[4]; /*file handles*/
char beebit_uefimage[128];
FILE *beebit_tapeimage; /*file handles*/

char beebit_cmosdefault[0x40] = {0,0,0,0,0,0xC9,0xFF,0xFE,0x32,0,7,0xC1,0x1E,5,0,0x58,0xA2}; /*default CMOS RAM values*/
char beebit_cmos[0x40];

int beebit_graphicsmodeselector[10]; /*selector used when mode is not specified by number*/
intptr_t beebit_graphicsmodespecifier;
int beebit_currenttype;
int beebit_machinetype;
int beebit_cpuspeed;
int beebit_videospeed;
int beebit_framerate;
int beebit_mouseemulation;
int beebit_displaymode;
int beebit_displayzoom;
int beebit_hadjust;
int beebit_vadjust;
int beebit_palette;
int beebit_sound;
int beebit_cursor;
int beebit_topmiddle;
int beebit_fasttape;
int beebit_printer;
int beebit_links; /*keyboard links*/
int beebit_button1; /*joystick button 1*/
int beebit_button2; /*joystick button 2*/
int beebit_leds,host_leds;
int beebit_rommask;
int beebit_exit; /*exit the emulation F12 or close window*/

int lexit, lprintscreen;
/*int ncounterstart;*/
/*clock_t nclock;*/

#ifdef __DEVELOP__
  FILE *htrace;
#else
  #ifdef __DEBUG__
    FILE *htrace;
  #endif
#endif

void copyselectedromintomemory(void)
{
  int nrom;

  nrom = hostmap.romsel & 0x0F;
  if (beebit_machinetype == MACHINE_MODELBPLUS)
  {
    /*rom F uses rom E*/
    if (nrom == 0x0F)
      nrom = 0x0E;
  }
  memcpy(&hostmap.memory[0x8000],hostmap.roms[nrom],0x4000);
}

int loadrom(char *cfilename,int nslot)
{
  char cname[256] ="BeebItInternalRom:";
  char setname[256] ="SET BeebItInternalRom$Path ";
  FILE *hfile;
  int nlen, lreturn, nfilesize;

  strcat(setname,beebit_rompath);
  nlen = strlen(setname);
  if (setname[nlen-1] != 0x2E AND setname[nlen-1] != 0x3A) /*. or :*/
    strcat(setname,".");
  _kernel_oscli(setname);
  strcat(cname,cfilename);

  lreturn = TRUE;

  hfile = fopen(cname,"rb");
  if (hfile == NULL)
  {
    lreturn = FALSE;
  }
  else
  {
    if (nslot == -1)
    {
      nfilesize = fread(&hostmap.memory[0xC000],1,0x4000,hfile);
      if (nfilesize > 0x4000)
      {
        lreturn = FALSE;
      }
    }
    else
    {
      nfilesize = fread(&hostmap.roms[nslot],1,0x4000,hfile);
      if (nfilesize > 0x4000)
      {
        lreturn = FALSE;
      }
    }
  }
  fclose(hfile);
  return (lreturn);
}

void beebitreset(void)
{
  /*char cname[128];*/
  /*int nlen;*/
  /*lexit = (!loadrom("<BeebIt$Dir>.ROMs.OS",-1));*/
  /*strcpy(cname,beebit_rompath);*/
  /*strcat(cname,".OS");*/
  /*nlen = strlen(cname);
  if (cname[nlen-1] != 0x2E AND cname[nlen-1] != 0x3A)*/ /*. or :*/
    /*strcat(cname,".");*/
  /*strcat(cname,beebit_osrom[beebit_machinetype]);*/
  /*lexit = (!loadrom(cname,-1));*/
  lexit = (!loadrom(beebit_osrom[beebit_machinetype],-1));
  if (lexit)
    wimperror("Unable to load Operating System ROM");
  else
  {
    hostmap.romsel = 0;
    hostmap.acccon = 0;
    beebit_rommask = 0xFFFFFF;
    beebit_button1 = 0;
    beebit_button2 = 0;

    beebit_sectorcount[0] = 0;
    beebit_sectorcount[1] = 0;
    beebit_sectorcount[2] = 0;
    beebit_sectorcount[3] = 0;
    beebit_imagetype[0] = DFS_NONE;
    beebit_imagetype[1] = DFS_NONE;
    beebit_imagetype[2] = DFS_NONE;
    beebit_imagetype[3] = DFS_NONE;

    lexit = hostmapresetcpu();

    if (lexit)
      wimperror("Unable to configure CPU type");
    else
    {
      hostmapresetperipherals();

      /*don't clear memory on reset*/
      /*memory[0x258]=0;
      memory[0x287]=0;
      writesheila(0xFE4E,0xF2);*/

      /*nclock = clock()+NEXT_TIME;*/
      beebit_currenttype = beebit_machinetype;
    }
  }
}

int beebitsectorcount(FILE *hfile)
{
  int nb6, nb7;
  if (hfile != NULL)
  {
    /*track=0, sector=1*/
    i8271readimage(hfile, 0x100, DFS_SECTOR_SIZE);
    nb6 = (i8271_data[6] & 0x0F);
    nb7 = i8271_data[7];
    return ((nb6<<8)+nb7);
  }
  else
    return (0);
}

int beebitimagedsd(int nimagetype)
{
  switch (nimagetype)
  {
    case DFS_DSD_TRACK:
    case DFS_DSD_SIDE:
    case ADFS_INTERLEAVED:
    case ADFS_NON_INTERLEAVED:
      return (TRUE);
    default:
      return (FALSE);
  }
}

int beebitimagetype(FILE *hfile, int nsectorcount)
{
  char nb6l, nb6h, nb7;
  int nsize, nlocation, nresult;
  long nlen;
  if (hfile != NULL)
  {
    /*check for ADFS images*/
    i8271readimage(hfile, 0x00, ADFS_SECTOR_SIZE);
    nsize = (i8271_data[0xFC] << 16) + (i8271_data[0xFD] << 8) + i8271_data[0xFE];
    if (nsize == 0x500)
      /*ADFS M*/
      nresult = ADFS_NON_INTERLEAVED;
    else if (nsize == 0xA00)
      /*ADFS L*/
      nresult = ADFS_INTERLEAVED;
    else
    {
      /*check for DSD image*/
      /*find length of image file*/
      nlocation = (nsectorcount*DFS_SECTOR_SIZE);
      fseek(hfile,0,SEEK_END);
      nlen = ftell(hfile);
      /*if length <= descriptor length*/
      /*if (nlen <= nlocation)*/
        /*it's a single sided image*/
        /*nresult = DFS_SSD;
      else
      {*/
        /*track=1, sector=1*/
        if (nlen > 0xB00)
        {
          i8271readimage(hfile, 0xB00, DFS_SECTOR_SIZE);
          nb6l = (i8271_data[6] & 0x0F);
          nb6h = (i8271_data[6] & 0xC0); /*strip out boot options (b4, b5)*/
          nb7 = i8271_data[7];
          if (((nb6l << 8) + nb7) == nsectorcount && nb6h == 0)
            /*it's a double sided disc, track interleaved*/
            nresult = DFS_DSD_TRACK;
          else
          {
            nlocation = (nsectorcount+1)*DFS_SECTOR_SIZE;
            if (nlocation < nlen)
            {
              i8271readimage(hfile, nlocation, DFS_SECTOR_SIZE);
              if (((i8271_data[6] & 0x0F) == nb6l) AND ((i8271_data[6] & 0xC0) == nb6h) AND (i8271_data[7] == nb7))
                nresult = DFS_DSD_SIDE;
              else
                nresult = DFS_SSD;
            }
            else
              nresult = DFS_SSD;
          }
        }
        else
          nresult = DFS_SSD;
      /*}*/
    }
  }
  else
    nresult = DFS_NONE;

  /*inttohex4(nresult);
  bbcvdu(13);
  bbcvdu(10);*/
  return (nresult);
}

void beebitinit(void)
{
  /*FILE *hh1;
  char cbuffer[128];*/
  /*shadow memory pointer*/
  /*shadow = memory+0x10000;*/

  /*shadow[0] = 0x12;
  shadow[1] = 0x34;
  shadow[2] = 0x43;

  hh1 = fopen("SHAD","wb");
  fwrite(memory,1,0x20000,hh1);
  fclose(hh1);*/

  beebit_trace = FALSE;
  /*set caps lock on*/
  beebit_leds = 0x00;
  /*set up default configuration*/
  beebit_machinetype = beebit_currenttype = -1;
  beebit_sound = TRUE;
  beebit_cursor = TRUE;
  beebit_topmiddle = TRUE;
  beebit_fasttape = FALSE;
  beebit_printer = FALSE;
  beebit_links = 0;
  beebit_videospeed = VIDEO_SLOW;
  beebit_framerate = VIDEO_50FPS;

  beebit_discimage[0][0] = 0x00;
  beebit_discimage[1][0] = 0x00;
  beebit_discimage[2][0] = 0x00;
  beebit_discimage[3][0] = 0x00;

  beebit_graphicsmodespecifier = -1;

  hostmapinit();

  /*#ifdef __DEVELOP__
    htrace = fopen("<BeebIt$Dir>.!TRACE","w");
  #else
    #ifdef __DEBUG__
      htrace = fopen("<BeebIt$Dir>.!TRACE","w");
    #endif
  #endif*/
}

int beebitenter(void)
{
  char /*cbuffer[128],*/cname[128];
  /*char *n;*/
  /*int nicon[0x10] = {49,46,43,40,37,34,31,28,25,22,19,16,13,10,7,4};*/
  char* rom;
  int i, lredraw, nmask, nindex;
  I8271_REMOVED_DATA discremoveddata;
  int minlinescale;
  FILE *hfile;

  lexit = FALSE;
  lredraw = TRUE;
  adcenter();

  if (beebit_machinetype != beebit_currenttype)
    beebitreset();

  if (lexit)
    lredraw = FALSE;
  else
  {
    /*configuration*/
    for (i=0x0F;i>=0x00;i--)
    {
      /*set up ROM writable flags*/
      hostmap.romwritable[i] = beebit_romwrite[(beebit_machinetype*16)+i] != 0;
      /*n = readicon(hconfig,nicon[i]);
      strcpy(cbuffer,n);
      if (strlen(cbuffer) > 1)*/
      nmask = (1 << (i+1));
      if ((beebit_rommask & nmask) == nmask)
      {
        nindex = (beebit_machinetype*16)+i;
        if (strlen(beebit_romimage[nindex]) > 1)
        {
          /*strcpy(cname,beebit_rompath);*/
          /*nlen = strlen(cname);
          if (cname[nlen-1] != 0x2E AND cname[nlen-1] != 0x3A)*/ /*. or :*/
            /*strcat(cname,".");*/
          /*strcat(cname,beebit_romimage[nindex]);*/
          /*if (!loadrom(cname,i))*/
          if (!loadrom(beebit_romimage[nindex],i))
          {
            strcpy(cname,"Unable to load ROM ");
            /*strcat(cname,cbuffer);*/
            strcat(cname,beebit_romimage[nindex]);
            wimperror(cname);
          }
        }
        else
        {
          /*if (!hostmap.romwritable[i])
          {*/
            /*clear the contents of the ROM*/
            rom = (char*)&hostmap.roms[i];
            setword(rom,0);
            setword(rom+4,0);
            setword(rom+8,0);
            setword(rom+12,0);
          /*}*/
        }
      }
    }
    beebit_rommask = 0;
    /*disc images*/
    memcpy(discremoveddata, i8271_data, sizeof(I8271_REMOVED_DATA));
    for (i=0;i<=3;i++)
    {
      if (strlen(beebit_discimage[i]) > 1)
      {
        beebit_driveimage[i] = fopen(beebit_discimage[i],"rb+");
        if (beebit_driveimage[i] == NULL)
        {
          beebit_sectorcount[i] = 0;
          beebit_imagetype[i] = DFS_NONE;
        }
        else
        {
          beebit_sectorcount[i] = beebitsectorcount(beebit_driveimage[i]);
          beebit_imagetype[i] = beebitimagetype(beebit_driveimage[i],beebit_sectorcount[i]);
        }
      }
      else
        beebit_driveimage[i] = 0;
    }
    memcpy(i8271_data, discremoveddata, sizeof(I8271_REMOVED_DATA));
    if (beebit_imagetype[0] == DFS_DSD_TRACK OR beebit_imagetype[0] == DFS_DSD_SIDE OR beebit_imagetype[0] == ADFS_INTERLEAVED)
      beebit_imagetype[2] = beebit_imagetype[0];
    if (beebit_imagetype[1] == DFS_DSD_TRACK OR beebit_imagetype[1] == DFS_DSD_SIDE OR beebit_imagetype[0] == ADFS_INTERLEAVED)
      beebit_imagetype[3] = beebit_imagetype[1];

    uefopen(); /*reset pointer*/

    keyboardreset();
    keyboardsetlinks();

    switch (beebit_machinetype)
    {
      case MACHINE_MASTER128:
      case MACHINE_COMPACT:
        if (beebit_machinetype == MACHINE_MASTER128)
        {
          /*new location*/
          hfile = fopen("Choices:BeebIt.CMOSM","rb");
          if (hfile == NULL)
            /*old location*/
            hfile = fopen("<BeebIt$Dir>.CMOSM","rb");
        }
        else
        {
          /*new location*/
          hfile = fopen("Choices:BeebIt.CMOSC","rb");
          if (hfile == NULL)
            /*old location*/
          hfile = fopen("<BeebIt$Dir>.CMOSC","rb");
        }
        if (hfile == NULL)
          memcpy(beebit_cmos,beebit_cmosdefault,0x40);
        else
        {
          fread(beebit_cmos,1,0x40,hfile);
          fclose(hfile);
        }
        break;
      default:
        break;
    }

    /*t76489initialise();*/ /*sound*/
    /*_kernel_swi(0x4E0C0,&regs,&regs);*/
    /*_kernel_oscli("BeebSoundInitialise");*/
    /*_kernel_swi(ZeriBeep_Attach,&regs,&regs);
    zeribeep_writebyte = regs.r[0];
    zeribeep_workspace = regs.r[1];*/
#ifdef __RISCOS__
    zeribeepattach();
#endif
    hostmapapplysoundoption();

    /*if (beebit_singletask)
    {*/

    /*set keyboard status*/
    regs.r[0] = 202;
    regs.r[1] = beebit_leds & 0x10;
    regs.r[2] = 0xEF;
    _kernel_swi(OS_Byte,&regs,&regs);
    /*save current status*/
    host_leds = regs.r[1];
    regs.r[0] = 118;
    _kernel_swi(OS_Byte,&regs,&regs);

    /*disable <Break>*/
    breakdisable();
    /*disable <Escape>*/
    escapedisable();

    /*work out the best video mode to use*/
    /*hh1 = fopen("<BeebIt$Dir>.Trace","w");*/

    beebit_graphicsmodespecifier = -1;
    switch (beebit_displaymode)
    {
      case DISPLAY_MODE_AUTO:
        break;
      case DISPLAY_MODE_LOW:
        if (numberedscreenmodeflags & (1<<12))
          beebit_graphicsmodespecifier = 12;
        break;
      case DISPLAY_MODE_MEDIUM:
        if (numberedscreenmodeflags & (1<<15))
          beebit_graphicsmodespecifier = screenmodespecifymedium(&beebit_graphicsmodeselector);
        break;
      case DISPLAY_MODE_HIGH:
        if (numberedscreenmodeflags & (1<<21))
          beebit_graphicsmodespecifier = screenmodespecifyhigh(&beebit_graphicsmodeselector);
        break;
      default:
        i = beebit_displaymode - DISPLAY_MODE_FIRST_IN_TABLE;
        if (i>=0 && i<screenmoderecordcount)
        {
          screenmodesetblock(screenmoderecords+i,&beebit_graphicsmodeselector);
          beebit_graphicsmodespecifier = (intptr_t)beebit_graphicsmodeselector;
        }
        break;
    }
    if (beebit_graphicsmodespecifier == -1)
    {
      do
      {
        if (beebit_videospeed == VIDEO_FAST && beebit_videospeed == VIDEO_SLOW)
        {
          if (numberedscreenmodeflags & (1<<12))
          {
            beebit_graphicsmodespecifier = 12;
            break;
          }
          if (numberedscreenmodeflags & (1<<15))
          {
            beebit_graphicsmodespecifier = 15;
            break;
          }
          minlinescale = 1;
        }
        else
          minlinescale = 2;

        if (numberedscreenmodeflags & (1<<21))
        {
          beebit_graphicsmodespecifier = 21;
          break;
        }
#ifdef VIDEOSCALE_WITH_OVERSCALE
        i = pickascreenmode(1280,1024,minlinescale);
        if (i>=0)
        {
          screenmodesetblock(screenmoderecords+i,&beebit_graphicsmodeselector);
          beebit_graphicsmodespecifier = (intptr_t)beebit_graphicsmodeselector;
          break;
        }
#endif
        i = pickascreenmode(640,256,minlinescale);
        if (i>=0)
        {
          screenmodesetblock(screenmoderecords+i,&beebit_graphicsmodeselector);
          beebit_graphicsmodespecifier = (intptr_t)beebit_graphicsmodeselector;
          break;
        }
        wimperror("A suitable screen mode cannot be found");
        lexit = TRUE;
        lredraw = FALSE;
      }
      while (FALSE);
    }

    /*beebit_trace = TRUE;*/

    if (!lexit)
    {
      /*fclose(hh1);*/

      /*allocate space for screen buffer sprite*/
      spritealloc();

      videosetpalette();
      videosetscale();

      if (screenmoderecords)
      {
        regs.r[0] = 0;
        regs.r[1] = beebit_graphicsmodespecifier;
        _kernel_swi(OS_ScreenMode,&regs,&regs);
      }
      else
      {
        bbcvdu(22);
        bbcvdu(beebit_graphicsmodespecifier);
      }

      cursordisable();
      videohostmodevars();
      adcmodevars();
    }
    if (!lexit)
      keyclaim();
    /*}
    else
    {*/
      /*multitask*/
      /*videohostmodevars();
      adcmodevars();*/
      /*setword((char *)nlocalscreen, (int)screen);*/
      /*initialise keyboard handler*/
      /*_kernel_swi(KeyBuffer_Claim,&regs,&regs);
      keybufferid = regs.r[0];
    }*/
  }
  return (lredraw);
}

void beebitpoll(void)
{
  /*char *keybufferaddr;
  char *keylookupaddr;
  char *keystatusaddr;
  int count, i;
  int keycode, keydown;*/

  hostmapexecute();

  /*if (NOT beebit_singletask)
  {*/
    /*read keyboard buffer*/
    /*regs.r[0] = keybufferid;
    _kernel_swi(KeyBuffer_Read,&regs,&regs);
    count = regs.r[2];
    if (count > 0)
    {
      keydown = FALSE;
      keybufferaddr = (char *)regs.r[1];
      keylookupaddr = (char *)keylookup;
      keystatusaddr = (char *)keystatus;
      for (i = 0; i < count; i+=2)
      {
        keycode = keylookupaddr[keybufferaddr[i+1]];
        if (keybufferaddr[i] == 0)
          keystatusaddr[keycode] = 0;*/ /*up*/
        /*else
          keystatusaddr[keycode] = 0xFF;*/ /*keybufferaddr[i];*/ /*up/down*/
        /*if (NOT keydown)
          keydown = (keybufferaddr[i] = 1);
      }*/
      /*only call this if a key is up*/
      /*if (keydown)
        systemviasetca2();
    }
  }*/
}


void beebitexit(void)
{
  char choicedir[]="<Choices$Write>.BeebIt";
  FILE *hfile;

  /*t76489closedown();*/ /*sound*/
  /*_kernel_swi(0x4E0C1,&regs,&regs);*/
  /*_kernel_oscli("BeebSoundCloseDown");*/
#ifdef __RISCOS__
  zeribeepdetach();
#endif

  videofreeworkspace();

  /*if (beebit_singletask)
  {*/
    if (!lexit)
      keyrelease();
    /*enable <Escape>*/
    escapeenable();
    /*enable <Break>*/
    breakenable();

    /*set keyboard status*/
    regs.r[0] = 202;
    regs.r[1] = host_leds & 0x10;
    regs.r[2] = 0xEF;
    _kernel_swi(OS_Byte,&regs,&regs);
    regs.r[0] = 118;
    _kernel_swi(OS_Byte,&regs,&regs);
  /*}
  else
  {*/
    /*release keyboard handler*/
    /*regs.r[0] = keybufferid;
    _kernel_swi(KeyBuffer_Release,&regs,&regs);
  }*/

  switch (beebit_machinetype)
  {
    case MACHINE_MODELB:
    case MACHINE_MODELBPLUS:
      break;
    case MACHINE_MASTER128:
    case MACHINE_COMPACT:
      regs.r[0] = 8; /* create directory*/
      regs.r[1] = (int)choicedir;
      regs.r[4] = 0;
      _kernel_swi(OS_File,&regs,&regs);
      if (beebit_machinetype == MACHINE_MASTER128)
      {
        /*new location*/
        hfile = fopen("<Choices$Write>.BeebIt.CMOSM","wb");
        if (hfile != NULL)
          /*delete old file*/
          remove("<BeebIt$Dir>.CMOSM");
       }
      else
      {
        /*new location*/
        hfile = fopen("<Choices$Write>.BeebIt.CMOSC","wb");
        if (hfile != NULL)
          /*delete old file*/
          remove("<BeebIt$Dir>.CMOSC");
      }
      if (hfile != NULL)
      {
        fwrite(beebit_cmos,1,0x40,hfile);
        fclose(hfile);
      }
      break;
  }

  uefclose();

  if (beebit_driveimage[0])
    fclose(beebit_driveimage[0]);
  if (beebit_driveimage[1])
    fclose(beebit_driveimage[1]);
  if (beebit_driveimage[2])
    fclose(beebit_driveimage[2]);
  if (beebit_driveimage[3])
    fclose(beebit_driveimage[3]);

  /*if (beebit_singletask)*/
    cursorenable();

  /*hfile = fopen("ROMSlots","wb");
  if (hfile != NULL)
  {
    for (i=0;i<16;i++)
      fwrite(roms[i],1,0x4000,hfile);
    fclose(hfile);
  }*/
}

void beebitclosedown(void)
{
  #ifdef __DEBUG__
    FILE *hfile;
  #endif
  /*#ifdef __DEVELOP__
      fclose(htrace);
  #else
    #ifdef __DEBUG__
      fclose(htrace);
    #endif
  #endif*/
  /*#ifdef __DEBUG__
    hfile = fopen("<BeebIt$Dir>.DUMP","wb");
    fwrite(memory,1,0x10000,hfile);
    fclose(hfile);
    hfile = fopen("<BeebIt$Dir>.SCREEN","wb");
    fwrite(memory+video_startaddress,1,0x2800,hfile);
    fclose(hfile);
  #endif*/

  /*free space for screen buffer sprite*/
  spritefree();
}

/*void updateCaI(void)
{*/
  /*cyclestogo = counter*/
/*  dointerrupts();
} */
