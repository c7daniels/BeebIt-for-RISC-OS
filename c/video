/*>video.c
 *
 * BeebIt - BBC Micro Model B Emulator
 *
 * (C) Copyright Michael J Foot, 1998-2024
 *
 * Email: <mjfoot.nz@gmail.com>
 *
 * Enhanced host screen mode compatibility (and more)
 *   contributed by Crispian Daniels in 2024
 *
 * Email: <convertedgames@3insdale.me.uk>
 */

/*on the 3dpool disc is a demo called BBoing! It uses an extra wide screen mode which does not get emulated here properly*/
/*boffin does this too*/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <time.h>
#include "6502cpu.h"

#include "6522sysvia.h"
#include "6845crtc.h"
#include "beebit.h"
#include "kernel.h"
#include "main.h"
#include "riscos.h"
#include "scrmode.h"
#include "swis.h"
#include "video.h"
#include "videoscale.h"
#include "videoula.h"
#include "adc.h"

#ifndef ColourTrans_ReturnColourNumber
#define ColourTrans_ReturnColourNumber 0x040744
#endif
#ifndef ColourTrans_WritePalette
#define ColourTrans_WritePalette 0x04075D
#endif

extern _kernel_swi_regs regs;

#define TIME_25HZ 4 /*CLK_TCK/25*/ /*25 times per second*/
#define TIME_50HZ 2 /*CLK_TCK/50*/ /*50 times per second*/
/*#define VIDEO_DRAWWAIT 0
#define VIDEO_DRAWBLANK0 1
#define VIDEO_DRAWLINE 2
#define VIDEO_DRAWBLANK1 3*/
#define TELETEXT_ALPHA 0
#define TELETEXT_GRAPHICS 1
#define TELETEXT_CONCEAL 2
#define TELETEXT_ALPHA_NORMAL 0
#define TELETEXT_ALPHA_DOUBLETOP 1
#define TELETEXT_ALPHA_DOUBLEBOTTOM 2
#define TELETEXT_GRAPHICS_CONTIGUOUS 0
#define TELETEXT_GRAPHICS_SEPARATED 1

extern void videodrawline0(void);
extern void sprite_printscreen(void);

extern int lprintscreen;

/*palette*/
const unsigned int palette_rgb[8] =
{
  0x00000000, /*black*/
  0x0000FF00, /*red*/
  0x00FF0000, /*green*/
  0x00FFFF00, /*yellow*/
  0xFF000000, /*blue*/
  0xFF00FF00, /*magenta*/
  0xFFFF0000, /*cyan*/
  0xFFFFFF00  /*white*/
};
unsigned int palette_specified[8];

/*teletext*/
struct {
  int field0[2*10*224];
  int normal[2*10*224];
  int field1[2*10*224];
} teletext_alpha;
int teletext_graphics[2*10*224];
unsigned int teletext_colourmap[0x08];
unsigned int teletext_colourmap4[0x08] = {
  0x00000000,0x11111111,0x22222222,0x33333333,0x44444444,0x55555555,0x66666666,0x77777777};
unsigned int teletext_colourmap8[0x08] = {
  0x00000000,0x15151515,0x62626262,0x77777777,0x88888888,0x9D9D9D9D,0xEAEAEAEA,0xFFFFFFFF};
int teletext_alphacolour;
int teletext_alphacolourmask;
int teletext_graphiccolour;
int teletext_graphiccolourmask;
int teletext_backcolourmask;
int teletext_character;
int teletext_style;
int teletext_doubleheight;
int teletext_doubleheightstyle;
int teletext_graphicstyle;
int teletext_holdgraphics;
int teletext_screenwidth;
int teletext_steady;
int teletext_timer; /*flashing timer*/
int teletext_leftoffscreen;
int teletext_leftextra;
int teletext_rightextra;

/*video*/
/*int video_vsync0;*/ /*start of vertical sync scan line*/
/*int video_vsync1;*/ /*end of vertical sync scan line*/
int video_mode; /*screen mode*/
int video_timer; /*scanline timer*/

/*int video_phase;*/
int video_currentrow; /*current row being drawn on local screen*/
int video_synchold;

int video_address; /*current address in bbc memory*/
int video_offset;
int video_width;
int video_displaywidth;
int video_field;
int video_drawline; /*when = 0 a line can be drawn on the screen*/
/*int video_onscreen;*/
int video_de;
int video_scanline; /*internal scanline counter. set to 0 when m6845_vsp*/
int video_display;
int video_framerate; /*frames rate (0-255)*/
char video_n1,video_n2;
int *videoscale_workspace = NULL;
int nlocalscreen;
int nlocalscreenlinelength;
int local_linelengthfloor; /*line length compatible with optimised blank, plot and scale routines*/
int local_teletextform; /*line ratio, pixel depth and graphics separation*/
int local_teletextlinelength;
VIDEOSCALELUTPARAMETERS host_graphicslutparameters;
VIDEOSCALELUTPARAMETERS host_teletextlutparameters;
VERTICALVIDEOSCALES host_verticalscales;
VERTICALLYSCALEDLINELENGTHS host_scaledlinelengths;
int host_colournumbers[8];
int host_colourmasks[8];
int host_scaledlinelengthfloor;
int host_scaledlinelength;
int host_scaledteletextrowlength;
int host_screenoffsetlines;
int host_screenoffsetremainder;
unsigned int cursor_bitmap;

clock_t nclock;
int nx,ny,nxoffscreen,nxend;
char video_n;
int nscreen;

void (*videoplot)(void);
void (*mode0plot)(int screenaddress, int displaywidth);
void (*mode1plot)(int screenaddress, int displaywidth);
void (*mode2plot)(int screenaddress, int displaywidth);
void (*mode3plot)(int screenaddress, int displaywidth);
void (*mode4plot)(int screenaddress, int displaywidth);
void (*mode5plot)(int screenaddress, int displaywidth);
void (*mode6plot)(int screenaddress, int displaywidth);
void (*mode8plot)(int screenaddress, int displaywidth);
void (*videoteletext)(void);
/*void (*video_plot[7])(void);*/
void (*videoscalegraphicsinit)(VIDEOSCALELUTPARAMETERS *lutparams);
void (*videoscaleteletextinit)(VIDEOSCALELUTPARAMETERS *lutparams);
void (*videographicsscale)(int bufferaddress, int hostaddress);
void (*videoteletextscale)(int bufferaddress, int hostaddress);

void videoinit(void)
{
  FILE *hfile;
  int pointer,i;

  hfile = fopen("<BeebIt$Dir>.Resources.MODE7A","rb");
  if (hfile != NULL)
  {
    fread(teletext_alpha.normal,1,sizeof(teletext_alpha.normal),hfile);
    fclose(hfile);
  }
  pointer = (int)teletext_alpha.normal;
  for (i=0; i<224; i++)
  {
    roundteletextalpha(pointer, pointer - sizeof(teletext_alpha.field0),
                                pointer + sizeof(teletext_alpha.normal));
    pointer += 80;
  }
  hfile = fopen("<BeebIt$Dir>.Resources.MODE7G","rb");
  if (hfile != NULL)
  {
    fread(teletext_graphics,1,sizeof(teletext_graphics),hfile);
    fclose(hfile);
  }
}

void videosetpalette(void)
{
  int i;
  unsigned int u;
  float weights[8],gamma;

  if (beebit_palette == PALETTE_RGB)
  {
    for (i=0; i<8; i++)
    {
      palette_specified[i] = palette_rgb[i];
    }
  }
  else
  {
    weights[0] = 0.0f;
    weights[7] = 1.0f;

    switch (beebit_palette)
    {
      case PALETTE_COLOUR:
        weights[1] = 0.4716f;
        weights[2] = 0.6118f;
        weights[3] = 0.8922f;
        weights[4] = 0.2990f;
        weights[5] = 0.5794f;
        weights[6] = 0.7196f;
        gamma = 0.45f;
        break;
      case PALETTE_GREY:
      case PALETTE_GREEN:
        weights[1] = 0.2657f;
        weights[2] = 0.5845f;
        weights[3] = 0.8501f;
        weights[4] = 0.1499f;
        weights[5] = 0.4155f;
        weights[6] = 0.7343f;
        gamma = 1.0f;
        break;
    }

    for (i=0; i<8; i++)
    {
      u = (unsigned int)nearbyintf(255.0f * powf(weights[i],gamma));
      palette_specified[i] = (u<<24)|(u<<16)|(u<<8);
    }

    switch (beebit_palette)
    {
      case PALETTE_COLOUR:
        for (i=0; i<8; i++)
        {
          palette_specified[i] &= palette_rgb[i];
        }
        break;
      case PALETTE_GREEN:
        for (i=0; i<8; i++)
        {
          palette_specified[i] &= 0x00FF0000;
        }
        break;
    }
  }
}

void videosetscale(void)
{
  VIDEOSCALECHOICE choice;
  int workspacesize;

  videoscalechoose(beebit_graphicsmodespecifier, &choice);

  beebit_graphicsmode = choice.mode;

  m6845_alignmentmask = choice.alignmentmask;
  local_linelengthfloor = choice.linelengthfloor;
  local_teletextform = choice.teletextform;
  host_scaledlinelengthfloor = choice.scaledlinelengthfloor;
  host_screenoffsetlines = choice.screenoffsetlines;
  host_screenoffsetremainder = choice.screenoffsetremainder;

  if (choice.scalegraphics)
  {
    if (choice.teletextform == 0)
    {
      local_teletextlinelength = 0;
      workspacesize = local_linelengthfloor;
    }
    else
    {
      local_teletextlinelength = (local_teletextform >> 2) * local_linelengthfloor;
      workspacesize = 10 * local_teletextlinelength;
    }

    workspacesize = choice.lutsize + workspacesize;

    if (videoscale_workspace)
    {
      videoscale_workspace = realloc(videoscale_workspace, workspacesize);
    }
    else
    {
      videoscale_workspace = malloc(workspacesize);
    }

    nlocalscreen = (int)videoscale_workspace + choice.lutsize;
    nlocalscreenlinelength = local_linelengthfloor;

    host_graphicslutparameters = choice.graphicslutparameters;
    host_teletextlutparameters = choice.teletextlutparameters;
    host_verticalscales = choice.verticalscales;

    videoscalegraphicsinit = choice.initgraphics;
    videoscaleteletextinit = choice.initteletext;

    videographicsscale = choice.scalegraphics;
    videoteletextscale = choice.scaleteletext;
  }
  else
  {
    if (videoscale_workspace)
    {
      free(videoscale_workspace);
      videoscale_workspace = NULL;
    }

    videoscalegraphicsinit = NULL;
    videoscaleteletextinit = NULL;

    videographicsscale = NULL;
    videoteletextscale = NULL;
  }
}

void videosetplot(void)
{
  /*video_plot[0] = videodrawline0;
  video_plot[1] = videodrawline1;
  video_plot[2] = videodrawline2;
  video_plot[3] = videodrawline3;
  video_plot[4] = videodrawline4;
  video_plot[5] = videodrawline5;
  video_plot[6] = videodrawline6;*/
  videoplot = videodrawline0;

  switch (beebit_graphicsmode)
  {
    case 12:
    case 20:
      mode0plot = mode0plot4;
      mode1plot = mode1plot4;
      mode2plot = mode2plot4;
      mode3plot = mode0plot4;
      mode4plot = mode4plot4;
      mode5plot = mode5plot4;
      mode6plot = mode4plot4;
      mode8plot = mode8plot4;
      cursor_bitmap = 0x77777777;
      break;
    case 15:
    case 21:
      mode0plot = mode0plot8;
      mode1plot = mode1plot8;
      mode2plot = mode2plot8;
      mode3plot = mode0plot8;
      mode4plot = mode4plot8;
      mode5plot = mode5plot8;
      mode6plot = mode4plot8;
      mode8plot = mode8plot8;
      cursor_bitmap = 0xFFFFFFFF;
      break;
  }
  if (local_teletextform == 0)
  {
    videoteletext = videoteletextrelay;
    bbcvdu(84);
    bbcvdu(55);
    bbcvdu(32);
  }
  else
  {
    videoteletext = videoteletextdrawrow;
    if ((local_teletextform & 2) == 0)
      memcpy(teletext_colourmap,teletext_colourmap4,0x20);
    else
      memcpy(teletext_colourmap,teletext_colourmap8,0x20);
  }
}

void videohostmodevars(void)
{
  int ncolour,log2bpp,i;
  unsigned int u;

  screenstartandlinelength();

  regs.r[0] = beebit_graphicsmodespecifier;
  regs.r[1] = 3;
  _kernel_swi(OS_ReadModeVariable,&regs,&regs);
  ncolour = regs.r[2];
  regs.r[1] = 9;
  _kernel_swi(OS_ReadModeVariable,&regs,&regs);
  log2bpp = regs.r[2];

  if (ncolour == 15 || ncolour == 255)
  {
    unsigned int fullpalette[256];

    for (i=0; i<8; i++)
    {
      fullpalette[i] = palette_specified[i];
      host_colournumbers[i] = i;
    }
    for (i=8; i<ncolour; i++)
    {
      fullpalette[i] = (i<<24)|(i<<16)|(i<<8);
    }

    regs.r[0] = -1;
    regs.r[1] = -1;
    regs.r[2] = (int)fullpalette;
    regs.r[3] = 0;
    regs.r[4] = 0;
    _kernel_swi(ColourTrans_WritePalette,&regs,&regs);
  }
  else
  {
    for (i=0; i<8; i++)
    {
      regs.r[0] = palette_specified[i];
      _kernel_swi(ColourTrans_ReturnColourNumber,&regs,&regs);
      host_colournumbers[i] = regs.r[0];
    }
  }

  for (i=0; i<8; i++)
  {
    u = host_colournumbers[i];
    if (log2bpp < 3)
      u |= (u<<4);
    if (log2bpp < 4)
      u |= (u<<8);
    if (log2bpp < 5)
      u |= (u<<16);
    host_colourmasks[i] = u;
  }

  if (beebit_graphicsmode == 15 || beebit_graphicsmode == 21)
  {
    cursor_bitmap = host_colourmasks[7];

    for (i=0; i<8; i++)
    {
      teletext_colourmap8[i] = host_colourmasks[i];
      videoula_colourmap8[i] = (char)host_colournumbers[i];
    }

    if ((local_teletextform & 2) == 2)
      memcpy(teletext_colourmap,teletext_colourmap8,0x20);

    if (!lteletextmode)
    {
      videoulasetpalette();
    }
  }

  if (videographicsscale)
  {
    if (videoscalegraphicsinit)
      videoscalegraphicsinit(&host_graphicslutparameters);
    if (videoscaleteletextinit)
      videoscaleteletextinit(&host_teletextlutparameters);

    host_scaledlinelengths.graphics =
        host_verticalscales.graphics * nhostscreenlinelength;
    host_scaledlinelengths.unroundedteletext =
        host_verticalscales.unroundedteletext * nhostscreenlinelength;
    host_scaledlinelengths.roundedteletext =
        host_verticalscales.roundedteletext * nhostscreenlinelength;

    host_scaledlinelength = host_scaledlinelengths.graphics;
    switch (local_teletextform >> 2)
    {
      case 1:
        host_scaledteletextrowlength = 10 * host_scaledlinelengths.unroundedteletext;
        break;
      case 2:
        host_scaledteletextrowlength = 20 * host_scaledlinelengths.roundedteletext;
        break;
      case 3:
        host_scaledteletextrowlength = 10 * (host_scaledlinelengths.roundedteletext +
            host_scaledlinelengths.unroundedteletext +
            host_scaledlinelengths.roundedteletext);
        break;
    }
  }

  nhostscreen += host_screenoffsetlines * nhostscreenlinelength + host_screenoffsetremainder;
  if (!videographicsscale)
  {
    nlocalscreen = nhostscreen;
    nlocalscreenlinelength = nhostscreenlinelength;
    local_teletextlinelength = (local_teletextform >> 2) * nhostscreenlinelength;
  }
}

int writeusedcolours(void)
{
  const char* const names[8] = {
    "Black",
    "Red",
    "Green",
    "Yellow",
    "Blue",
    "Magenta",
    "Cyan",
    "White"
  };
  const char *columnnames = "\n COLOUR    NUMBER      MASK      VALUE\n";
  int i;
  char buffer[128];

  wimpwrite(columnnames,1,strlen(columnnames));

  for (i=0; i<8; i++)
  {
    snprintf(buffer,sizeof(buffer),"%7s  &%8X  &%08X  &%08X\n",
      names[i],host_colournumbers[i],host_colourmasks[i],
      palette_specified[i]);
    wimpwrite(buffer,1,strlen(buffer));
  }

  return 1;
}

void videofreeworkspace(void)
{
  if (videoscale_workspace)
  {
    free(videoscale_workspace);
    videoscale_workspace = NULL;
  }
}

void videorecalc(void)
{
  video_offset = 0;
  video_synchold = 0;
}

void videoreset(int lfull)
{
  /*video_phase = VIDEO_DRAWWAIT;*/
  video_field = 0;
  video_drawline = 0;
  nclock = clock()+TIME_50HZ;
  m6845_scstep = 1;
  m6845_vc = 0; /*m6845_vsp;*/
  m6845_sc = -1;
  video_currentrow = 0;
  video_scanline = -1;
  /*video_onscreen = FALSE;*/
  video_de = FALSE;
  video_display = FALSE;
  teletext_alphacolour = 0x07;
  teletext_alphacolourmask= teletext_colourmap[0x07];
  teletext_graphiccolour = 0x07;
  teletext_graphiccolourmask = teletext_colourmap[0x07];
  teletext_backcolourmask = teletext_colourmap[0x00];
  teletext_character = 0x20;
  teletext_style = TELETEXT_ALPHA;
  teletext_doubleheight = FALSE;
  teletext_doubleheightstyle = TELETEXT_ALPHA_NORMAL;
  /*teletext_alphastyle = TELETEXT_ALPHA_NORMAL;*/
  teletext_graphicstyle = TELETEXT_GRAPHICS_CONTIGUOUS;
  teletext_holdgraphics = FALSE;
  teletext_steady = TRUE;
  teletext_timer = 0;
  if (lfull)
  {
    switch (beebit_machinetype)
    {
      case MACHINE_MODELB:
      case MACHINE_MODELBPLUS:
        video_timer = 600000;
        break;
      case MACHINE_MASTER128:
        video_timer = 1400000;
        break;
      case MACHINE_COMPACT:
        video_timer = 2000000;
        break;
      default:
        video_timer = 600000;
        break;
    }
    video_framerate = 0;
  }
  cursor_timer = cursor_blinktime;
  cursor_on = TRUE;
  videorecalc();
}

void videoblankline(void)
{
  /*blank rows until end of screen - mode 12,15 has 256 lines*/
  if (video_currentrow < 256)
  {
    #ifdef __RISCOS__
      blankrow(nscreen,local_linelengthfloor,0);
    #else
      cscreen = (char *)nscreen;
      nx = 0;
      while (nx < nlocalscreenlinelength)
      {
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
      }
    #endif
  }
}

void videodrawline0(void)
{
  /*
   *mode 0 - 80x32, 640x256, 1 bpp, 20k
   */
  /*draw leading blank area on this line*/
  if (m6845_sc & 0x08)
  {
    /*blank lines > 8*/
    #ifdef __RISCOS__
      /*nx = (m6845_screenwidth<<2) + m6845_leftextra + m6845_rightextra;
      blankrow(nscreen,nx,0);*/
      blankrow(nscreen,local_linelengthfloor,0);
    #else
      cscreen = (char *)nscreen;
      nx = 0;
      nxend = (m6845_screenwidth<<2) + m6845_leftextra + m6845_rightextra;
      while (nx < nxend) /*80*/
      {
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
      }
    #endif
  }
  else
  {
    #ifdef __RISCOS__
      blankrow(nscreen,m6845_leftextra,0x00);
      nx = m6845_leftextra;
    #else
      cscreen = (char *)nscreen;
      nx = 0;
      nxend = m6845_leftextra;
      while (nx < nxend)
      {
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
      }
    #endif
    video_address += (m6845_leftoffscreen<<1);
    if (video_address >= 0x8000)
    {
      video_address &= 0x7FFF;
      video_address += video_baseaddress;
    }
    /*draw displayed data*/
    #ifdef __RISCOS__
      mode0plot(nscreen+nx,video_displaywidth);
      nx += video_displaywidth;
    #else
      /*nxend = nx+(m6845_screenwidth<<2);*/
      nxend = nx+video_displaywidth;
      while (nx < nxend) /*80*/
      {
        video_n = memory[video_address];
        /*&01 &02*/
        video_n1 = videoula_palette[((video_n & 0x80)>>7)];
        video_n2 = videoula_palette[((video_n & 0x40)>>6)];
        cscreen[nx++] = (video_n2<<4) | video_n1;
        /*&04 &08*/
        video_n1 = videoula_palette[((video_n & 0x20)>>5)];
        video_n2 = videoula_palette[((video_n & 0x10)>>4)];
        cscreen[nx++] = (video_n2<<4) | video_n1;
        /*&10 &20*/
        video_n1 = videoula_palette[((video_n & 0x08)>>3)];
        video_n2 = videoula_palette[((video_n & 0x04)>>2)];
        cscreen[nx++] = (video_n2<<4) | video_n1;
        /*&40 &80*/
        video_n1 = videoula_palette[((video_n & 0x02)>>1)];
        video_n2 = videoula_palette[(video_n & 0x01)];
        cscreen[nx++] = (video_n2<<4) | video_n1;
        video_address += 8;
        if (video_address >= 0x8000)
        {
          video_address &= 0x7FFF;
          video_address += video_baseaddress;
        }
      }
    #endif
    video_address += (m6845_rightoffscreen<<1);
    if (video_address >= 0x8000)
    {
      video_address &= 0x7FFF;
      video_address += video_baseaddress;
    }
    /*draw trailing blank area on this line*/
    #ifdef __RISCOS__
      blankrow(nscreen+nx,m6845_rightextra,0x00);
    #else
      nxend = nx+m6845_rightextra;
      while (nx < nxend)
      {
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
      }
    #endif
  }
}

void videodrawline1(void)
{
  /*
   *mode 1 - 40x32, 320x256, 2 bpp, 20k
   */
  if (m6845_sc & 0x08)
  {
    /*blank lines > 8*/
    #ifdef __RISCOS__
      /*nx = (m6845_screenwidth<<2) + m6845_leftextra + m6845_rightextra;
      blankrow(nscreen,nx,0);*/
      blankrow(nscreen,local_linelengthfloor,0);
    #else
      cscreen = (char *)nscreen;
      nx = 0;
      nxend = (m6845_screenwidth<<2) + m6845_leftextra + m6845_rightextra;
      while (nx < nxend) /*80*/
      {
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
      }
    #endif
  }
  else
  {
    #ifdef __RISCOS__
      blankrow(nscreen,m6845_leftextra,0x00);
      nx = m6845_leftextra;
    #else
      cscreen = (char *)nscreen;
      nx = 0;
      nxend = m6845_leftextra;
      while (nx < nxend)
      {
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
      }
    #endif
    video_address += (m6845_leftoffscreen<<1);
    if (video_address >= 0x8000)
    {
      video_address &= 0x7FFF;
      video_address += video_baseaddress;
    }
    #ifdef __RISCOS__
      mode1plot(nscreen+nx,video_displaywidth);
      nx += video_displaywidth;
    #else
      /*nxend = nx+(m6845_screenwidth<<2);*/
      nxend = nx+video_displaywidth;
      while (nx < nxend)
      {
        video_n = memory[video_address];
        /*&02 &01*/
        video_n1 = ((video_n & 0x80)>>6) | ((video_n & 0x08)>>3);
        video_n2 = videoula_palette[video_n1];
        cscreen[nx++] = (video_n2<<4) | video_n2;
        /*&08 &04*/
        video_n1 = ((video_n & 0x40)>>5) | ((video_n & 0x04)>>2);
        video_n2 = videoula_palette[video_n1];
        cscreen[nx++] = (video_n2<<4) | video_n2;
        /*&20 &10*/
        video_n1 = ((video_n & 0x20)>>4) | ((video_n & 0x02)>>1);
        video_n2 = videoula_palette[video_n1];
        cscreen[nx++] = (video_n2<<4) | video_n2;
        /*&80 &40*/
        video_n1 = ((video_n & 0x10)>>3) | (video_n & 0x01);
        video_n2 = videoula_palette[video_n1];
        cscreen[nx++] = (video_n2<<4) | video_n2;
        video_address += 8;
        if (video_address >= 0x8000)
        {
          video_address &= 0x7FFF;
          video_address += video_baseaddress;
        }
      }
    #endif
    video_address += (m6845_rightoffscreen<<1);
    if (video_address >= 0x8000)
    {
      video_address &= 0x7FFF;
      video_address += video_baseaddress;
    }
    #ifdef __RISCOS__
      blankrow(nscreen+nx,m6845_rightextra,0x00);
    #else
      nxend = nx+m6845_rightextra;
      while (nx < nxend)
      {
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
      }
    #endif
  }
}

void videodrawline2(void)
{
  /*
   *mode 2 - 20x32, 160x256, 4 bpp, 40k
   */
  if (m6845_sc & 0x08)
  {
    /*blank lines > 8*/
    #ifdef __RISCOS__
      /*nx = (m6845_screenwidth<<2) + m6845_leftextra + m6845_rightextra;
      blankrow(nscreen,nx,0);*/
      blankrow(nscreen,local_linelengthfloor,0x00);
    #else
      cscreen = (char *)nscreen;
      nx = 0;
      nxend = (m6845_screenwidth<<2) + m6845_leftextra + m6845_rightextra;
      while (nx < nxend) /*80*/
      {
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
      }
    #endif
  }
  else
  {
    #ifdef __RISCOS__
      blankrow(nscreen,m6845_leftextra,0x00);
      nx = m6845_leftextra;
    #else
      cscreen = (char *)nscreen;
      nx = 0;
      nxend = m6845_leftextra;
      while (nx < nxend)
      {
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
      }
    #endif
    video_address += (m6845_leftoffscreen<<1);
    if (video_address >= 0x8000)
    {
      video_address &= 0x7FFF;
      video_address += video_baseaddress;
    }
    #ifdef __RISCOS__
      mode2plot(nscreen+nx,video_displaywidth);
      nx += video_displaywidth;
    #else
      /*nxend = nx+(m6845_screenwidth<<2);*/
      nxend = nx+video_displaywidth;
      while (nx < nxend)
      {
        video_n = memory[video_address];
        /*&08 &04 &02 &01*/
        video_n1 = ((video_n & 0x80)>>4) | ((video_n & 0x20)>>3) | ((video_n & 0x08)>>2) | ((video_n & 0x02)>>1);
        video_n2 = videoula_palette[video_n1];
        cscreen[nx++] = (video_n2<<4) | video_n2;
        cscreen[nx++] = (video_n2<<4) | video_n2;
        /*&08 &04 &02 &01*/
        video_n1 = ((video_n & 0x40)>>3) | ((video_n & 0x10)>>2) | ((video_n & 0x04)>>1) | (video_n & 0x01);
        video_n2 = videoula_palette[video_n1];
        cscreen[nx++] = (video_n2<<4) | video_n2;
        cscreen[nx++] = (video_n2<<4) | video_n2;
        video_address += 8;
        if (video_address >= 0x8000)
        {
          video_address &= 0x7FFF;
          video_address += video_baseaddress;
        }
      }
    #endif
    video_address += (m6845_rightoffscreen<<1);
    if (video_address >= 0x8000)
    {
      video_address &= 0x7FFF;
      video_address += video_baseaddress;
    }
    #ifdef __RISCOS__
      blankrow(nscreen+nx,m6845_rightextra,0x00);
    #else
      nxend = nx+m6845_rightextra;
      while (nx < nxend)
      {
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
      }
    #endif
  }
}

void videodrawline3(void)
{
  /*
   *mode 3 - 80x25, Text only, 1 bpp, 40k
   */
  if (m6845_sc & 0x08)
  {
    /*blank lines > 8*/
    #ifdef __RISCOS__
      /*nx = (m6845_screenwidth<<2) + m6845_leftextra + m6845_rightextra;
      blankrow(nscreen,nx,0);*/
      blankrow(nscreen,local_linelengthfloor,0);
    #else
      cscreen = (char *)nscreen;
      nx = 0;
      nxend = (m6845_screenwidth<<2) + m6845_leftextra + m6845_rightextra;
      while (nx < nxend) /*80*/
      {
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
      }
    #endif
  }
  else
  {
    #ifdef __RISCOS__
      blankrow(nscreen,m6845_leftextra,0x00);
      nx = m6845_leftextra;
    #else
      nx = 0;
      nxend = m6845_leftextra;
      while (nx < nxend)
      {
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
      }
    #endif
    video_address += (m6845_leftoffscreen<<1);
    if (video_address >= 0x8000)
    {
      video_address &= 0x7FFF;
      video_address += video_baseaddress;
    }
    #ifdef __RISCOS__
      /*screen code is the same as mode 0*/
      mode0plot(nscreen+nx,video_displaywidth);
      nx += video_displaywidth;
    #else
      /*nxend = nx+(m6845_screenwidth<<2);*/
      nxend = nx+video_displaywidth;
      while (nx < nxend)
      {
        video_n = memory[video_address];
        /*&01 &02*/
        video_n1 = videoula_palette[((video_n & 0x80)>>7)];
        video_n2 = videoula_palette[((video_n & 0x40)>>6)];
        cscreen[nx++] = (video_n2<<4) | video_n1;
        /*&04 &08*/
        video_n1 = videoula_palette[((video_n & 0x20)>>5)];
        video_n2 = videoula_palette[((video_n & 0x10)>>4)];
        cscreen[nx++] = (video_n2<<4) | video_n1;
        /*&10 &20*/
        video_n1 = videoula_palette[((video_n & 0x08)>>3)];
        video_n2 = videoula_palette[((video_n & 0x04)>>2)];
        cscreen[nx++] = (video_n2<<4) | video_n1;
        /*&40 &80*/
        video_n1 = videoula_palette[((video_n & 0x02)>>1)];
        video_n2 = videoula_palette[(video_n & 0x01)];
        cscreen[nx++] = (video_n2<<4) | video_n1;
        video_address += 8;
        if (video_address >= 0x8000)
        {
          video_address &= 0x7FFF;
          video_address += video_baseaddress;
        }
      }
    #endif
    video_address += (m6845_rightoffscreen<<1);
    if (video_address >= 0x8000)
    {
      video_address &= 0x7FFF;
      video_address += video_baseaddress;
    }
    #ifdef __RISCOS__
      blankrow(nscreen+nx,m6845_rightextra,0x00);
    #else
      nxend = nx+m6845_rightextra;
      while (nx < nxend)
      {
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
      }
    #endif
  }
}

void videodrawline4(void)
{
  /*
   *mode 4 - 40x32, 320x256, 1 bpp, 20k
   */
  if (m6845_sc & 0x08)
  {
    /*blank lines > 8*/
    #ifdef __RISCOS__
      /*nx = (m6845_screenwidth<<3) + m6845_leftextra + m6845_rightextra;
      blankrow(nscreen,nx,0);*/
      blankrow(nscreen,local_linelengthfloor,0);
    #else
      cscreen = (char *)nscreen;
      nx = 0;
      nxend = (m6845_screenwidth<<3) + m6845_leftextra + m6845_rightextra;
      while (nx < nxend) /*80*/
      {
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
      }
    #endif
  }
  else
  {
    #ifdef __RISCOS__
      blankrow(nscreen,m6845_leftextra,0x00);
      nx = m6845_leftextra;
    #else
      cscreen = (char *)nscreen;
      nx = 0;
      nxend = m6845_leftextra;
      while (nx < nxend)
      {
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
      }
    #endif
    video_address += m6845_leftoffscreen;
    if (video_address >= 0x8000)
    {
      video_address &= 0x7FFF;
      video_address += video_baseaddress;
    }
    #ifdef __RISCOS__
      mode4plot(nscreen+nx,video_displaywidth);
      nx += video_displaywidth;
    #else
      /*nxend = nx+(m6845_screenwidth<<3);*/
      nxend = nx+video_displaywidth;
      while (nx < nxend) /*80*/
      {
        video_n = memory[video_address];
        /*&01 &01*/
        video_n1 = videoula_palette[((video_n & 0x80)>>7)];
        cscreen[nx++] = (video_n1<<4) | video_n1;
        /*&02 &02*/
        video_n1 = videoula_palette[((video_n & 0x40)>>6)];
        cscreen[nx++] = (video_n1<<4) | video_n1;
        /*&04 &04*/
        video_n1 = videoula_palette[((video_n & 0x20)>>5)];
        cscreen[nx++] = (video_n1<<4) | video_n1;
        /*&08 &08*/
        video_n1 = videoula_palette[((video_n & 0x10)>>4)];
        cscreen[nx++] = (video_n1<<4) | video_n1;
        /*&10 &10*/
        video_n1 = videoula_palette[((video_n & 0x08)>>3)];
        cscreen[nx++] = (video_n1<<4) | video_n1;
        /*&20 &20*/
        video_n1 = videoula_palette[((video_n & 0x04)>>2)];
        cscreen[nx++] = (video_n1<<4) | video_n1;
        /*&40 &40*/
        video_n1 = videoula_palette[((video_n & 0x02)>>1)];
        cscreen[nx++] = (video_n1<<4) | video_n1;
        /*&80 &80*/
        video_n1 = videoula_palette[(video_n & 0x01)];
        cscreen[nx++] = (video_n1<<4) | video_n1;
        video_address += 8;
        if (video_address >= 0x8000)
        {
          video_address &= 0x7FFF;
          video_address += video_baseaddress;
        }
      }
    #endif
    video_address += m6845_rightoffscreen;
    if (video_address >= 0x8000)
    {
      video_address &= 0x7FFF;
      video_address += video_baseaddress;
    }
    #ifdef __RISCOS__
      blankrow(nscreen+nx,m6845_rightextra,0x00);
    #else
      nxend = nx+m6845_rightextra;
      while (nx < nxend)
      {
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
      }
    #endif
  }
}

void videodrawline5(void)
{
  /*
   *mode 5 - 20x32, 160x256, 2 bpp, 20k
   */
  if (m6845_sc & 0x08)
  {
    /*blank lines > 8*/
    #ifdef __RISCOS__
      /*nx = (m6845_screenwidth<<3) + m6845_leftextra + m6845_rightextra;
      blankrow(nscreen,nx,0);*/
      blankrow(nscreen,local_linelengthfloor,0);
    #else
      cscreen = (char *)nscreen;
      nx = 0;
      nxend = (m6845_screenwidth<<3) + m6845_leftextra + m6845_rightextra;
      while (nx < nxend) /*80*/
      {
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
      }
    #endif
  }
  else
  {
    #ifdef __RISCOS__
      blankrow(nscreen,m6845_leftextra,0x00);
      nx = m6845_leftextra;
    #else
      cscreen = (char *)nscreen;
      nx = 0;
      nxend = m6845_leftextra;
      while (nx < nxend)
      {
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
      }
    #endif
    video_address += m6845_leftoffscreen;
    if (video_address >= 0x8000)
    {
      video_address &= 0x7FFF;
      video_address += video_baseaddress;
    }
    #ifdef __RISCOS__
      mode5plot(nscreen+nx,video_displaywidth);
      nx += video_displaywidth;
    #else
      /*nxend = nx+(m6845_screenwidth<<3);*/
      nxend = nx+video_displaywidth;
      while (nx < nxend)
      {
        video_n = memory[video_address];
        /*&02 &01*/
        video_n1 = ((video_n & 0x80)>>6) | ((video_n & 0x08)>>3);
        video_n2 = videoula_palette[video_n1];
        cscreen[nx++] = (video_n2<<4) | video_n2;
        cscreen[nx++] = (video_n2<<4) | video_n2;
        /*&08 &04*/
        video_n1 = ((video_n & 0x40)>>5) | ((video_n & 0x04)>>2);
        video_n2 = videoula_palette[video_n1];
        cscreen[nx++] = (video_n2<<4) | video_n2;
        cscreen[nx++] = (video_n2<<4) | video_n2;
        /*&20 &10*/
        video_n1 = ((video_n & 0x20)>>4) | ((video_n & 0x02)>>1);
        video_n2 = videoula_palette[video_n1];
        cscreen[nx++] = (video_n2<<4) | video_n2;
        cscreen[nx++] = (video_n2<<4) | video_n2;
        /*&80 &40*/
        video_n1 = ((video_n & 0x10)>>3) | (video_n & 0x01);
        video_n2 = videoula_palette[video_n1];
        cscreen[nx++] = (video_n2<<4) | video_n2;
        cscreen[nx++] = (video_n2<<4) | video_n2;
        video_address += 8;
        if (video_address >= 0x8000)
        {
          video_address &= 0x7FFF;
          video_address += video_baseaddress;
        }
      }
    #endif
    video_address += m6845_rightoffscreen;
    if (video_address >= 0x8000)
    {
      video_address &= 0x7FFF;
      video_address += video_baseaddress;
    }
    #ifdef __RISCOS__
      blankrow(nscreen+nx,m6845_rightextra,0x00);
    #else
      nxend = nx+m6845_rightextra;
      while (nx < nxend)
      {
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
      }
    #endif
  }
}

void videodrawline6(void)
{
  /*
   *mode 6 - 40x25, Text only, 1 bpp, 20k
   */
  if (m6845_sc & 0x08)
  {
    /*blank lines > 8*/
    #ifdef __RISCOS__
      /*nx = (m6845_screenwidth<<3) + m6845_leftextra + m6845_rightextra;
      blankrow(nscreen,nx,0);*/
      blankrow(nscreen,local_linelengthfloor,0);
    #else
      cscreen = (char *)nscreen;
      nx = 0;
      nxend = (m6845_screenwidth<<3) + m6845_leftextra + m6845_rightextra;
      while (nx < nxend) /*80*/
      {
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
      }
    #endif
  }
  else
  {
    #ifdef __RISCOS__
      blankrow(nscreen,m6845_leftextra,0x00);
      nx = m6845_leftextra;
    #else
      nx = 0;
      nxend = m6845_leftextra;
      while (nx < nxend)
      {
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
      }
    #endif
    video_address += m6845_leftoffscreen;
    if (video_address >= 0x8000)
    {
      video_address &= 0x7FFF;
      video_address += video_baseaddress;
    }
    #ifdef __RISCOS__
      /*screen code is the same as mode 4*/
      mode4plot(nscreen+nx,video_displaywidth);
      nx += video_displaywidth;
    #else
      /*nxend = nx+(m6845_screenwidth<<3);*/
      nxend = nx+video_displaywidth;
      while (nx < nxend)
      {
        video_n = memory[video_address];
        /*&01 &01*/
        video_n1 = videoula_palette[((video_n & 0x80)>>7)];
        cscreen[nx++] = (video_n1<<4) | video_n1;
        /*&02 &02*/
        video_n1 = videoula_palette[((video_n & 0x40)>>6)];
        cscreen[nx++] = (video_n1<<4) | video_n1;
        /*&04 &04*/
        video_n1 = videoula_palette[((video_n & 0x20)>>5)];
        cscreen[nx++] = (video_n1<<4) | video_n1;
        /*&08 &08*/
        video_n1 = videoula_palette[((video_n & 0x10)>>4)];
        cscreen[nx++] = (video_n1<<4) | video_n1;
        /*&10 &10*/
        video_n1 = videoula_palette[((video_n & 0x08)>>3)];
        cscreen[nx++] = (video_n1<<4) | video_n1;
        /*&20 &20*/
        video_n1 = videoula_palette[((video_n & 0x04)>>2)];
        cscreen[nx++] = (video_n1<<4) | video_n1;
        /*&40 &40*/
        video_n1 = videoula_palette[((video_n & 0x02)>>1)];
        cscreen[nx++] = (video_n1<<4) | video_n1;
        /*&80 &80*/
        video_n1 = videoula_palette[(video_n & 0x01)];
        cscreen[nx++] = (video_n1<<4) | video_n1;
        video_address += 8;
        if (video_address >= 0x8000)
        {
          video_address &= 0x7FFF;
          video_address += video_baseaddress;
        }
      }
    #endif
    video_address += m6845_rightoffscreen;
    if (video_address >= 0x8000)
    {
      video_address &= 0x7FFF;
      video_address += video_baseaddress;
    }
    #ifdef __RISCOS__
      blankrow(nscreen+nx,m6845_rightextra,0x00);
    #else
      nxend = nx+m6845_rightextra;
      while (nx < nxend)
      {
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
      }
    #endif
  }
}

void videodrawline8(void)
{
  /*
   *mode 8 - 10x32, 80x256, 4 bpp, 20k
   */
  if (m6845_sc & 0x08)
  {
    /*blank lines > 8*/
    #ifdef __RISCOS__
      /*nx = (m6845_screenwidth<<2) + m6845_leftextra + m6845_rightextra;
      blankrow(nscreen,nx,0);*/
      blankrow(nscreen,local_linelengthfloor,0);
    #else
      cscreen = (char *)nscreen;
      nx = 0;
      nxend = (m6845_screenwidth<<2) + m6845_leftextra + m6845_rightextra;
      while (nx < nxend) /*80*/
      {
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
      }
    #endif
  }
  else
  {
    #ifdef __RISCOS__
      blankrow(nscreen,m6845_leftextra,0x00);
      nx = m6845_leftextra;
    #else
      cscreen = (char *)nscreen;
      nx = 0;
      nxend = m6845_leftextra;
      while (nx < nxend)
      {
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
      }
    #endif
    video_address += (m6845_leftoffscreen<<1);
    if (video_address >= 0x8000)
    {
      video_address &= 0x7FFF;
      video_address += video_baseaddress;
    }
    #ifdef __RISCOS__
      mode8plot(nscreen+nx,video_displaywidth);
      nx += video_displaywidth;
    #else
      /*nxend = nx+(m6845_screenwidth<<2);*/
      nxend = nx+video_displaywidth;
      while (nx < nxend)
      {
        video_n = memory[video_address];
        /*&08 &04 &02 &01*/
        video_n1 = ((video_n & 0x80)>>4) | ((video_n & 0x20)>>3) | ((video_n & 0x08)>>2) | ((video_n & 0x02)>>1);
        video_n2 = videoula_palette[video_n1];
        cscreen[nx++] = (video_n2<<4) | video_n2;
        cscreen[nx++] = (video_n2<<4) | video_n2;
        /*&08 &04 &02 &01*/
        video_n1 = ((video_n & 0x40)>>3) | ((video_n & 0x10)>>2) | ((video_n & 0x04)>>1) | (video_n & 0x01);
        video_n2 = videoula_palette[video_n1];
        cscreen[nx++] = (video_n2<<4) | video_n2;
        cscreen[nx++] = (video_n2<<4) | video_n2;
        video_address += 8;
        if (video_address >= 0x8000)
        {
          video_address &= 0x7FFF;
          video_address += video_baseaddress;
        }
      }
    #endif
    video_address += (m6845_rightoffscreen<<1);
    if (video_address >= 0x8000)
    {
      video_address &= 0x7FFF;
      video_address += video_baseaddress;
    }
    #ifdef __RISCOS__
      blankrow(nscreen+nx,m6845_rightextra,0x00);
    #else
      nxend = nx+m6845_rightextra;
      while (nx < nxend)
      {
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
        cscreen[nx++] = 0;
      }
    #endif
  }
}

void videoteletextrelay(void)
{
  /*
   *mode 7 - 40x25, 640x256, 4 bpp, 1k (TELETEXT)
   */
  ny = m6845_vc; /*video_currentrow>>3;*/ /* divide by 8*/
  nx = 0;
  video_address = video_startaddress+(ny*m6845_screenwidth);
  if (video_address >= 0x7FFF)
    video_address -= 0x400;
  bbcvdu(31);
  bbcvdu(nx);
  bbcvdu(ny);
  nx = teletext_screenwidth;

  /*bbcvdu(77);
  inttohex4(beebit_machinetype);
  bbcvdu(32);
  inttohex4(nx);
  bbcvdu(32);
  inttohex4(ny);
  bbcvdu(32);*/

  /*if (m6845_screenwidth > 40)
    nxend = 40;
  else
    nxend = m6845_screenwidth;*/
  /*while (nx < m6845_screenwidth)*/
  switch (beebit_machinetype)
  {
    case MACHINE_MODELB:
      while (nx > 0)
      {
        bbcvdu(memory[video_address] | 0x80);

      /*bbcvdu(86);
      inttohex4(memory[video_address] | 0x80);*/

        if (video_address >= 0x7FFF)
          video_address = 0x7C00;
        else
          video_address++;
        /*nx++;*/
        nx--;
      }
      break;
    case MACHINE_MODELBPLUS:
      if (beebit_acccon & 0x80)
      {
        while (nx > 0)
        {
          bbcvdu(shadow[video_address] | 0x80);
          if (video_address >= 0x7FFF)
            video_address = 0x7C00;
          else
            video_address++;
          /*nx++;*/
          nx--;
        }
      }
      else
      {
        while (nx > 0)
        {
          bbcvdu(memory[video_address] | 0x80);
          if (video_address >= 0x7FFF)
            video_address = 0x7C00;
          else
            video_address++;
          /*nx++;*/
          nx--;
        }
      }
      break;
    case MACHINE_MASTER128:
    case MACHINE_COMPACT:
      if (beebit_acccon & 0x01)
      {
        /*LYNNE (D)*/
        while (nx > 0)
        {
          bbcvdu(shadow[video_address] | 0x80);
          if (video_address >= 0x7FFF)
            video_address = 0x7C00;
          else
            video_address++;
          /*nx++;*/
          nx--;
        }
      }
      else
      {
        while (nx > 0)
        {
          bbcvdu(memory[video_address] | 0x80);
          if (video_address >= 0x7FFF)
            video_address = 0x7C00;
          else
            video_address++;
          /*nx++;*/
          nx--;
        }
      }
      break;
  }

  /*if (beebit_cursor AND cursor_show)
  {
    if (video_currentrow > cursor_y0 AND !lcursordone)
    {
      nscreen = nhostscreen+(cursor_y0*320)+cursor_x;
      #ifdef __RISCOS__
        blankrow(nscreen,4,0x77777777);
      #else
        cscreen = (char *)nscreen;
        cscreen[0] = 0x77;
        cscreen[1] = 0x77;
        cscreen[2] = 0x77;
        cscreen[3] = 0x77;
      #endif
      lcursordone=TRUE;
    }
  }*/
  /*end of display*/
  /*video_displayrow += 8;*/

   /*draw cursor*/
  if (beebit_cursor AND cursor_show AND cursor_on)
  {
    if (m6845_vc == cursor_y0)
    {
      nscreen = nhostscreen+(m6845_vc * 0x640) + 0x5A0;
      nscreen += (cursor_x << 2);
      #ifdef __RISCOS__
        blankrow(nscreen,cursor_width,cursor_bitmap);
      #else
        cscreen = (char *)nscreen;
        cscreen[0] = 0x77;
        cscreen[1] = 0x77;
        cscreen[2] = 0x77;
        cscreen[3] = 0x77;
        cscreen[4] = 0x77;
        cscreen[5] = 0x77;
        cscreen[6] = 0x77;
        cscreen[7] = 0x77;
      #endif
    }
  }
}

void teletext4blankchar1(int address)
{
  char *cscreen;

  cscreen = (char *)address;
  setword(cscreen,teletext_backcolourmask);
  cscreen = (char *)address+4;
  setword(cscreen,teletext_backcolourmask);
}

void teletext8blankchar1(int address)
{
  char *cscreen;

  cscreen = (char *)address;
  setword(cscreen,teletext_backcolourmask);
  cscreen = (char *)address+4;
  setword(cscreen,teletext_backcolourmask);
  cscreen = (char *)address+8;
  setword(cscreen,teletext_backcolourmask);
  cscreen = (char *)address+12;
  setword(cscreen,teletext_backcolourmask);
}

void teletextblankchar(void)
{
  int address;
  int i;

  address = nscreen;

  if ((local_teletextform & 2) == 0)
  {
    for (i = 10 * (local_teletextform >> 2); i > 0; i--)
    {
      teletext4blankchar1(address);
      address = address + nlocalscreenlinelength;
    }
  }
  else
  {
    for (i = 10 * (local_teletextform >> 2); i > 0; i--)
    {
      teletext8blankchar1(address);
      address = address + nlocalscreenlinelength;
    }
  }
}

/*single width, single height*/
void teletext4alphanormal1(int address, int pointer, int row)
{
  unsigned int data,data0,data1;
  char *cscreen;

  cscreen = (char *)pointer + (row << 3);
  data0 = getword(cscreen);
  data1 = (data0 ^ 0xFFFFFFFF) & teletext_backcolourmask;
  data = (data0 & teletext_alphacolourmask | data1);
  cscreen = (char *)address;
  setword(cscreen,data);

  cscreen = (char *)pointer + ((row << 3) + 4);
  data0 = getword(cscreen);
  data1 = (data0 ^ 0xFFFFFFFF) & teletext_backcolourmask;
  data = (data0 & teletext_alphacolourmask | data1);
  cscreen = (char *)address+4;
  setword(cscreen,data);
}

/*single width, single height*/
void teletext8alphanormal1(int address, int pointer, int row)
{
  unsigned int data,data0,data1,data2;
  char *cscreen;

  cscreen = (char *)pointer + (row << 3);
  data0 = getword(cscreen);
  data1 = (data0 ^ 0xFFFFFFFF) & teletext_backcolourmask;
  data = (data0 & teletext_alphacolourmask | data1);

  data1 = (data & 0xFF00);
  data0 = (data & 0x00FF);
  cscreen = (char *)address;
  data2 = (data1 << 8) | (data1 << 16) | data0 | (data0 << 8);
  setword(cscreen,data2);
  data1 = (data & 0xFF000000);
  data0 = (data & 0x00FF0000);
  cscreen = (char *)address+4;
  data2 = data1 | (data1 >> 8) | (data0 >> 16) | (data0 >> 8);
  setword(cscreen,data2);

  cscreen = (char *)pointer + ((row << 3) + 4);
  data0 = getword(cscreen);
  data1 = (data0 ^ 0xFFFFFFFF) & teletext_backcolourmask;
  data = (data0 & teletext_alphacolourmask | data1);
  data1 = (data & 0xFF00);
  data0 = (data & 0x00FF);
  cscreen = (char *)address+8;
  data2 = (data1 << 8) | (data1 << 16) | data0 | (data0 << 8);
  setword(cscreen,data2);
  data1 = (data & 0xFF000000);
  data0 = (data & 0x00FF0000);
  cscreen = (char *)address+12;
  data2 = data1 | (data1 >> 8) | (data0 >> 16) | (data0 >> 8);
  setword(cscreen,data2);
}
/*single width, single height*/
void teletext8alpharounded1(int address, int pointer, int row)
{
  unsigned int data,data0,data1,data2;
  char *cscreen;

  cscreen = (char *)pointer + (row << 3);
  data0 = getword(cscreen);
  data1 = (data0 & 0xF0000000) | ((data0>>4) & 0xF00000) | ((data0>>8) & 0xF000) | ((data0>>12) & 0xF0);
  data0 = ((data0<<12) & 0xF000000) | ((data0<<8) & 0xF0000) | ((data0<<4) & 0xF00) | (data0 & 0xF);
  data1 = data1 | (data1>>4);
  data0 = (data0<<4) | data0;

  cscreen = (char *)address;
  data = (data0 ^ 0xFFFFFFFF) & teletext_backcolourmask;
  data2 = (data0 & teletext_alphacolourmask | data);
  setword(cscreen,data2);
  cscreen = (char *)address+4;
  data = (data1 ^ 0xFFFFFFFF) & teletext_backcolourmask;
  data2 = (data1 & teletext_alphacolourmask | data);
  setword(cscreen,data2);

  cscreen = (char *)pointer + ((row << 3) + 4);
  data0 = getword(cscreen);
  data1 = (data0 & 0xF0000000) | ((data0>>4) & 0xF00000) | ((data0>>8) & 0xF000) | ((data0>>12) & 0xF0);
  data0 = ((data0<<12) & 0xF000000) | ((data0<<8) & 0xF0000) | ((data0<<4) & 0xF00) | (data0 & 0xF);
  data1 = data1 | (data1>>4);
  data0 = (data0<<4) | data0;

  cscreen = (char *)address+8;
  data = (data0 ^ 0xFFFFFFFF) & teletext_backcolourmask;
  data2 = (data0 & teletext_alphacolourmask | data);
  setword(cscreen,data2);
  cscreen = (char *)address+12;
  data = (data1 ^ 0xFFFFFFFF) & teletext_backcolourmask;
  data2 = (data1 & teletext_alphacolourmask | data);
  setword(cscreen,data2);
}

void teletextalphanormal(void)
{
  int row;
  int pointer, address;

  pointer = (int)teletext_alpha.normal + (((teletext_character | 0x80) - 0x20) * 80);
  address = nscreen;

  switch (local_teletextform >> 1)
  {
    case 2:
      for (row = 0; row <= 9; row++)
      {
        /*10 lines of 8 pixels*/
        teletext4alphanormal1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      break;
    case 3:
      for (row = 0; row <= 9; row++)
      {
        /*10 lines of 8 pixels*/
        teletext8alphanormal1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      break;
    case 4:
      for (row = 0; row <= 9; row++)
      {
        /*20 lines of 8 pixels*/
        teletext4alphanormal1(address, pointer - sizeof(teletext_alpha.field0), row);
        address = address + nlocalscreenlinelength;
        teletext4alphanormal1(address, pointer + sizeof(teletext_alpha.normal), row);
        address = address + nlocalscreenlinelength;
      }
      break;
    case 5:
      for (row = 0; row <= 9; row++)
      {
        /*20 lines of 8 pixels*/
        teletext8alpharounded1(address, pointer - sizeof(teletext_alpha.field0), row);
        address = address + nlocalscreenlinelength;
        teletext8alpharounded1(address, pointer + sizeof(teletext_alpha.normal), row);
        address = address + nlocalscreenlinelength;
      }
      break;
    case 6:
      for (row = 0; row <= 9; row++)
      {
        /*30 lines of 8 pixels*/
        teletext4alphanormal1(address, pointer - sizeof(teletext_alpha.field0), row);
        address = address + nlocalscreenlinelength;
        teletext4alphanormal1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext4alphanormal1(address, pointer + sizeof(teletext_alpha.normal), row);
        address = address + nlocalscreenlinelength;
      }
      break;
    case 7:
      for (row = 0; row <= 9; row++)
      {
        /*30 lines of 8 pixels*/
        teletext8alpharounded1(address, pointer - sizeof(teletext_alpha.field0), row);
        address = address + nlocalscreenlinelength;
        teletext8alphanormal1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext8alpharounded1(address, pointer + sizeof(teletext_alpha.normal), row);
        address = address + nlocalscreenlinelength;
      }
      break;
  }
}

void teletextalphadoubletop(void)
{
  int row;
  int pointer, address;

  pointer = (int)teletext_alpha.normal + (((teletext_character | 0x80) - 0x20) * 80);
  address = nscreen;

  switch (local_teletextform >> 1)
  {
    case 2:
      for (row = 0; row <= 4; row++)
      {
        /*10 lines of 8 pixels*/
        teletext4alphanormal1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext4alphanormal1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      break;
    case 3:
      for (row = 0; row <= 4; row++)
      {
        /*10 lines of 8 pixels*/
        teletext8alphanormal1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext8alphanormal1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      break;
    case 4:
      for (row = 0; row <= 4; row++)
      {
        /*20 lines of 8 pixels*/
        teletext4alphanormal1(address, pointer - sizeof(teletext_alpha.field0), row);
        address = address + nlocalscreenlinelength;
        teletext4alphanormal1(address, pointer - sizeof(teletext_alpha.field0), row);
        address = address + nlocalscreenlinelength;
        teletext4alphanormal1(address, pointer + sizeof(teletext_alpha.normal), row);
        address = address + nlocalscreenlinelength;
        teletext4alphanormal1(address, pointer + sizeof(teletext_alpha.normal), row);
        address = address + nlocalscreenlinelength;
      }
      break;
    case 5:
      for (row = 0; row <= 4; row++)
      {
        /*20 lines of 8 pixels*/
        teletext8alpharounded1(address, pointer - sizeof(teletext_alpha.field0), row);
        address = address + nlocalscreenlinelength;
        teletext8alpharounded1(address, pointer - sizeof(teletext_alpha.field0), row);
        address = address + nlocalscreenlinelength;
        teletext8alpharounded1(address, pointer + sizeof(teletext_alpha.normal), row);
        address = address + nlocalscreenlinelength;
        teletext8alpharounded1(address, pointer + sizeof(teletext_alpha.normal), row);
        address = address + nlocalscreenlinelength;
      }
      break;
    case 6:
      for (row = 0; row <= 4; row++)
      {
        /*30 lines of 8 pixels*/
        teletext4alphanormal1(address, pointer - sizeof(teletext_alpha.field0), row);
        address = address + nlocalscreenlinelength;
        teletext4alphanormal1(address, pointer - sizeof(teletext_alpha.field0), row);
        address = address + nlocalscreenlinelength;
        teletext4alphanormal1(address, pointer - sizeof(teletext_alpha.field0), row);
        address = address + nlocalscreenlinelength;
        teletext4alphanormal1(address, pointer + sizeof(teletext_alpha.normal), row);
        address = address + nlocalscreenlinelength;
        teletext4alphanormal1(address, pointer + sizeof(teletext_alpha.normal), row);
        address = address + nlocalscreenlinelength;
        teletext4alphanormal1(address, pointer + sizeof(teletext_alpha.normal), row);
        address = address + nlocalscreenlinelength;
      }
      break;
    case 7:
      for (row = 0; row <= 4; row++)
      {
        /*30 lines of 8 pixels*/
        teletext8alpharounded1(address, pointer - sizeof(teletext_alpha.field0), row);
        address = address + nlocalscreenlinelength;
        teletext8alpharounded1(address, pointer - sizeof(teletext_alpha.field0), row);
        address = address + nlocalscreenlinelength;
        teletext8alpharounded1(address, pointer - sizeof(teletext_alpha.field0), row);
        address = address + nlocalscreenlinelength;
        teletext8alpharounded1(address, pointer + sizeof(teletext_alpha.normal), row);
        address = address + nlocalscreenlinelength;
        teletext8alpharounded1(address, pointer + sizeof(teletext_alpha.normal), row);
        address = address + nlocalscreenlinelength;
        teletext8alpharounded1(address, pointer + sizeof(teletext_alpha.normal), row);
        address = address + nlocalscreenlinelength;
      }
      break;
  }
}

void teletextalphadoublebottom(void)
{
  int row;
  int pointer, address;

  pointer = (int)teletext_alpha.normal + (((teletext_character | 0x80) - 0x20) * 80 + 40);
  address = nscreen;

  switch (local_teletextform >> 1)
  {
    case 2:
      for (row = 0; row <= 4; row++)
      {
        /*10 lines of 8 pixels*/
        teletext4alphanormal1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext4alphanormal1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      break;
    case 3:
      for (row = 0; row <= 4; row++)
      {
        /*10 lines of 8 pixels*/
        teletext8alphanormal1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext8alphanormal1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      break;
    case 4:
      for (row = 0; row <= 4; row++)
      {
        /*20 lines of 8 pixels*/
        teletext4alphanormal1(address, pointer - sizeof(teletext_alpha.field0), row);
        address = address + nlocalscreenlinelength;
        teletext4alphanormal1(address, pointer - sizeof(teletext_alpha.field0), row);
        address = address + nlocalscreenlinelength;
        teletext4alphanormal1(address, pointer + sizeof(teletext_alpha.normal), row);
        address = address + nlocalscreenlinelength;
        teletext4alphanormal1(address, pointer + sizeof(teletext_alpha.normal), row);
        address = address + nlocalscreenlinelength;
      }
      break;
    case 5:
      for (row = 0; row <= 4; row++)
      {
        /*20 lines of 8 pixels*/
        teletext8alpharounded1(address, pointer - sizeof(teletext_alpha.field0), row);
        address = address + nlocalscreenlinelength;
        teletext8alpharounded1(address, pointer - sizeof(teletext_alpha.field0), row);
        address = address + nlocalscreenlinelength;
        teletext8alpharounded1(address, pointer + sizeof(teletext_alpha.normal), row);
        address = address + nlocalscreenlinelength;
        teletext8alpharounded1(address, pointer + sizeof(teletext_alpha.normal), row);
        address = address + nlocalscreenlinelength;
      }
      break;
    case 6:
      for (row = 0; row <= 4; row++)
      {
        /*30 lines of 8 pixels*/
        teletext4alphanormal1(address, pointer - sizeof(teletext_alpha.field0), row);
        address = address + nlocalscreenlinelength;
        teletext4alphanormal1(address, pointer - sizeof(teletext_alpha.field0), row);
        address = address + nlocalscreenlinelength;
        teletext4alphanormal1(address, pointer - sizeof(teletext_alpha.field0), row);
        address = address + nlocalscreenlinelength;
        teletext4alphanormal1(address, pointer + sizeof(teletext_alpha.normal), row);
        address = address + nlocalscreenlinelength;
        teletext4alphanormal1(address, pointer + sizeof(teletext_alpha.normal), row);
        address = address + nlocalscreenlinelength;
        teletext4alphanormal1(address, pointer + sizeof(teletext_alpha.normal), row);
        address = address + nlocalscreenlinelength;
      }
      break;
    case 7:
      for (row = 0; row <= 4; row++)
      {
        /*30 lines of 8 pixels*/
        teletext8alpharounded1(address, pointer - sizeof(teletext_alpha.field0), row);
        address = address + nlocalscreenlinelength;
        teletext8alpharounded1(address, pointer - sizeof(teletext_alpha.field0), row);
        address = address + nlocalscreenlinelength;
        teletext8alpharounded1(address, pointer - sizeof(teletext_alpha.field0), row);
        address = address + nlocalscreenlinelength;
        teletext8alpharounded1(address, pointer + sizeof(teletext_alpha.normal), row);
        address = address + nlocalscreenlinelength;
        teletext8alpharounded1(address, pointer + sizeof(teletext_alpha.normal), row);
        address = address + nlocalscreenlinelength;
        teletext8alpharounded1(address, pointer + sizeof(teletext_alpha.normal), row);
        address = address + nlocalscreenlinelength;
      }
      break;
  }
}

void teletext4graphicscontiguous1(int address, int pointer, int row)
{
  unsigned int data,data0,data1;
  char *cscreen;

  cscreen = (char *)pointer + (row << 3);
  data0 = getword(cscreen);
  data1 = (data0 ^ 0xFFFFFFFF) & teletext_backcolourmask;
  data = (data0 & teletext_graphiccolourmask | data1);
  cscreen = (char *)address;
  setword(cscreen,data);

  cscreen = (char *)pointer + (row << 3) + 4;
  data0 = getword(cscreen);
  data1 = (data0 ^ 0xFFFFFFFF) & teletext_backcolourmask;
  data = (data0 & teletext_graphiccolourmask | data1);
  cscreen = (char *)address+4;
  setword(cscreen,data);
}

void teletext8graphicscontiguous1(int address, int pointer, int row)
{
  unsigned int data,data0,data1;
  char *cscreen;

  cscreen = (char *)pointer + (row << 3);
  data0 = getword(cscreen);
  data1 = (data0 ^ 0xFFFFFFFF) & teletext_backcolourmask;
  data = (data0 & teletext_graphiccolourmask | data1);
  cscreen = (char *)address;
  setword(cscreen,data);
  cscreen = (char *)address+4;
  setword(cscreen,data);

  cscreen = (char *)pointer + (row << 3) + 4;
  data0 = getword(cscreen);
  data1 = (data0 ^ 0xFFFFFFFF) & teletext_backcolourmask;
  data = (data0 & teletext_graphiccolourmask | data1);
  cscreen = (char *)address+8;
  setword(cscreen,data);
  cscreen = (char *)address+12;
  setword(cscreen,data);
}

void teletextgraphicscontiguous(void)
{
  int row;
  int pointer, address;

  pointer = (int)teletext_graphics + (((teletext_character | 0x80) - 0x20) * 80);
  address = nscreen;

  switch (local_teletextform >> 1)
  {
    case 2:
      for (row = 0; row <= 9; row++)
      {
        /*10 lines of 8 pixels*/
        teletext4graphicscontiguous1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      break;
    case 3:
      for (row = 0; row <= 9; row++)
      {
        /*10 lines of 8 pixels*/
        teletext8graphicscontiguous1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      break;
    case 4:
      for (row = 0; row <= 9; row++)
      {
        /*20 lines of 8 pixels*/
        teletext4graphicscontiguous1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext4graphicscontiguous1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      break;
    case 5:
      for (row = 0; row <= 9; row++)
      {
        /*20 lines of 8 pixels*/
        teletext8graphicscontiguous1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext8graphicscontiguous1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      break;
    case 6:
      for (row = 0; row <= 9; row++)
      {
        /*30 lines of 8 pixels*/
        teletext4graphicscontiguous1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext4graphicscontiguous1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext4graphicscontiguous1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      break;
    case 7:
      for (row = 0; row <= 9; row++)
      {
        /*30 lines of 8 pixels*/
        teletext8graphicscontiguous1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext8graphicscontiguous1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext8graphicscontiguous1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      break;
  }
}

void teletext4graphics6separated1(int address, int pointer, int row)
{
  unsigned int data,data0,data1;
  char *cscreen;

  cscreen = (char *)pointer + (row << 3);

  /*0xFFFF0000 is used to blank out one inset quarter of the block*/
  data0 = getword(cscreen) & 0xFFFF0000;
  data1 = (data0 ^ 0xFFFFFFFF) & teletext_backcolourmask;
  data = (data0 & teletext_graphiccolourmask | data1);
  cscreen = (char *)address;
  setword(cscreen,data);

  cscreen = (char *)pointer + (row << 3) + 4;

  data0 = getword(cscreen) & 0x00FFFF00;
  data1 = (data0 ^ 0xFFFFFFFF) & teletext_backcolourmask;
  data = (data0 & teletext_graphiccolourmask | data1);
  cscreen = (char *)address+4;
  setword(cscreen,data);
}

void teletext8graphics6separated1(int address, int pointer, int row)
{
  unsigned int data,data0,data1;
  char *cscreen;

  cscreen = (char *)pointer + (row << 3);

  data0 = getword(cscreen);
  data1 = (data0 ^ 0xFFFFFFFF) & teletext_backcolourmask;
  data = (data0 & teletext_graphiccolourmask | data1);

  cscreen = (char *)address;
  /*Nothing in first block after blanking the inset half*/
  setword(cscreen,teletext_backcolourmask);
  cscreen = (char *)address+4;
  setword(cscreen,data);

  cscreen = (char *)pointer + (row << 3) + 4;

  data0 = getword(cscreen);
  data1 = (data0 ^ 0xFFFFFFFF) & teletext_backcolourmask;
  data = (data0 & teletext_graphiccolourmask | data1);

  cscreen = (char *)address+8;
  setword(cscreen,((data & 0xFFFF0000) | (teletext_backcolourmask & 0x0000FFFF)));
  cscreen = (char *)address+12;
  setword(cscreen,((data & 0x0000FFFF) | (teletext_backcolourmask & 0xFFFF0000)));
}

void teletext4graphics8separated1(int address, int pointer, int row)
{
  unsigned int data,data0,data1;
  char *cscreen;

  cscreen = (char *)pointer + (row << 3);

  /*0xFFFFFF00 is used to blank out one quarter of the block*/
  data0 = getword(cscreen) & 0xFFFFFF00;
  data1 = (data0 ^ 0xFFFFFFFF) & teletext_backcolourmask;
  data = (data0 & teletext_graphiccolourmask | data1);
  cscreen = (char *)address;
  setword(cscreen,data);

  cscreen = (char *)pointer + (row << 3) + 4;

  data0 = getword(cscreen) & 0xFFFFFF00;
  data1 = (data0 ^ 0xFFFFFFFF) & teletext_backcolourmask;
  data = (data0 & teletext_graphiccolourmask | data1);
  cscreen = (char *)address+4;
  setword(cscreen,data);
}

void teletext8graphics8separated1(int address, int pointer, int row)
{
  unsigned int data,data0,data1;
  char *cscreen;

  cscreen = (char *)pointer + (row << 3);
  /*data = getword(cscreen);*/
  /*data = (data ^ 0xFFFFFFFF) & teletext_backcolourmask;*/
  /*data = (data & teletext_graphiccolourmask);*/

  data0 = getword(cscreen);
  data1 = (data0 ^ 0xFFFFFFFF) & teletext_backcolourmask;
  data = (data0 & teletext_graphiccolourmask | data1);

  cscreen = (char *)address;
  /*0xFFFF0000 is used to blank out half of the first block*/
  /*setword(cscreen,(data & 0xFFFF0000));*/
  setword(cscreen,((data & 0xFFFF0000) | (teletext_backcolourmask & 0x0000FFFF)));
  /*setword(cscreen,(data & 0xFFFF0000));*/
  cscreen = (char *)address+4;
  setword(cscreen,data);

  cscreen = (char *)pointer + (row << 3) + 4;
  /*data = getword(cscreen);*/
  /*data = (data ^ 0xFFFFFFFF) & teletext_backcolourmask;*/
  /*data = (data & teletext_graphiccolourmask);*/

  data0 = getword(cscreen);
  data1 = (data0 ^ 0xFFFFFFFF) & teletext_backcolourmask;
  data = (data0 & teletext_graphiccolourmask | data1);

  cscreen = (char *)address+8;
  setword(cscreen,((data & 0xFFFF0000) | (teletext_backcolourmask & 0x0000FFFF)));
  /*setword(cscreen,(data & 0xFFFF0000));*/
  cscreen = (char *)address+12;
  setword(cscreen,data);
}

void teletextgraphicsseparated(void)
{
  unsigned int row;
  unsigned int pointer, address;
  char *cscreen;

  pointer = (int)teletext_graphics + (((teletext_character | 0x80) - 0x20) * 80);
  address = nscreen;

  switch (local_teletextform)
  {
    case 4:
      for (row = 0; row <= 1; row++)
      {
        /*2 lines of 8 pixels*/
        teletext4graphics6separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      for (row = 3; row <= 5; row++)
      {
        /*3 lines of 8 pixels*/
        teletext4graphics6separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      for (row = 7; row <= 8; row++)
      {
        /*2 lines of 8 pixels*/
        teletext4graphics6separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      break;
    case 5:
      for (row = 0; row <= 1; row++)
      {
        /*2 lines of 8 pixels*/
        teletext4graphics8separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      for (row = 3; row <= 5; row++)
      {
        /*3 lines of 8 pixels*/
        teletext4graphics8separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      for (row = 7; row <= 8; row++)
      {
        /*2 lines of 8 pixels*/
        teletext4graphics8separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      break;
    case 6:
      for (row = 0; row <= 1; row++)
      {
        /*2 lines of 8 pixels*/
        teletext8graphics6separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      setword(cscreen+0x08,teletext_backcolourmask);
      setword(cscreen+0x0C,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      for (row = 3; row <= 5; row++)
      {
        /*3 lines of 8 pixels*/
        teletext8graphics6separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      setword(cscreen+0x08,teletext_backcolourmask);
      setword(cscreen+0x0C,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      for (row = 7; row <= 8; row++)
      {
        /*2 lines of 8 pixels*/
        teletext8graphics6separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      setword(cscreen+0x08,teletext_backcolourmask);
      setword(cscreen+0x0C,teletext_backcolourmask);
      break;
    case 7:
      for (row = 0; row <= 1; row++)
      {
        /*2 lines of 8 pixels*/
        teletext8graphics8separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      setword(cscreen+0x08,teletext_backcolourmask);
      setword(cscreen+0x0C,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      for (row = 3; row <= 5; row++)
      {
        /*3 lines of 8 pixels*/
        teletext8graphics8separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      setword(cscreen+0x08,teletext_backcolourmask);
      setword(cscreen+0x0C,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      for (row = 7; row <= 8; row++)
      {
        /*2 lines of 8 pixels*/
        teletext8graphics8separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      setword(cscreen+0x08,teletext_backcolourmask);
      setword(cscreen+0x0C,teletext_backcolourmask);
      break;
    case 8:
      for (row = 0; row <= 1; row++)
      {
        /*2 lines of 8 pixels*/
        teletext4graphics6separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext4graphics6separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      for (row = 3; row <= 5; row++)
      {
        /*3 lines of 8 pixels*/
        teletext4graphics6separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext4graphics6separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      for (row = 7; row <= 8; row++)
      {
        /*2 lines of 8 pixels*/
        teletext4graphics6separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext4graphics6separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      break;
    case 9:
      for (row = 0; row <= 1; row++)
      {
        /*2 lines of 8 pixels*/
        teletext4graphics8separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext4graphics8separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      for (row = 3; row <= 5; row++)
      {
        /*3 lines of 8 pixels*/
        teletext4graphics8separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext4graphics8separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      for (row = 7; row <= 8; row++)
      {
        /*2 lines of 8 pixels*/
        teletext4graphics8separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext4graphics8separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      break;
    case 10:
      for (row = 0; row <= 1; row++)
      {
        /*2 lines of 8 pixels*/
        teletext8graphics6separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext8graphics6separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      setword(cscreen+0x08,teletext_backcolourmask);
      setword(cscreen+0x0C,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      setword(cscreen+0x08,teletext_backcolourmask);
      setword(cscreen+0x0C,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      for (row = 3; row <= 5; row++)
      {
        /*3 lines of 8 pixels*/
        teletext8graphics6separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext8graphics6separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      setword(cscreen+0x08,teletext_backcolourmask);
      setword(cscreen+0x0C,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      setword(cscreen+0x08,teletext_backcolourmask);
      setword(cscreen+0x0C,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      for (row = 7; row <= 8; row++)
      {
        /*2 lines of 8 pixels*/
        teletext8graphics6separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext8graphics6separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      setword(cscreen+0x08,teletext_backcolourmask);
      setword(cscreen+0x0C,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      setword(cscreen+0x08,teletext_backcolourmask);
      setword(cscreen+0x0C,teletext_backcolourmask);
      break;
    case 11:
      for (row = 0; row <= 1; row++)
      {
        /*2 lines of 8 pixels*/
        teletext8graphics8separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext8graphics8separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      setword(cscreen+0x08,teletext_backcolourmask);
      setword(cscreen+0x0C,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      setword(cscreen+0x08,teletext_backcolourmask);
      setword(cscreen+0x0C,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      for (row = 3; row <= 5; row++)
      {
        /*3 lines of 8 pixels*/
        teletext8graphics8separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext8graphics8separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      setword(cscreen+0x08,teletext_backcolourmask);
      setword(cscreen+0x0C,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      setword(cscreen+0x08,teletext_backcolourmask);
      setword(cscreen+0x0C,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      for (row = 7; row <= 8; row++)
      {
        /*2 lines of 8 pixels*/
        teletext8graphics8separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext8graphics8separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      setword(cscreen+0x08,teletext_backcolourmask);
      setword(cscreen+0x0C,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      setword(cscreen+0x08,teletext_backcolourmask);
      setword(cscreen+0x0C,teletext_backcolourmask);
      break;
    case 12:
      for (row = 0; row <= 1; row++)
      {
        /*2 lines of 8 pixels*/
        teletext4graphics6separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext4graphics6separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext4graphics6separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      for (row = 3; row <= 5; row++)
      {
        /*3 lines of 8 pixels*/
        teletext4graphics6separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext4graphics6separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext4graphics6separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      for (row = 7; row <= 8; row++)
      {
        /*2 lines of 8 pixels*/
        teletext4graphics6separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext4graphics6separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext4graphics6separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      break;
    case 13:
      for (row = 0; row <= 1; row++)
      {
        /*2 lines of 8 pixels*/
        teletext4graphics8separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext4graphics8separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext4graphics8separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      for (row = 3; row <= 5; row++)
      {
        /*3 lines of 8 pixels*/
        teletext4graphics8separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext4graphics8separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext4graphics8separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      for (row = 7; row <= 8; row++)
      {
        /*2 lines of 8 pixels*/
        teletext4graphics8separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext4graphics8separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext4graphics8separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      break;
    case 14:
      for (row = 0; row <= 1; row++)
      {
        /*2 lines of 8 pixels*/
        teletext8graphics6separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext8graphics6separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext8graphics6separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      setword(cscreen+0x08,teletext_backcolourmask);
      setword(cscreen+0x0C,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      setword(cscreen+0x08,teletext_backcolourmask);
      setword(cscreen+0x0C,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      setword(cscreen+0x08,teletext_backcolourmask);
      setword(cscreen+0x0C,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      for (row = 3; row <= 5; row++)
      {
        /*3 lines of 8 pixels*/
        teletext8graphics6separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext8graphics6separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext8graphics6separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      setword(cscreen+0x08,teletext_backcolourmask);
      setword(cscreen+0x0C,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      setword(cscreen+0x08,teletext_backcolourmask);
      setword(cscreen+0x0C,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      setword(cscreen+0x08,teletext_backcolourmask);
      setword(cscreen+0x0C,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      for (row = 7; row <= 8; row++)
      {
        /*2 lines of 8 pixels*/
        teletext8graphics6separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext8graphics6separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext8graphics6separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      setword(cscreen+0x08,teletext_backcolourmask);
      setword(cscreen+0x0C,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      setword(cscreen+0x08,teletext_backcolourmask);
      setword(cscreen+0x0C,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      setword(cscreen+0x08,teletext_backcolourmask);
      setword(cscreen+0x0C,teletext_backcolourmask);
      break;
    case 15:
      for (row = 0; row <= 1; row++)
      {
        /*2 lines of 8 pixels*/
        teletext8graphics8separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext8graphics8separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext8graphics8separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      setword(cscreen+0x08,teletext_backcolourmask);
      setword(cscreen+0x0C,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      setword(cscreen+0x08,teletext_backcolourmask);
      setword(cscreen+0x0C,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      setword(cscreen+0x08,teletext_backcolourmask);
      setword(cscreen+0x0C,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      for (row = 3; row <= 5; row++)
      {
        /*3 lines of 8 pixels*/
        teletext8graphics8separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext8graphics8separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext8graphics8separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      setword(cscreen+0x08,teletext_backcolourmask);
      setword(cscreen+0x0C,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      setword(cscreen+0x08,teletext_backcolourmask);
      setword(cscreen+0x0C,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      setword(cscreen+0x08,teletext_backcolourmask);
      setword(cscreen+0x0C,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      for (row = 7; row <= 8; row++)
      {
        /*2 lines of 8 pixels*/
        teletext8graphics8separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext8graphics8separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
        teletext8graphics8separated1(address, pointer, row);
        address = address + nlocalscreenlinelength;
      }
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      setword(cscreen+0x08,teletext_backcolourmask);
      setword(cscreen+0x0C,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      setword(cscreen+0x08,teletext_backcolourmask);
      setword(cscreen+0x0C,teletext_backcolourmask);
      address = address + nlocalscreenlinelength;
      cscreen = (char *)address;
      setword(cscreen,teletext_backcolourmask);
      setword(cscreen+0x04,teletext_backcolourmask);
      setword(cscreen+0x08,teletext_backcolourmask);
      setword(cscreen+0x0C,teletext_backcolourmask);
      break;
  }
}

void videoteletextdrawrow(void)
{
  /*
   *mode 7 - 40x25, 640x256, 4 bpp, 1k (TELETEXT)
   */
  int i;
  int teletext_oldcolour;
  int teletext_oldcolourmask;
  int nscreen_temp;
  int displaycursorx,displaycursorwidth;
  int borderlength,precedingrowlength;
  int nscaledscreen;

  if (videoteletextscale)
  {
    borderlength = 0;
    precedingrowlength = 0;
  }
  else
  {
    borderlength = 3 * local_teletextlinelength;
    precedingrowlength = 10 * local_teletextlinelength;
  }

  video_address = video_startaddress+(m6845_vc*m6845_screenwidth);
  if (video_address >= 0x7FFF)
    video_address -= 0x400;

  if (m6845_vc == 0)
  {
    /*host machine screen memory address*/
    nscreen = nlocalscreen;
    if (borderlength > 0)
    {
      for (i = 3 * (local_teletextform >> 2); i > 0; i--)
      {
        blankrow(nscreen,local_linelengthfloor,0);
        nscreen = nscreen + nlocalscreenlinelength;
      }
    }
  }
  else
  {
    /*host machine screen memory address*/
    nscreen = nlocalscreen + borderlength + (m6845_vc * precedingrowlength);
  }

  nscreen_temp = nscreen;
  /*left padding*/
  for (i = 10 * (local_teletextform >> 2); i > 0; i--)
  {
    blankrow(nscreen_temp,teletext_leftextra,0);
    nscreen_temp = nscreen_temp + nlocalscreenlinelength;
  }

  nscreen = nscreen + teletext_leftextra;

  /*reset defaults*/
  teletext_alphacolour = 0x07;
  teletext_alphacolourmask= teletext_colourmap[0x07];
  teletext_graphiccolour = 0x07;
  teletext_graphiccolourmask= teletext_colourmap[0x07];
  teletext_backcolourmask = teletext_colourmap[0x00];
  teletext_style = TELETEXT_ALPHA;
  /*teletext_alphastyle = TELETEXT_ALPHA_NORMAL;*/
  teletext_graphicstyle = TELETEXT_GRAPHICS_CONTIGUOUS;
  teletext_holdgraphics = FALSE;
  teletext_steady = TRUE;
  teletext_character = 0x20;

  /*teletextblankchar();*/

  nx = 0;
  nxoffscreen = teletext_leftoffscreen;
  nxend = nxoffscreen+teletext_screenwidth;
  /*if (m6845_screenwidth > 40)
    nxend = 40;
  else
    nxend = m6845_screenwidth;*/
  /*draw a row of characters*/
  while (nx < nxend)
  {
    /*if (!teletext_holdgraphics)
      teletext_character = 0x20;*/

    switch (beebit_machinetype)
    {
      case MACHINE_MODELB:
        video_n = memory[video_address];
        break;
      case MACHINE_MODELBPLUS:
        if (beebit_acccon & 0x80)
          video_n = shadow[video_address];
        else
          video_n = memory[video_address];
        break;
      case MACHINE_MASTER128:
      case MACHINE_COMPACT:
        if (beebit_acccon & 0x01)
          /*LYNNE (D)*/
          video_n = shadow[video_address];
        else
          video_n = memory[video_address];
        break;
    }

    if (video_n >= 0xA0)
      video_n &= 0x7F;

    switch (video_n)
    {
      case 0x81:
      case 0x82:
      case 0x83:
      case 0x84:
      case 0x85:
      case 0x86:
      case 0x87:
        teletext_alphacolour = (video_n-0x80);
        /*if (!teletext_holdgraphics)
        {*/
          teletext_alphacolourmask = teletext_colourmap[teletext_alphacolour];
          teletext_style = TELETEXT_ALPHA;
          teletext_character = 0x20;
        /*}*/
        break;
      case 0x88:
        /*flash*/
        teletext_steady = FALSE;
        teletext_character = 0x20;
        break;
      case 0x89:
        /*steady*/
        teletext_steady = TRUE;
        teletext_character = 0x20;
        break;
      case 0x8C:
        /*normal height*/
        /*if (!teletext_holdgraphics)
        {*/
          /*teletext_style = TELETEXT_ALPHA;*/
          /*teletext_alphastyle = TELETEXT_ALPHA_NORMAL;*/
          teletext_doubleheight = FALSE;
          teletext_character = 0x20;
        /*}*/
        break;
      case 0x8D:
        /*double height*/
        /*if (!teletext_holdgraphics)
        {*/
          teletext_style = TELETEXT_ALPHA;
          teletext_doubleheight = TRUE;

          if (teletext_doubleheightstyle == TELETEXT_ALPHA_NORMAL)
            teletext_doubleheightstyle = TELETEXT_ALPHA_DOUBLETOP;

          /*if (teletext_doubleheightstyle == TELETEXT_ALPHA_DOUBLEBOTTOM)
            teletext_doubleheightstyle = TELETEXT_ALPHA_DOUBLETOP;*/
        /*}*/
        teletext_character = 0x20;
        break;
      case 0x91:
      case 0x92:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x97:
        teletext_graphiccolour = (video_n-0x90);
        teletext_style = TELETEXT_GRAPHICS;
        if (!teletext_holdgraphics)
        {
          teletext_graphiccolourmask = teletext_colourmap[teletext_graphiccolour];
          teletext_character = 0x20;
        }
        break;
      case 0x98:
        /*conceal*/
        teletext_style = TELETEXT_CONCEAL;
        break;
      case 0x99:
        /*contiguous*/
        if (!teletext_holdgraphics)
        {
          teletext_graphicstyle = TELETEXT_GRAPHICS_CONTIGUOUS;
          teletext_character = 0x20;
        }
        break;
      case 0x9A:
        /*separated*/
        if (!teletext_holdgraphics)
        {
          teletext_graphicstyle = TELETEXT_GRAPHICS_SEPARATED;
          teletext_character = 0x20;
        }
        break;
      case 0x9C:
        teletext_backcolourmask = teletext_colourmap[0x00];
        break;
      case 0x9D:
        switch (teletext_style)
        {
          case TELETEXT_ALPHA:
            teletext_backcolourmask = teletext_alphacolourmask;
            break;
          case TELETEXT_GRAPHICS:
            teletext_backcolourmask = teletext_graphiccolourmask;
            break;
        }
        break;
      case 0x9E:
        /*hold graphics*/
        /*hold/release graphics actually affects the way colour-change*/
        /*codes are displayed. normally they are blank; when hold graphics*/
        /*is set, the previous character is displayed again. This allows*/
        /*contiguous blocks of colour.*/
        /*Thanks to Tom Seddon for that bit of information...*/
        teletext_holdgraphics = TRUE;
        break;
      case 0x9F:
        /*release graphics*/
        teletext_holdgraphics = FALSE;
        break;
      default:
        teletext_character = video_n;
        /*if (teletext_character >= 160)
          teletext_style = TELETEXT_GRAPHICS;*/
        break;
    }

    if (nx >= nxoffscreen)
    {
      switch (teletext_style)
      {
        case TELETEXT_ALPHA:
          if (teletext_doubleheight)
          {
            switch (teletext_doubleheightstyle)
            {
              case TELETEXT_ALPHA_DOUBLETOP:
                if (!teletext_steady AND teletext_timer >= 36)
                  teletextblankchar();
                else
                  teletextalphadoubletop();
                break;
              case TELETEXT_ALPHA_DOUBLEBOTTOM:
                if (!teletext_steady AND teletext_timer >= 36)
                  teletextblankchar();
                else
                  teletextalphadoublebottom();
                break;
            }
          }
          else
          {
            if (!teletext_steady AND teletext_timer >= 36)
              teletextblankchar();
            else
            {
              if (teletext_doubleheightstyle == TELETEXT_ALPHA_DOUBLEBOTTOM)
                teletextblankchar();
              else
                teletextalphanormal();
            }
          }
          break;
        case TELETEXT_GRAPHICS:
          if (teletext_character >= 0x40 AND teletext_character < 0x60)
          {
            /*teletext_character >= 0x40 and < 0x60 are alpha*/
            teletext_oldcolour = teletext_alphacolour;
            teletext_oldcolourmask = teletext_alphacolourmask;
            teletext_alphacolour = teletext_graphiccolour;
            teletext_alphacolourmask = teletext_colourmap[teletext_alphacolour];
            if (teletext_doubleheight)
            {
              switch (teletext_doubleheightstyle)
              {
                case TELETEXT_ALPHA_DOUBLETOP:
                  if (!teletext_steady AND teletext_timer >= 36)
                    teletextblankchar();
                  else
                    teletextalphadoubletop();
                  break;
                case TELETEXT_ALPHA_DOUBLEBOTTOM:
                  if (!teletext_steady AND teletext_timer >= 36)
                    teletextblankchar();
                  else
                    teletextalphadoublebottom();
                  break;
              }
            }
            else
            {
              if (!teletext_steady AND teletext_timer >= 36)
                teletextblankchar();
              else
              {
                if (teletext_doubleheightstyle == TELETEXT_ALPHA_DOUBLEBOTTOM)
                  teletextblankchar();
                else
                  teletextalphanormal();
              }
            }
            teletext_alphacolourmask = teletext_oldcolourmask;
            teletext_alphacolour = teletext_oldcolour;
          }
          else
          {
            /*teletext_character < &40 or >= &60 are graphics*/
            switch (teletext_graphicstyle)
            {
              case TELETEXT_GRAPHICS_CONTIGUOUS:
                if (!teletext_steady AND teletext_timer >= 36)
                  teletextblankchar();
                else {
                  if (teletext_character == 0x20)
                    teletextblankchar();
                  else
                    teletextgraphicscontiguous();
                }
                break;
              case TELETEXT_GRAPHICS_SEPARATED:
                if (!teletext_steady AND teletext_timer >= 36)
                  teletextblankchar();
                else {
                  if (teletext_character == 0x20)
                    teletextblankchar();
                  else
                    teletextgraphicsseparated();
                }
                break;
            }
          }
          break;
        case TELETEXT_CONCEAL:
          if (!teletext_holdgraphics)
            teletextblankchar();
          break;
      }

      /*increment screen address*/
      if ((local_teletextform & 2) == 0)
        nscreen = nscreen + 8;
      else
        nscreen = nscreen + 16;
    }

    if (teletext_holdgraphics)
    {
      /*set the colourmask to the current colour*/
      teletext_alphacolourmask = teletext_colourmap[teletext_alphacolour];
      teletext_graphiccolourmask = teletext_colourmap[teletext_graphiccolour];
    }

    /*increment x counter*/
    nx++;

    if (video_address >= 0x7FFF)
      video_address = 0x7C00;
    else
      video_address++;
  }

  /*right padding*/
  for (i = 10 * (local_teletextform >> 2); i > 0; i--)
  {
    blankrow(nscreen,teletext_rightextra,0);
    nscreen = nscreen + nlocalscreenlinelength;
  }

  nscreen = nscreen + teletext_rightextra - local_linelengthfloor;

  if (m6845_vc == 24)
  {
    /*end of frame*/
    /*host machine screen memory address*/
    if (borderlength > 0)
    {
      for (i = 3 * (local_teletextform >> 2); i > 0; i--)
      {
        blankrow(nscreen,local_linelengthfloor,0);
        nscreen = nscreen + nlocalscreenlinelength;
      }
    }
  }


  switch (teletext_doubleheightstyle)
  {
    case TELETEXT_ALPHA_DOUBLETOP :
      teletext_doubleheightstyle = TELETEXT_ALPHA_DOUBLEBOTTOM;
      break;
    case TELETEXT_ALPHA_DOUBLEBOTTOM :
      teletext_doubleheight = FALSE;
      teletext_doubleheightstyle = TELETEXT_ALPHA_NORMAL;
      break;
  }

  /*else
  {*/
    /*if (teletext_doubleheightstyle == TELETEXT_ALPHA_DOUBLETOP)
      teletext_doubleheightstyle = TELETEXT_ALPHA_DOUBLEBOTTOM;*/
    /*else
      teletext_alphastyle = TELETEXT_ALPHA_NORMAL;*/
    /*else
    {
      teletext_doubleheight = FALSE;
    }*/
  /*}*/

  /*draw cursor*/
  if (beebit_cursor AND cursor_show AND cursor_on)
  {
    nscreen = nlocalscreen + borderlength + (m6845_vc * precedingrowlength) + 9 * local_teletextlinelength;

    if (m6845_vc == cursor_y0)
    {
      if (local_teletextform & 2)
        displaycursorx = teletext_leftextra + ((cursor_x - teletext_leftoffscreen) << 4);
      else
        displaycursorx = teletext_leftextra + ((cursor_x - teletext_leftoffscreen) << 3);

      if (displaycursorx + cursor_width > local_linelengthfloor)
        displaycursorwidth = local_linelengthfloor - displaycursorx - cursor_width;
      else
        displaycursorwidth = cursor_width;

      if (displaycursorx < 0)
      {
        displaycursorwidth += displaycursorx;
        displaycursorx = 0;
      }

      if (displaycursorwidth > 0)
      {
        nscreen += displaycursorx;
        for (i = (local_teletextform >> 2); i > 0; i--)
        {
          #ifdef __RISCOS__
            blankrow(nscreen,displaycursorwidth,cursor_bitmap);
          #else
            cscreen = (char *)nscreen;
            cscreen[0] = 0x77;
            cscreen[1] = 0x77;
            cscreen[2] = 0x77;
            cscreen[3] = 0x77;
            if (local_teletextform & 2)
            {
              cscreen[4] = 0x77;
              cscreen[5] = 0x77;
              cscreen[6] = 0x77;
              cscreen[7] = 0x77;
            }
          #endif
          nscreen = nscreen + nlocalscreenlinelength;
        }
      }
    }
  }

  if (videoteletextscale)
  {
    borderlength = 3 * host_scaledlinelengths.graphics;
    precedingrowlength = 10 * host_scaledlinelengths.graphics;
    nscreen = nlocalscreen;

    if (m6845_vc == 0)
    {
      nscaledscreen = nhostscreen;

      for (i = 3 * host_verticalscales.graphics; i > 0; i--)
      {
#ifdef VIDEOSCALE_WITH_OVERSCALE
        limitedblankrow(nscaledscreen,host_scaledlinelengthfloor,host_colourmasks[0]);
#else
        blankrow(nscaledscreen,host_scaledlinelengthfloor,host_colourmasks[0]);
#endif
        nscaledscreen = nscaledscreen + nhostscreenlinelength;
      }
    }
    else
    {
      nscaledscreen = nhostscreen + borderlength + (m6845_vc * precedingrowlength);
    }

    switch (local_teletextform >> 2)
    {
      case 1:
        host_scaledlinelength = host_scaledlinelengths.unroundedteletext;

        for (i = 10; i > 0; i--)
        {
          videoteletextscale(nscreen, nscaledscreen);
          nscreen = nscreen + nlocalscreenlinelength;
          nscaledscreen = nscaledscreen + host_scaledlinelength;
        }
        break;
      case 2:
        host_scaledlinelength = host_scaledlinelengths.roundedteletext;

        for (i = 20; i > 0; i--)
        {
          videoteletextscale(nscreen, nscaledscreen);
          nscreen = nscreen + nlocalscreenlinelength;
          nscaledscreen = nscaledscreen + host_scaledlinelength;
        }
        break;
      case 3:
        host_scaledlinelength = host_scaledlinelengths.roundedteletext;

        for (i = 10; i > 0; i--)
        {
          videoteletextscale(nscreen, nscaledscreen);
          nscreen = nscreen + nlocalscreenlinelength;
          nscaledscreen = nscaledscreen + host_scaledlinelength;

          host_scaledlinelength = host_scaledlinelengths.unroundedteletext;

          videoteletextscale(nscreen, nscaledscreen);
          nscreen = nscreen + nlocalscreenlinelength;
          nscaledscreen = nscaledscreen + host_scaledlinelength;

          host_scaledlinelength = host_scaledlinelengths.roundedteletext;

          videoteletextscale(nscreen, nscaledscreen);
          nscreen = nscreen + nlocalscreenlinelength;
          nscaledscreen = nscaledscreen + host_scaledlinelength;
        }
        break;
    }

    host_scaledlinelength = host_scaledlinelengths.graphics;

    if (m6845_vc == 24)
    {
      /*end of frame*/
      for (i = 3 * host_verticalscales.graphics; i > 0; i--)
      {
#ifdef VIDEOSCALE_WITH_OVERSCALE
        limitedblankrow(nscaledscreen,host_scaledlinelengthfloor,host_colourmasks[0]);
#else
        blankrow(nscaledscreen,host_scaledlinelengthfloor,host_colourmasks[0]);
#endif
        nscaledscreen = nscaledscreen + nhostscreenlinelength;
      }
    }
  }
}

void videomodechange(void)
{
  switch (video_mode)
  {
    case 0:
      videoplot = videodrawline0;
      break;
    case 1:
      videoplot = videodrawline1;
      break;
    case 2:
      videoplot = videodrawline2;
      break;
    case 3:
      videoplot = videodrawline3;
      break;
    case 4:
      videoplot = videodrawline4;
      break;
    case 5:
      videoplot = videodrawline5;
      break;
    case 6:
      videoplot = videodrawline6;
      break;
    case 8:
      videoplot = videodrawline8;
      break;
  }
}

void videoscanline(void)
{
  int naddress,localrow,nscaledscreen;
  int displaycursorx,displaycursorwidth;
  int charstodisplayline;

  /*---counter---*/

  /*increase internal scanline count by 1*/
  video_scanline++;

  /*increase 6845 scanline count by 1*/
  /*m6845_sc++;*/
  m6845_sc += m6845_scstep;

  /*if (m6845_sc >= m6845_sl && m6845_vc < m6845_vt)*/
  if (m6845_sc >= m6845_slplus && m6845_vc < m6845_vt)
  {
    /*scanline count >= scan lines per character row*/
    m6845_vc++;
    m6845_sc = 0;
    /*scanline count = 0*/
    if (m6845_vc == m6845_vd)
    {
      /*curent row == vertical display rows*/
      video_de = video_display = FALSE;
    }
    video_offset += video_width;
  }

  /*---vertical sync---*/

  if (video_synchold == 0)
  {
    /*r6502_cyclestogo += 4;*/

    /*vertical sync width*/
    if (m6845_vc == m6845_vsp && m6845_sc <= m6845_vsw)
    {
      video_synchold = m6845_vsw;

      video_scanline = 0;
      if (video_framerate == beebit_framerate)
        video_field ^= 1;

      video_currentrow = 0;
      if (beebit_videospeed == VIDEO_SLOW)
        video_drawline = 0;
      else
      {
        if (m6845_interlaceon AND video_field == 1)
          video_drawline = 1;
        else
          video_drawline = 0;
      }

      /*Take CPU back to horizontal sync*/
      charstodisplayline = m6845_r[0x00] - m6845_r[0x02];
      if (charstodisplayline > 0)
      {
        if (videoula_clockrate)
          /*fast clock mode (2MHz cycles) */
          video_timer -= charstodisplayline;
        else
          /*slow clock mode (milliseconds)*/
          video_timer -= (charstodisplayline << 1);
      }

      /*VSYNC pulse is delayed on interlace even frame*/
      if (m6845_interlaceon && video_field == 0)
        video_timer += (m6845_horizontaltotal>>1);

      /*print screen during vertical sync*/
      if (lprintscreen !=0)
      {
        sprite_printscreen();
        lprintscreen = 0;
      }

    }
  }
  else
  {
    video_synchold--;

    if (video_synchold == 0)
    {
      /*Take off time VSYNC end was delayed*/
      if (m6845_interlaceon && video_field == 0)
        video_timer -= (m6845_horizontaltotal>>1);

      /*Run CPU forward to horizontal display*/
      charstodisplayline = m6845_r[0x00] - m6845_r[0x02];
      if (charstodisplayline > 0)
      {
        if (videoula_clockrate)
          /*fast clock mode (2MHz cycles) */
          video_timer += charstodisplayline;
        else
          /*slow clock mode (milliseconds)*/
          video_timer += (charstodisplayline << 1);
      }

      if (video_mode != ncurrentmode)
      {
        /*screen mode has changed*/
        if (!lteletextmode)
        {
          videoulasetpalette();
        }

        if (local_teletextform == 0)
        {
          if (lteletextmode)
          {
            videoulasetcursor();
            if (screenmoderecords)
            {
              regs.r[0] = 0;
              regs.r[1] = 7;
              _kernel_swi(OS_ScreenMode,&regs,&regs);
            }
            else
            {
              bbcvdu(22);
              bbcvdu(7);
            }
            videohostmodevars();
            adcmodevars();
            cursordisable();
          }
          else if (ncurrentmode == 7 OR ncurrentmode == -1)
          {
            videoulasetcursor();
            if (screenmoderecords)
            {
              regs.r[0] = 0;
              regs.r[1] = beebit_graphicsmodespecifier;
              _kernel_swi(OS_ScreenMode,&regs,&regs);
            }
            else
            {
              bbcvdu(22);
              bbcvdu(beebit_graphicsmodespecifier);
            }
            videohostmodevars();
            adcmodevars();
            cursordisable();
          }
        }

        ncurrentmode = video_mode;
        videomodechange();
        crtcscreen();
        crtccursor();
        video_startaddress = video_storeaddress;
        video_offset = 0;
      }

      r6522sysvia_ifr |= 0x02; /*CA1 flag*/
      systemviasetirq();
      r6522sysvia_ira = (r6522sysvia_ora & r6522sysvia_ddra) + (r6522sysvia_porta & ~r6522sysvia_ddra);

      beebit_yield = TRUE;

      /*if (singletask)
      {*/
      /*sync emulated BBC clock with PC clock*/
      if (beebit_cpuspeed == CPU_2MHZ)
      {
        vsync(); /*wait for native scren vsync*/
        while (clock() < nclock)
        {
        }
        nclock = clock()+TIME_50HZ;
      }
      /*}*/
    }
  }

  /*---timing---*/

  /*if (lteletextmode)
  {
    video_timer += (m6845_horizontaltotal*m6845_sl);
    video_timer += m6845_horizontaltotal + 32;
  }
  else
  {*/
  /*if (videoula_clockrate)
    video_timer += m6845_horizontaltotal;
  else
    video_timer += (m6845_horizontaltotal << 1);*/
  video_timer += m6845_horizontaltotal;
  /*}*/

  /*---reset---*/

  /*if (video_mode == 2)
    fprintf(htrace,"vc=%u vt=%u sc=%u adj=%u\n",m6845_vc,m6845_vt,m6845_sc,m6845_adj);*/
  /*if (m6845_vc >= m6845_vt && m6845_sc >= m6845_adj)*/
  if (((m6845_vc << 8) | m6845_sc) >= video_totalend)
  {
    /*Dummy line brings sum of even + odd field time to 40 ms for Revs*/
    if (m6845_interlaceon && video_field == 0)
      video_timer += m6845_horizontaltotal;

    videorecalc();
    m6845_vc = m6845_sc = 0;
    /*vertical count = 0*/
    video_de = TRUE;
    /*video_display = TRUE;*/
    video_display = (m6845_displayskew != 3);

    /*cursor timer counts up to 50 fields*/
    if (cursor_timer <= 0)
    {
      cursor_timer = cursor_blinktime;
      if (cursor_blink)
        cursor_on = (!cursor_on);
      else
        cursor_on = TRUE;
    }
    else
      cursor_timer--;

    /*teletext timer counts 50 fields*/
    if (teletext_timer >= 50)
      teletext_timer = 0;
    else
      teletext_timer ++;

    /*video_framerate counts 0-2 fields*/
    /*if (video_framerate >= 255)*/
    if (video_framerate >= beebit_framerate)
      video_framerate = 0;
    else
      video_framerate++;

    video_startaddress = video_storeaddress;
    video_offset = 0;
  /*if (video_mode == 2)
    fprintf(htrace,"videostart=&%X\n",video_startaddress);*/
  }

  /*---plot---*/

  if (lteletextmode)
  {
    /*if (video_framerate == beebit_framerate)*/
    if (video_framerate == beebit_framerate)
    {
      if (m6845_sc == 0 AND m6845_vc < m6845_vd AND m6845_vc < 25)
        videoteletext();
    }
  }
  else if (video_currentrow < MODE12_Y)
  {
    if (videographicsscale)
    {
      localrow = 0;
    }
    else
    {
      localrow = video_currentrow;
    }

    if (video_scanline >= video_display0 && video_scanline < video_display1)
    {
      /*if allowed to draw a line on this pass*/
      /*if internal scanline counter >= start of display*/
      /*and internal scanline counter < end of display*/
      if (video_drawline == 0 && video_framerate == beebit_framerate)
      {
        /*if the frames per second counter matches the option*/

        /*bbc screen memory address*/
        video_address = video_startaddress+video_offset+m6845_sc;
        /*if (video_address < 0x2F00)
        {*/
          /*inttohex4(video_baseaddress);
          bbcvdu(32);
          inttohex4(video_startaddress);
          bbcvdu(32);
          inttohex4(video_offset);
          bbcvdu(32);
          inttohex4(video_address);
          bbcvdu(13);
          bbcvdu(10);*/
          /*for (i=0;i<=0xFF;i++)
            shadow[0x2F00+i] = shadow[0xDF00+i];
        }*/
        if (video_address >= 0x8000) /* AND !(beebit_acccon & beebit_vdusel))*/
        {
          video_address &= 0x7FFF;
          video_address += video_baseaddress;
        }

        if (video_display) /*video_de AND m6845_displayskew != 3)*/
        {
          /*if display is enabled*/
          /*videodrawline();*/
          /*video_plot[video_mode]();*/
          /*switch (video_mode)
          {
            case 0:
              videodrawline0();
              break;
            case 1:
              videodrawline1();
              break;
            case 2:
              videodrawline2();
              break;
            case 3:
              videodrawline3();
              break;
            case 4:
              videodrawline4();
              break;
            case 5:
              videodrawline5();
              break;
            case 6:
              videodrawline6();
              break;
          }*/

          switch (beebit_graphicsmode)
          {
            case 12:
            case 15:
              /*host machine screen memory address*/
              nscreen = nlocalscreen+(localrow * nlocalscreenlinelength);
              videoplot();
              break;
            case 20:
            case 21:
              /*host machine screen memory address*/
              nscreen = nlocalscreen+(localrow * (nlocalscreenlinelength<<1));
              naddress = video_address;
              videoplot();
              nscreen = nscreen + nlocalscreenlinelength;
              video_address = naddress;
              videoplot();
              break;
          }
        }
        else
        {
          switch (beebit_graphicsmode)
          {
            case 12:
            case 15:
              /*host machine screen memory address*/
              nscreen = nlocalscreen+(localrow * nlocalscreenlinelength);
              videoblankline();
              break;
            case 20:
            case 21:
              /*host machine screen memory address*/
              nscreen = nlocalscreen+(localrow * (nlocalscreenlinelength<<1));
              videoblankline();
              nscreen = nscreen + nlocalscreenlinelength;
              videoblankline();
              break;
          }
        }

        /*draw cursor*/
        if (beebit_cursor AND cursor_show AND cursor_on)
        {
          if (video_currentrow > cursor_y0 AND video_currentrow <= cursor_y1)
          {
            displaycursorx = m6845_leftextra + cursor_x;

            if (displaycursorx + cursor_width > local_linelengthfloor)
              displaycursorwidth = local_linelengthfloor - displaycursorx - cursor_width;
            else
              displaycursorwidth = cursor_width;

            if (displaycursorx < 0)
            {
              displaycursorwidth += displaycursorx;
              displaycursorx = 0;
            }

            displaycursorwidth &= ~3;

            if (displaycursorwidth > 0)
            {
              /*nscreen = nlocalscreen+(localrow*nlocalscreenlinelength)+cursor_x;*/
              nscreen += displaycursorx;
              #ifdef __RISCOS__
                if (videoula_clockrate)
                {
                  /*modes 0-3*/
                  switch (beebit_graphicsmode)
                  {
                    case 12:
                    case 15:
                      blankrow(nscreen,displaycursorwidth,cursor_bitmap);
                      break;
                    case 20:
                    case 21:
                      nscreen = nscreen - nlocalscreenlinelength;
                      blankrow(nscreen,displaycursorwidth,cursor_bitmap);
                      nscreen = nscreen + nlocalscreenlinelength;
                      blankrow(nscreen,displaycursorwidth,cursor_bitmap);
                      break;
                  }
                }
                else
                {
                  /*modes 4-7*/
                  switch (beebit_graphicsmode)
                  {
                    case 12:
                    case 15:
                      blankrow(nscreen,displaycursorwidth,cursor_bitmap);
                      break;
                    case 20:
                    case 21:
                      nscreen = nscreen - nlocalscreenlinelength;
                      blankrow(nscreen,displaycursorwidth,cursor_bitmap);
                      nscreen = nscreen + nlocalscreenlinelength;
                      blankrow(nscreen,displaycursorwidth,cursor_bitmap);
                      break;
                  }
                }
              #else
                cscreen = (char *)nscreen;
                cscreen[0] = 0x77;
                cscreen[1] = 0x77;
                cscreen[2] = 0x77;
                cscreen[3] = 0x77;
                cscreen[4] = 0x77;
                cscreen[5] = 0x77;
                cscreen[6] = 0x77;
                cscreen[7] = 0x77;
              #endif
            }
          }
        }
      }

      if (videographicsscale)
      {
        nscreen = nlocalscreen;
        nscaledscreen = nhostscreen+(video_currentrow * host_scaledlinelength);
        videographicsscale(nscreen, nscaledscreen);
      }

      /*increase the currently plotted row by 1*/
      video_currentrow++;

      if (m6845_interlaceon AND beebit_videospeed == VIDEO_FAST)
        /*toggle the line drawing flag*/
        video_drawline ^= 1;
    }
  }
}
