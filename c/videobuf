/*>videobuf.c
 *
 * BeebIt - BBC Micro Model B Emulator
 *
 * Cycle-level video emulation
 *
 * (C) Copyright Crispian Daniels, 2024
 *
 * Email: <convertedgames@3insdale.me.uk>
 */

#include "hostmap.h"
#include "video.h"
#include "videoscale.h"

void refreshteletextcolourfill(HOSTMAP* hmap)
{
  uintptr_t colours = hmap->B_teletext.colours;
  uintptr_t bg1fill = hmap->B_teletext.colourfill[(colours>>4)&7];
  uintptr_t bg2fill = hmap->B_teletext.colourfill[(colours>>12)&7];

  hmap->B_teletext.bg1fill = bg1fill;
  hmap->B_teletext.bg2fill = bg2fill;

  if (hmap->A_teletext.flipflops > TELETEXTCONCEALTHRESHOLD)
  {
    hmap->B_teletext.fg1fill = bg1fill;
    hmap->B_teletext.fg2fill = bg2fill;
  }
  else
  {
    hmap->B_teletext.fg1fill = hmap->B_teletext.colourfill[colours&7];
    hmap->B_teletext.fg2fill = hmap->B_teletext.colourfill[(colours>>8)&7];
  }
}

static inline void selectnormalteletextcolour(HOSTMAP* hmap)
{
  uintptr_t colours = hmap->B_teletext.colours;
  uintptr_t bgfill;

  bgfill = hmap->B_teletext.colourfill[(colours>>4)&7];
  if (hmap->B_teletext.fg1fill == hmap->B_teletext.bg1fill)
    hmap->B_teletext.fg1fill = bgfill;
  else
    hmap->B_teletext.fg1fill = hmap->B_teletext.colourfill[colours&7];
  hmap->B_teletext.bg1fill = bgfill;

  bgfill = hmap->B_teletext.colourfill[(colours>>12)&7];
  if (hmap->B_teletext.fg2fill == hmap->B_teletext.bg2fill)
    hmap->B_teletext.fg2fill = bgfill;
  else
    hmap->B_teletext.fg2fill = hmap->B_teletext.colourfill[(colours>>8)&7];
  hmap->B_teletext.bg2fill = bgfill;
}

static inline void selectinverseteletextcolour(HOSTMAP* hmap)
{
  uintptr_t colours = hmap->B_teletext.colours;
  uintptr_t bgfill;

  bgfill = hmap->D_colour.inversefill[(colours>>4)&7];
  if (hmap->B_teletext.fg1fill == hmap->B_teletext.bg1fill)
    hmap->B_teletext.fg1fill = bgfill;
  else
    hmap->B_teletext.fg1fill = hmap->D_colour.inversefill[colours&7];
  hmap->B_teletext.bg1fill = bgfill;

  bgfill = hmap->D_colour.inversefill[(colours>>12)&7];
  if (hmap->B_teletext.fg2fill == hmap->B_teletext.bg2fill)
    hmap->B_teletext.fg2fill = bgfill;
  else
    hmap->B_teletext.fg2fill = hmap->D_colour.inversefill[(colours>>8)&7];
  hmap->B_teletext.bg2fill = bgfill;
}

static inline void selectnormalgraphicscolour(HOSTMAP* hmap)
{
  hmap->B_videoula.fragmentrefreshaction(hmap, hmap->D_colour.normalfill);
}

static inline void selectinversegraphicscolour(HOSTMAP* hmap)
{
  hmap->B_videoula.fragmentrefreshaction(hmap, hmap->D_colour.inversefill);
}

static inline R6502ZONEMAP* videodisplayadvance(R6502ZONEMAP* zmap)
{
  HOSTMAP* hmap = (HOSTMAP*)zmap;
  intptr_t column = hmap->B_vidbuf.column + 1;
  hmap->B_vidbuf.column = column;

  if (column >= hmap->B_vidbuf.stopcolumn)
  {
    if (column >= hmap->B_vidbuf.limitcolumn)
      hmap->peripheral_code |= VIDEODISPLAYSTOP;
    else
      hmap->peripheral_code |= VIDEODISPLAYOUTRIGHT;
  }
  return (R6502ZONEMAP*)(*hmap->B_crtc.step_state)(hmap, (uintptr_t)(hmap->B_crtc.step_state+1));
}

R6502ZONEMAP* videodisplayskip(R6502ZONEMAP* zmap, uintptr_t peripheral_code)
{
  return videodisplayadvance(zmap);
}

R6502ZONEMAP* videowritecursorblank(R6502ZONEMAP* zmap, uintptr_t peripheral_code)
{
  HOSTMAP* hmap = (HOSTMAP*)zmap;
  uintptr_t cursorbuffer,cursorflags;

  cursorbuffer = hmap->B_crtc.cursorbuffer;
  cursorflags = hmap->B_videoula.cursorflags;

  if (cursorflags & cursorbuffer)
  {
    hmap->B_vidbuf.cursorinnerop(hmap);
  }
  return videodisplayadvance(zmap);
}

R6502ZONEMAP* videowritegraphics(R6502ZONEMAP* zmap, uintptr_t peripheral_code)
{
  HOSTMAP* hmap = (HOSTMAP*)zmap;

  if (!(hmap->A_crtc.c9 & 8))
  {
    hmap->B_videoula.bytecolours = hmap->B_videoula.bytelut[hmap->A_videoula.shiftregister&0xFF];

    hmap->B_vidbuf.graphicsinnerop(hmap);
  }
  return videodisplayadvance(zmap);
}

R6502ZONEMAP* videowritecursorgraphics(R6502ZONEMAP* zmap, uintptr_t peripheral_code)
{
  HOSTMAP* hmap = (HOSTMAP*)zmap;
  int cursoron;
  uintptr_t cursorbuffer,cursorflags;

  cursorbuffer = hmap->B_crtc.cursorbuffer;
  cursorflags = hmap->B_videoula.cursorflags;

  cursoron = (cursorflags & cursorbuffer) != 0;

  if (!(hmap->A_crtc.c9 & 8))
  {
    hmap->B_videoula.bytecolours = hmap->B_videoula.bytelut[hmap->A_videoula.shiftregister&0xFF];

    if (cursoron)
      selectinversegraphicscolour(hmap);
    hmap->B_vidbuf.graphicsinnerop(hmap);
    if (cursoron)
      selectnormalgraphicscolour(hmap);
  }
  else if (cursoron)
  {
    hmap->B_vidbuf.cursorinnerop(hmap);
  }
  return videodisplayadvance(zmap);
}

R6502ZONEMAP* videowriteteletext(R6502ZONEMAP* zmap, uintptr_t peripheral_code)
{
  HOSTMAP* hmap = (HOSTMAP*)zmap;

  hmap->B_vidbuf.teletextinnerop(hmap);
  return videodisplayadvance(zmap);
}

R6502ZONEMAP* videowritecursorteletext(R6502ZONEMAP* zmap, uintptr_t peripheral_code)
{
  HOSTMAP* hmap = (HOSTMAP*)zmap;
  int cursoron;
  uintptr_t cursorbuffer,cursorflags;

  cursorbuffer = hmap->B_crtc.cursorbuffer;
  cursorflags = hmap->B_videoula.cursorflags;

  cursoron = (cursorflags & cursorbuffer) != 0;

  if (cursoron)
    selectinverseteletextcolour(hmap);
  hmap->B_vidbuf.teletextinnerop(hmap);
  if (cursoron)
    selectnormalteletextcolour(hmap);
  return videodisplayadvance(zmap);
}

R6502ZONEMAP* videowriteecursorblank(R6502ZONEMAP* zmap, uintptr_t peripheral_code)
{
  HOSTMAP* hmap = (HOSTMAP*)zmap;
  uintptr_t cursorbuffer,cursorflags;

  cursorbuffer = hmap->B_crtc.cursorbuffer;
  cursorflags = hmap->B_videoula.cursorflags;

  if (cursorflags & cursorbuffer)
  {
    if (hmap->B_vidbuf.linelevel >= 64)
      hmap->A_vidbuf.writecode = 0x20;
    else
      hmap->A_vidbuf.writecode = 0x10;

    hmap->B_vidbuf.cursorinnerop(hmap);
  }
  return videodisplayadvance(zmap);
}

R6502ZONEMAP* videowriteegraphics(R6502ZONEMAP* zmap, uintptr_t peripheral_code)
{
  HOSTMAP* hmap = (HOSTMAP*)zmap;

  if (hmap->B_vidbuf.linelevel >= 64)
    hmap->A_vidbuf.writecode = 0x20;
  else
    hmap->A_vidbuf.writecode = 0x10;

  if (!(hmap->A_crtc.c9 & 8))
  {
    hmap->B_videoula.bytecolours = hmap->B_videoula.bytelut[hmap->A_videoula.shiftregister&0xFF];

    hmap->B_vidbuf.graphicsinnerop(hmap);
  }
  return videodisplayadvance(zmap);
}

R6502ZONEMAP* videowriteecursorgraphics(R6502ZONEMAP* zmap, uintptr_t peripheral_code)
{
  HOSTMAP* hmap = (HOSTMAP*)zmap;
  int cursoron;
  uintptr_t cursorbuffer,cursorflags;

  cursorbuffer = hmap->B_crtc.cursorbuffer;
  cursorflags = hmap->B_videoula.cursorflags;

  cursoron = (cursorflags & cursorbuffer) != 0;

  if (hmap->B_vidbuf.linelevel >= 64)
    hmap->A_vidbuf.writecode = 0x20;
  else
    hmap->A_vidbuf.writecode = 0x10;

  if (!(hmap->A_crtc.c9 & 8))
  {
    hmap->B_videoula.bytecolours = hmap->B_videoula.bytelut[hmap->A_videoula.shiftregister&0xFF];

    if (cursoron)
      selectinversegraphicscolour(hmap);
    hmap->B_vidbuf.graphicsinnerop(hmap);
    if (cursoron)
      selectnormalgraphicscolour(hmap);
  }
  else if (cursoron)
  {
    hmap->B_vidbuf.cursorinnerop(hmap);
  }
  return videodisplayadvance(zmap);
}

R6502ZONEMAP* videowriteeteletext(R6502ZONEMAP* zmap, uintptr_t peripheral_code)
{
  HOSTMAP* hmap = (HOSTMAP*)zmap;

  if (hmap->B_vidbuf.linelevel >= 64)
    hmap->A_vidbuf.writecode = 0x20;
  else if (hmap->A_teletext.roundingdirection2)
    hmap->A_vidbuf.writecode = 0x50;
  else
    hmap->A_vidbuf.writecode = 0x10;

  hmap->B_vidbuf.teletextinnerop(hmap);
  return videodisplayadvance(zmap);
}

R6502ZONEMAP* videowriteecursorteletext(R6502ZONEMAP* zmap, uintptr_t peripheral_code)
{
  HOSTMAP* hmap = (HOSTMAP*)zmap;
  int cursoron;
  uintptr_t cursorbuffer,cursorflags;

  cursorbuffer = hmap->B_crtc.cursorbuffer;
  cursorflags = hmap->B_videoula.cursorflags;

  cursoron = (cursorflags & cursorbuffer) != 0;

  if (hmap->B_vidbuf.linelevel >= 64)
    hmap->A_vidbuf.writecode = 0x20;
  else if (hmap->A_teletext.roundingdirection2)
    hmap->A_vidbuf.writecode = 0x50;
  else
    hmap->A_vidbuf.writecode = 0x10;

  if (cursoron)
    selectinverseteletextcolour(hmap);
  hmap->B_vidbuf.teletextinnerop(hmap);
  if (cursoron)
    selectnormalteletextcolour(hmap);
  return videodisplayadvance(zmap);
}

R6502ZONEMAP* videowritepcursorblank(R6502ZONEMAP* zmap, uintptr_t peripheral_code)
{
  HOSTMAP* hmap = (HOSTMAP*)zmap;
  int clipped,altwritten;
  uintptr_t cursorbuffer,cursorflags;
  intptr_t lineaddresscopy;
  uint8_t skip;

  altwritten = 0;
  cursorbuffer = hmap->B_crtc.cursorbuffer;
  cursorflags = hmap->B_videoula.cursorflags;

  clipped = 0;
  lineaddresscopy = hmap->B_vidbuf.lineaddress;

  skip = hmap->A_vidbuf.skip;

  if (hmap->A_crtc.r[9] == hmap->A_crtc.r9image)
  {
    if (hmap->A_crtc.fieldnumber && (cursorflags & cursorbuffer))
    {
      if (hmap->B_vidbuf.linelevel >= 64)
      {
        if (!(skip & CLIPPEDSKIPFLAG))
        {
          hmap->B_vidbuf.lineaddress += hmap->B_vidbuf.altoffset;
          hmap->A_vidbuf.writecode = 0x10;
        }
        else
          clipped = 1;
      }
      else
      {
        if (!(skip & CLIPPEDABOVESKIPFLAG))
        {
          hmap->B_vidbuf.lineaddress -= hmap->B_vidbuf.stride - hmap->B_vidbuf.altoffset;
          hmap->A_vidbuf.writecode = 0x20;
        }
        else
          clipped = 1;
      }
    }
    else
      clipped = 1;
  }
  else if (hmap->A_crtc.c9 > 0 && (cursorflags & (cursorbuffer>>VIDEOCURSORSIGNALABOVESHIFT)))
  {
    if (hmap->B_vidbuf.linelevel >= 64)
    {
      if (!(skip & CLIPPEDSKIPFLAG))
      {

        hmap->B_vidbuf.lineaddress += hmap->B_vidbuf.altoffset;
        hmap->A_vidbuf.writecode = 0x10;
      }
      else
        clipped = 1;
    }
    else
    {
      if (!(skip & CLIPPEDABOVESKIPFLAG))
      {
        hmap->B_vidbuf.lineaddress -= hmap->B_vidbuf.stride - hmap->B_vidbuf.altoffset;
        hmap->A_vidbuf.writecode = 0x20;
      }
      else
        clipped = 1;
    }
  }
  else
    clipped = 1;

  if (clipped)
    clipped = 0;
  else
  {
    altwritten = 1;
    hmap->B_vidbuf.linelevel = (hmap->B_vidbuf.linelevel+64)&127;
    hmap->B_vidbuf.cursorinnerop(hmap);
    hmap->B_vidbuf.linelevel = (hmap->B_vidbuf.linelevel+64)&127;
    hmap->B_vidbuf.lineaddress = lineaddresscopy;
  }

  if (hmap->A_crtc.r[9] == hmap->A_crtc.r9image)
  {
    if (!hmap->A_crtc.fieldnumber && (cursorflags & cursorbuffer))
    {
      if (hmap->B_vidbuf.linelevel >= 64)
      {
        if (!(skip & CLIPPEDBELOWSKIPFLAG))
        {
          hmap->B_vidbuf.lineaddress += hmap->B_vidbuf.stride + hmap->B_vidbuf.altoffset;
          hmap->A_vidbuf.writecode = 0x10;
        }
        else
          clipped = 1;
      }
      else
      {
        if (!(skip & CLIPPEDSKIPFLAG))
        {
          hmap->B_vidbuf.lineaddress += hmap->B_vidbuf.altoffset;
          hmap->A_vidbuf.writecode = 0x20;
        }
        else
          clipped = 1;
      }
    }
    else
      clipped = 1;
  }
  else if (hmap->A_crtc.c9 < hmap->A_crtc.r[9]+1 && (cursorflags & (cursorbuffer>>VIDEOCURSORSIGNALBELOWSHIFT)))
  {
    if (hmap->B_vidbuf.linelevel >= 64)
    {
      if (!(skip & CLIPPEDBELOWSKIPFLAG))
      {
        hmap->B_vidbuf.lineaddress += hmap->B_vidbuf.stride + hmap->B_vidbuf.altoffset;
        hmap->A_vidbuf.writecode = 0x10;
      }
      else
        clipped = 1;
    }
    else
    {
      if (!(skip & CLIPPEDSKIPFLAG))
      {
        hmap->B_vidbuf.lineaddress += hmap->B_vidbuf.altoffset;
        hmap->A_vidbuf.writecode = 0x20;
      }
      else
        clipped = 1;
    }
  }
  else
    clipped = 1;

  if (!clipped)
  {
    altwritten = 1;
    hmap->B_vidbuf.linelevel = (hmap->B_vidbuf.linelevel+64)&127;
    hmap->B_vidbuf.cursorinnerop(hmap);
    hmap->B_vidbuf.linelevel = (hmap->B_vidbuf.linelevel+64)&127;
    hmap->B_vidbuf.lineaddress = lineaddresscopy;
  }
  clipped = (skip & CLIPPEDSKIPFLAG) != 0;

  if (!clipped)
  {
    if (hmap->B_vidbuf.linelevel >= 64)
      hmap->A_vidbuf.writecode = 0x20;
    else
      hmap->A_vidbuf.writecode = 0x10;

    if (cursorflags & cursorbuffer)
    {
      hmap->B_vidbuf.cursorinnerop(hmap);
    }
    else if (altwritten)
    {
      hmap->B_videoula.cursorfill = hmap->B_videoula.normalblank;
      hmap->B_vidbuf.cursorinnerop(hmap);
      hmap->B_videoula.cursorfill = hmap->B_videoula.inverseblank;
    }
  }
  return videodisplayadvance(zmap);
}

R6502ZONEMAP* videowritepgraphics(R6502ZONEMAP* zmap, uintptr_t peripheral_code)
{
  HOSTMAP* hmap = (HOSTMAP*)zmap;
  int clipped,c9alt,altwritten;
  intptr_t lineaddresscopy;
  uint8_t skip;

  altwritten = 0;

  clipped = 0;
  lineaddresscopy = hmap->B_vidbuf.lineaddress;

  skip = hmap->A_vidbuf.skip;

  c9alt = hmap->A_crtc.c9;

  if (hmap->A_crtc.r[9] == hmap->A_crtc.r9image)
  {
    if (hmap->A_crtc.fieldnumber)
    {
      if (hmap->B_vidbuf.linelevel >= 64)
      {
        if (!(skip & CLIPPEDSKIPFLAG))
        {
          hmap->B_videoula.bytecolours = hmap->B_videoula.bytelut[hmap->A_videoula.shiftregister&0xFF];
          hmap->B_vidbuf.lineaddress += hmap->B_vidbuf.altoffset;
          hmap->A_vidbuf.writecode = 0x10;
        }
        else
          clipped = 1;
      }
      else
      {
        if (!(skip & CLIPPEDABOVESKIPFLAG))
        {
          hmap->B_videoula.bytecolours = hmap->B_videoula.bytelut[hmap->A_videoula.shiftregister&0xFF];
          hmap->B_vidbuf.lineaddress -= hmap->B_vidbuf.stride - hmap->B_vidbuf.altoffset;
          hmap->A_vidbuf.writecode = 0x20;
        }
        else
          clipped = 1;
      }
    }
    else
      clipped = 1;
  }
  else if (hmap->A_crtc.c9 > 0)
  {
    if (hmap->B_vidbuf.linelevel >= 64)
    {
      if (!(skip & CLIPPEDSKIPFLAG))
      {
        c9alt = hmap->A_crtc.c9 - 1;
        hmap->B_videoula.bytecolours = hmap->B_videoula.bytelut[(hmap->A_videoula.shiftregister>>24)&0xFF];
        hmap->B_vidbuf.lineaddress += hmap->B_vidbuf.altoffset;
        hmap->A_vidbuf.writecode = 0x10;
      }
      else
        clipped = 1;
    }
    else
    {
      if (!(skip & CLIPPEDABOVESKIPFLAG))
      {
        c9alt = hmap->A_crtc.c9 - 1;
        hmap->B_videoula.bytecolours = hmap->B_videoula.bytelut[(hmap->A_videoula.shiftregister>>24)&0xFF];
        hmap->B_vidbuf.lineaddress -= hmap->B_vidbuf.stride - hmap->B_vidbuf.altoffset;
        hmap->A_vidbuf.writecode = 0x20;
      }
      else
        clipped = 1;
    }
  }
  else
    clipped = 1;

  if (clipped)
    clipped = 0;
  else
  {
    altwritten = 1;
    hmap->B_vidbuf.linelevel = (hmap->B_vidbuf.linelevel+64)&127;

    if (!(c9alt & 8))
      hmap->B_vidbuf.graphicsinnerop(hmap);

    hmap->B_vidbuf.linelevel = (hmap->B_vidbuf.linelevel+64)&127;
    hmap->B_vidbuf.lineaddress = lineaddresscopy;
  }

  if (hmap->A_crtc.r[9] == hmap->A_crtc.r9image)
  {
    if (!hmap->A_crtc.fieldnumber)
    {
      if (hmap->B_vidbuf.linelevel >= 64)
      {
        if (!(skip & CLIPPEDBELOWSKIPFLAG))
        {
          hmap->B_videoula.bytecolours = hmap->B_videoula.bytelut[hmap->A_videoula.shiftregister&0xFF];
          hmap->B_vidbuf.lineaddress += hmap->B_vidbuf.stride + hmap->B_vidbuf.altoffset;
          hmap->A_vidbuf.writecode = 0x10;
        }
        else
          clipped = 1;
      }
      else
      {
        if (!(skip & CLIPPEDSKIPFLAG))
        {
          hmap->B_videoula.bytecolours = hmap->B_videoula.bytelut[hmap->A_videoula.shiftregister&0xFF];
          hmap->B_vidbuf.lineaddress += hmap->B_vidbuf.altoffset;
          hmap->A_vidbuf.writecode = 0x20;
        }
        else
          clipped = 1;
      }
    }
    else
      clipped = 1;
  }
  else if (hmap->A_crtc.c9 < hmap->A_crtc.r[9]+1)
  {
    if (hmap->B_vidbuf.linelevel >= 64)
    {
      if (!(skip & CLIPPEDBELOWSKIPFLAG))
      {
        c9alt = hmap->A_crtc.c9 + 1;
        hmap->B_videoula.bytecolours = hmap->B_videoula.bytelut[(hmap->A_videoula.shiftregister>>8)&0xFF];
        hmap->B_vidbuf.lineaddress += hmap->B_vidbuf.stride + hmap->B_vidbuf.altoffset;
        hmap->A_vidbuf.writecode = 0x10;
      }
      else
        clipped = 1;
    }
    else
    {
      if (!(skip & CLIPPEDSKIPFLAG))
      {
        c9alt = hmap->A_crtc.c9 + 1;
        hmap->B_videoula.bytecolours = hmap->B_videoula.bytelut[(hmap->A_videoula.shiftregister>>8)&0xFF];
        hmap->B_vidbuf.lineaddress += hmap->B_vidbuf.altoffset;
        hmap->A_vidbuf.writecode = 0x20;
      }
      else
        clipped = 1;
    }
  }
  else
    clipped = 1;

  if (!clipped)
  {
    altwritten = 1;
    hmap->B_vidbuf.linelevel = (hmap->B_vidbuf.linelevel+64)&127;

    if (!(c9alt & 8))
      hmap->B_vidbuf.graphicsinnerop(hmap);

    hmap->B_vidbuf.linelevel = (hmap->B_vidbuf.linelevel+64)&127;
    hmap->B_vidbuf.lineaddress = lineaddresscopy;
  }
  clipped = (skip & CLIPPEDSKIPFLAG) != 0;

  if (!clipped)
  {
    if (hmap->B_vidbuf.linelevel >= 64)
      hmap->A_vidbuf.writecode = 0x20;
    else
      hmap->A_vidbuf.writecode = 0x10;

    if (!(hmap->A_crtc.c9 & 8))
    {
      hmap->B_videoula.bytecolours = hmap->B_videoula.bytelut[hmap->A_videoula.shiftregister&0xFF];

      hmap->B_vidbuf.graphicsinnerop(hmap);
    }
    else if (altwritten)
    {
      hmap->B_videoula.cursorfill = hmap->B_videoula.normalblank;
      hmap->B_vidbuf.cursorinnerop(hmap);
      hmap->B_videoula.cursorfill = hmap->B_videoula.inverseblank;
    }
  }
  return videodisplayadvance(zmap);
}

R6502ZONEMAP* videowritepcursorgraphics(R6502ZONEMAP* zmap, uintptr_t peripheral_code)
{
  HOSTMAP* hmap = (HOSTMAP*)zmap;
  int clipped,cursoron,c9alt,altwritten;
  uintptr_t cursorbuffer,cursorflags;
  intptr_t lineaddresscopy;
  uint8_t skip;

  altwritten = 0;
  cursorbuffer = hmap->B_crtc.cursorbuffer;
  cursorflags = hmap->B_videoula.cursorflags;

  cursoron = 0;
  clipped = 0;
  lineaddresscopy = hmap->B_vidbuf.lineaddress;

  skip = hmap->A_vidbuf.skip;

  c9alt = hmap->A_crtc.c9;

  if (hmap->A_crtc.r[9] == hmap->A_crtc.r9image)
  {
    if (hmap->A_crtc.fieldnumber)
    {
      if (hmap->B_vidbuf.linelevel >= 64)
      {
        if (!(skip & CLIPPEDSKIPFLAG))
        {
          cursoron = (cursorflags & cursorbuffer) != 0;
          hmap->B_videoula.bytecolours = hmap->B_videoula.bytelut[hmap->A_videoula.shiftregister&0xFF];
          hmap->B_vidbuf.lineaddress += hmap->B_vidbuf.altoffset;
          hmap->A_vidbuf.writecode = 0x10;
        }
        else
          clipped = 1;
      }
      else
      {
        if (!(skip & CLIPPEDABOVESKIPFLAG))
        {
          cursoron = (cursorflags & cursorbuffer) != 0;
          hmap->B_videoula.bytecolours = hmap->B_videoula.bytelut[hmap->A_videoula.shiftregister&0xFF];
          hmap->B_vidbuf.lineaddress -= hmap->B_vidbuf.stride - hmap->B_vidbuf.altoffset;
          hmap->A_vidbuf.writecode = 0x20;
        }
        else
          clipped = 1;
      }
    }
    else
      clipped = 1;
  }
  else if (hmap->A_crtc.c9 > 0)
  {
    if (hmap->B_vidbuf.linelevel >= 64)
    {
      if (!(skip & CLIPPEDSKIPFLAG))
      {
        c9alt = hmap->A_crtc.c9 - 1;
        cursoron = (cursorflags & (cursorbuffer>>VIDEOCURSORSIGNALABOVESHIFT)) != 0;
        hmap->B_videoula.bytecolours = hmap->B_videoula.bytelut[(hmap->A_videoula.shiftregister>>24)&0xFF];
        hmap->B_vidbuf.lineaddress += hmap->B_vidbuf.altoffset;
        hmap->A_vidbuf.writecode = 0x10;
      }
      else
        clipped = 1;
    }
    else
    {
      if (!(skip & CLIPPEDABOVESKIPFLAG))
      {
        c9alt = hmap->A_crtc.c9 - 1;
        cursoron = (cursorflags & (cursorbuffer>>VIDEOCURSORSIGNALABOVESHIFT)) != 0;
        hmap->B_videoula.bytecolours = hmap->B_videoula.bytelut[(hmap->A_videoula.shiftregister>>24)&0xFF];
        hmap->B_vidbuf.lineaddress -= hmap->B_vidbuf.stride - hmap->B_vidbuf.altoffset;
        hmap->A_vidbuf.writecode = 0x20;
      }
      else
        clipped = 1;
    }
  }
  else
    clipped = 1;

  if (clipped)
    clipped = 0;
  else
  {
    altwritten = 1;
    hmap->B_vidbuf.linelevel = (hmap->B_vidbuf.linelevel+64)&127;

    if (!(c9alt & 8))
    {
      if (cursoron)
        selectinversegraphicscolour(hmap);
      hmap->B_vidbuf.graphicsinnerop(hmap);
      if (cursoron)
        selectnormalgraphicscolour(hmap);
    }
    else if (cursoron)
      hmap->B_vidbuf.cursorinnerop(hmap);

    hmap->B_vidbuf.linelevel = (hmap->B_vidbuf.linelevel+64)&127;
    hmap->B_vidbuf.lineaddress = lineaddresscopy;
  }

  if (hmap->A_crtc.r[9] == hmap->A_crtc.r9image)
  {
    if (!hmap->A_crtc.fieldnumber)
    {
      if (hmap->B_vidbuf.linelevel >= 64)
      {
        if (!(skip & CLIPPEDBELOWSKIPFLAG))
        {
          cursoron = (cursorflags & cursorbuffer) != 0;
          hmap->B_videoula.bytecolours = hmap->B_videoula.bytelut[hmap->A_videoula.shiftregister&0xFF];
          hmap->B_vidbuf.lineaddress += hmap->B_vidbuf.stride + hmap->B_vidbuf.altoffset;
          hmap->A_vidbuf.writecode = 0x10;
        }
        else
          clipped = 1;
      }
      else
      {
        if (!(skip & CLIPPEDSKIPFLAG))
        {
          cursoron = (cursorflags & cursorbuffer) != 0;
          hmap->B_videoula.bytecolours = hmap->B_videoula.bytelut[hmap->A_videoula.shiftregister&0xFF];
          hmap->B_vidbuf.lineaddress += hmap->B_vidbuf.altoffset;
          hmap->A_vidbuf.writecode = 0x20;
        }
        else
          clipped = 1;
      }
    }
    else
      clipped = 1;
  }
  else if (hmap->A_crtc.c9 < hmap->A_crtc.r[9]+1)
  {
    if (hmap->B_vidbuf.linelevel >= 64)
    {
      if (!(skip & CLIPPEDBELOWSKIPFLAG))
      {
        c9alt = hmap->A_crtc.c9 + 1;
        cursoron = (cursorflags & (cursorbuffer>>VIDEOCURSORSIGNALBELOWSHIFT)) != 0;
        hmap->B_videoula.bytecolours = hmap->B_videoula.bytelut[(hmap->A_videoula.shiftregister>>8)&0xFF];
        hmap->B_vidbuf.lineaddress += hmap->B_vidbuf.stride + hmap->B_vidbuf.altoffset;
        hmap->A_vidbuf.writecode = 0x10;
      }
      else
        clipped = 1;
    }
    else
    {
      if (!(skip & CLIPPEDSKIPFLAG))
      {
        c9alt = hmap->A_crtc.c9 + 1;
        cursoron = (cursorflags & (cursorbuffer>>VIDEOCURSORSIGNALBELOWSHIFT)) != 0;
        hmap->B_videoula.bytecolours = hmap->B_videoula.bytelut[(hmap->A_videoula.shiftregister>>8)&0xFF];
        hmap->B_vidbuf.lineaddress += hmap->B_vidbuf.altoffset;
        hmap->A_vidbuf.writecode = 0x20;
      }
      else
        clipped = 1;
    }
  }
  else
    clipped = 1;

  if (!clipped)
  {
    altwritten = 1;
    hmap->B_vidbuf.linelevel = (hmap->B_vidbuf.linelevel+64)&127;

    if (!(c9alt & 8))
    {
      if (cursoron)
        selectinversegraphicscolour(hmap);
      hmap->B_vidbuf.graphicsinnerop(hmap);
      if (cursoron)
        selectnormalgraphicscolour(hmap);
    }
    else if (cursoron)
      hmap->B_vidbuf.cursorinnerop(hmap);

    hmap->B_vidbuf.linelevel = (hmap->B_vidbuf.linelevel+64)&127;
    hmap->B_vidbuf.lineaddress = lineaddresscopy;
  }
  clipped = (skip & CLIPPEDSKIPFLAG) != 0;

  if (!clipped)
  {
    cursoron = (cursorflags & cursorbuffer) != 0;

    if (hmap->B_vidbuf.linelevel >= 64)
      hmap->A_vidbuf.writecode = 0x20;
    else
      hmap->A_vidbuf.writecode = 0x10;

    if (!(hmap->A_crtc.c9 & 8))
    {
      hmap->B_videoula.bytecolours = hmap->B_videoula.bytelut[hmap->A_videoula.shiftregister&0xFF];

      if (cursoron)
        selectinversegraphicscolour(hmap);
      hmap->B_vidbuf.graphicsinnerop(hmap);
      if (cursoron)
        selectnormalgraphicscolour(hmap);
    }
    else if (cursoron)
    {
      hmap->B_vidbuf.cursorinnerop(hmap);
    }
    else if (altwritten)
    {
      hmap->B_videoula.cursorfill = hmap->B_videoula.normalblank;
      hmap->B_vidbuf.cursorinnerop(hmap);
      hmap->B_videoula.cursorfill = hmap->B_videoula.inverseblank;
    }
  }
  return videodisplayadvance(zmap);
}

R6502ZONEMAP* videowritepteletext(R6502ZONEMAP* zmap, uintptr_t peripheral_code)
{
  HOSTMAP* hmap = (HOSTMAP*)zmap;
  int clipped,altwritten;
  intptr_t lineaddresscopy;
  uint8_t skip;

  altwritten = 0;

  clipped = 0;
  lineaddresscopy = hmap->B_vidbuf.lineaddress;

  skip = hmap->A_vidbuf.skip;

  if (hmap->B_vidbuf.linelevel >= 64)
  {
    if (hmap->A_teletext.roundingdirection2)
    {
      if (!(skip & CLIPPEDSKIPFLAG))
      {
        hmap->B_vidbuf.lineaddress += hmap->B_vidbuf.altoffset;
        hmap->A_vidbuf.writecode = 0x10;
      }
      else
        clipped = 1;
    }
    else
    {
      if (!(skip & CLIPPEDBELOWSKIPFLAG))
      {
        hmap->B_vidbuf.lineaddress += hmap->B_vidbuf.stride + hmap->B_vidbuf.altoffset;
        hmap->A_vidbuf.writecode = 0x50;
      }
      else
        clipped = 1;
    }
  }
  else
  {
    if (hmap->A_teletext.roundingdirection2)
    {
      if (!(skip & CLIPPEDABOVESKIPFLAG))
      {
        hmap->B_vidbuf.lineaddress -= hmap->B_vidbuf.stride - hmap->B_vidbuf.altoffset;
        hmap->A_vidbuf.writecode = 0x20;
      }
      else
        clipped = 1;
    }
    else
    {
      if (!(skip & CLIPPEDSKIPFLAG))
      {
        hmap->B_vidbuf.lineaddress += hmap->B_vidbuf.altoffset;
        hmap->A_vidbuf.writecode = 0x20;
      }
      else
        clipped = 1;
    }
  }

  if (!clipped)
  {
    altwritten = 1;
    hmap->B_vidbuf.linelevel = (hmap->B_vidbuf.linelevel+64)&127;
    if (hmap->A_teletext.roundingdirection2)
    {
      hmap->B_teletext.lue1 -= hmap->B_teletext.lowoffset;
      hmap->B_teletext.lue2 -= hmap->B_teletext.lowoffset;
    }
    else
    {
      hmap->B_teletext.lue1 += hmap->B_teletext.lowoffset;
      hmap->B_teletext.lue2 += hmap->B_teletext.lowoffset;
    }

    hmap->B_vidbuf.teletextinnerop(hmap);

    hmap->B_vidbuf.linelevel = (hmap->B_vidbuf.linelevel+64)&127;
    if (hmap->A_teletext.roundingdirection2)
    {
      hmap->B_teletext.lue1 += hmap->B_teletext.lowoffset;
      hmap->B_teletext.lue2 += hmap->B_teletext.lowoffset;
    }
    else
    {
      hmap->B_teletext.lue1 -= hmap->B_teletext.lowoffset;
      hmap->B_teletext.lue2 -= hmap->B_teletext.lowoffset;
    }

    hmap->B_vidbuf.lineaddress = lineaddresscopy;
  }
  clipped = (skip & CLIPPEDSKIPFLAG) != 0;

  if (!clipped)
  {
    if (hmap->B_vidbuf.linelevel >= 64)
      hmap->A_vidbuf.writecode = 0x20;
    else if (hmap->A_teletext.roundingdirection2)
      hmap->A_vidbuf.writecode = 0x50;
    else
      hmap->A_vidbuf.writecode = 0x10;

    hmap->B_vidbuf.teletextinnerop(hmap);
  }
  return videodisplayadvance(zmap);
}

R6502ZONEMAP* videowritepcursorteletext(R6502ZONEMAP* zmap, uintptr_t peripheral_code)
{
  HOSTMAP* hmap = (HOSTMAP*)zmap;
  int clipped,cursoron,altwritten;
  uintptr_t cursorbuffer,cursorflags;
  intptr_t lineaddresscopy;
  uint8_t skip;

  altwritten = 0;
  cursorbuffer = hmap->B_crtc.cursorbuffer;
  cursorflags = hmap->B_videoula.cursorflags;

  cursoron = 0;
  clipped = 0;
  lineaddresscopy = hmap->B_vidbuf.lineaddress;

  skip = hmap->A_vidbuf.skip;

  if (hmap->B_vidbuf.linelevel >= 64)
  {
    if (hmap->A_teletext.roundingdirection2)
    {
      if (!(skip & CLIPPEDSKIPFLAG))
      {
        cursoron = (cursorflags & (cursorbuffer>>VIDEOCURSORSIGNALABOVESHIFT)) != 0;
        hmap->B_vidbuf.lineaddress += hmap->B_vidbuf.altoffset;
        hmap->A_vidbuf.writecode = 0x10;
      }
      else
        clipped = 1;
    }
    else
    {
      if (!(skip & CLIPPEDBELOWSKIPFLAG))
      {
        cursoron = (cursorflags & (cursorbuffer>>VIDEOCURSORSIGNALBELOWSHIFT)) != 0;
        hmap->B_vidbuf.lineaddress += hmap->B_vidbuf.stride + hmap->B_vidbuf.altoffset;
        hmap->A_vidbuf.writecode = 0x50;
      }
      else
        clipped = 1;
    }
  }
  else
  {
    if (hmap->A_teletext.roundingdirection2)
    {
      if (!(skip & CLIPPEDABOVESKIPFLAG))
      {
        cursoron = (cursorflags & (cursorbuffer>>VIDEOCURSORSIGNALABOVESHIFT)) != 0;
        hmap->B_vidbuf.lineaddress -= hmap->B_vidbuf.stride - hmap->B_vidbuf.altoffset;
        hmap->A_vidbuf.writecode = 0x20;
      }
      else
        clipped = 1;
    }
    else
    {
      if (!(skip & CLIPPEDSKIPFLAG))
      {
        cursoron = (cursorflags & (cursorbuffer>>VIDEOCURSORSIGNALBELOWSHIFT)) != 0;
        hmap->B_vidbuf.lineaddress += hmap->B_vidbuf.altoffset;
        hmap->A_vidbuf.writecode = 0x20;
      }
      else
        clipped = 1;
    }
  }

  if (!clipped)
  {
    altwritten = 1;
    hmap->B_vidbuf.linelevel = (hmap->B_vidbuf.linelevel+64)&127;
    if (hmap->A_teletext.roundingdirection2)
    {
      hmap->B_teletext.lue1 -= hmap->B_teletext.lowoffset;
      hmap->B_teletext.lue2 -= hmap->B_teletext.lowoffset;
    }
    else
    {
      hmap->B_teletext.lue1 += hmap->B_teletext.lowoffset;
      hmap->B_teletext.lue2 += hmap->B_teletext.lowoffset;
    }

    if (cursoron)
      selectinverseteletextcolour(hmap);
    hmap->B_vidbuf.teletextinnerop(hmap);
    if (cursoron)
      selectnormalteletextcolour(hmap);

    hmap->B_vidbuf.linelevel = (hmap->B_vidbuf.linelevel+64)&127;
    if (hmap->A_teletext.roundingdirection2)
    {
      hmap->B_teletext.lue1 += hmap->B_teletext.lowoffset;
      hmap->B_teletext.lue2 += hmap->B_teletext.lowoffset;
    }
    else
    {
      hmap->B_teletext.lue1 -= hmap->B_teletext.lowoffset;
      hmap->B_teletext.lue2 -= hmap->B_teletext.lowoffset;
    }

    hmap->B_vidbuf.lineaddress = lineaddresscopy;
  }
  clipped = (skip & CLIPPEDSKIPFLAG) != 0;

  if (!clipped)
  {
    cursoron = (cursorflags & cursorbuffer) != 0;

    if (hmap->B_vidbuf.linelevel >= 64)
      hmap->A_vidbuf.writecode = 0x20;
    else if (hmap->A_teletext.roundingdirection2)
      hmap->A_vidbuf.writecode = 0x50;
    else
      hmap->A_vidbuf.writecode = 0x10;

    if (cursoron)
      selectinverseteletextcolour(hmap);
    hmap->B_vidbuf.teletextinnerop(hmap);
    if (cursoron)
      selectnormalteletextcolour(hmap);
  }
  return videodisplayadvance(zmap);
}

HOSTMAP* video4buf8halfdot1linegraphics(HOSTMAP* hmap)
{
  intptr_t buffer = hmap->B_vidbuf.lineaddress + (hmap->B_vidbuf.column<<4);
  const uint8_t* nybbles = (uint8_t*)hmap->D_colour.fragment;
  uintptr_t bc = hmap->B_videoula.bytecolours;
  unsigned int v0;

  v0 = nybbles[(bc>>28)&0xF];
  v0 |= (nybbles[(bc>>24)&0xF]<<4);
  v0 |= (nybbles[(bc>>20)&0xF]<<8);
  v0 |= (nybbles[(bc>>16)&0xF]<<12);
  v0 |= (nybbles[(bc>>12)&0xF]<<16);
  v0 |= (nybbles[(bc>>8)&0xF]<<20);
  v0 |= (nybbles[(bc>>4)&0xF]<<24);
  v0 |= (nybbles[bc&0xF]<<28);

  ((uint32_t*)buffer)[1] = v0;
  *(uint8_t*)buffer |= hmap->A_vidbuf.writecode;
  return hmap;
}

HOSTMAP* video4buf8halfdot1lineteletext(HOSTMAP* hmap)
{
  intptr_t buffer = hmap->B_vidbuf.lineaddress + (hmap->B_vidbuf.column<<4);
  uintptr_t fg2 = hmap->B_teletext.fg2fill;
  uintptr_t bg2 = hmap->B_teletext.bg2fill;
  const uint32_t* lue2 = (const uint32_t*)hmap->B_teletext.lue2;

  ((uint32_t*)buffer)[1] = (lue2[0] & fg2) | (~lue2[0] & bg2);
  *(uint8_t*)buffer |= hmap->A_vidbuf.writecode;
  return hmap;
}

HOSTMAP* video4buf8halfdot1lineteletextb(HOSTMAP* hmap)
{
  intptr_t buffer = hmap->B_vidbuf.lineaddress + (hmap->B_vidbuf.column<<4);
  uintptr_t fg1 = hmap->B_teletext.fg1fill;
  uintptr_t bg1 = hmap->B_teletext.bg1fill;
  uintptr_t fg2 = hmap->B_teletext.fg2fill;
  uintptr_t bg2 = hmap->B_teletext.bg2fill;
  const uint32_t* lue1 = (const uint32_t*)hmap->B_teletext.lue1;
  const uint32_t* lue2 = (const uint32_t*)hmap->B_teletext.lue2;

  ((uint32_t*)buffer)[1] = (uint32_t)(((lue1[0] & fg1) | (~lue1[0] & bg1)) << 24) | (((lue2[0] & fg2) | (~lue2[0] & bg2)) >> 8);
  *(uint8_t*)buffer |= hmap->A_vidbuf.writecode;
  return hmap;
}

HOSTMAP* video4buf8halfdot1linecursor(HOSTMAP* hmap)
{
  intptr_t buffer = hmap->B_vidbuf.lineaddress + (hmap->B_vidbuf.column<<4);

  ((uint32_t*)buffer)[1] = (uint32_t)hmap->B_videoula.cursorfill;
  *(uint8_t*)buffer |= hmap->A_vidbuf.writecode;
  return hmap;
}

HOSTMAP* video4buf8halfdot2linegraphics(HOSTMAP* hmap)
{
  intptr_t buffer = hmap->B_vidbuf.lineaddress + (hmap->B_vidbuf.column<<4);
  const uint8_t* nybbles = (uint8_t*)hmap->D_colour.fragment;
  uintptr_t bc = hmap->B_videoula.bytecolours;
  unsigned int v0;

  v0 = nybbles[(bc>>28)&0xF];
  v0 |= (nybbles[(bc>>24)&0xF]<<4);
  v0 |= (nybbles[(bc>>20)&0xF]<<8);
  v0 |= (nybbles[(bc>>16)&0xF]<<12);
  v0 |= (nybbles[(bc>>12)&0xF]<<16);
  v0 |= (nybbles[(bc>>8)&0xF]<<20);
  v0 |= (nybbles[(bc>>4)&0xF]<<24);
  v0 |= (nybbles[bc&0xF]<<28);
  
  ((uint32_t*)buffer)[2] = ((uint32_t*)buffer)[1] = v0;
  *(uint8_t*)buffer |= hmap->A_vidbuf.writecode;
  return hmap;
}

HOSTMAP* video4buf8halfdot2lineteletext(HOSTMAP* hmap)
{
  intptr_t buffer = hmap->B_vidbuf.lineaddress + (hmap->B_vidbuf.column<<4);
  uintptr_t fg2 = hmap->B_teletext.fg2fill;
  uintptr_t bg2 = hmap->B_teletext.bg2fill;
  const uint32_t* lue2 = (const uint32_t*)hmap->B_teletext.lue2;

  ((uint32_t*)buffer)[1] = (lue2[0] & fg2) | (~lue2[0] & bg2);
  ((uint32_t*)buffer)[2] = (lue2[2] & fg2) | (~lue2[2] & bg2);
  *(uint8_t*)buffer |= hmap->A_vidbuf.writecode;
  return hmap;
}

HOSTMAP* video4buf8halfdot2lineteletextb(HOSTMAP* hmap)
{
  intptr_t buffer = hmap->B_vidbuf.lineaddress + (hmap->B_vidbuf.column<<4);
  uintptr_t fg1 = hmap->B_teletext.fg1fill;
  uintptr_t bg1 = hmap->B_teletext.bg1fill;
  uintptr_t fg2 = hmap->B_teletext.fg2fill;
  uintptr_t bg2 = hmap->B_teletext.bg2fill;
  const uint32_t* lue1 = (const uint32_t*)hmap->B_teletext.lue1;
  const uint32_t* lue2 = (const uint32_t*)hmap->B_teletext.lue2;

  ((uint32_t*)buffer)[1] = (uint32_t)(((lue1[0] & fg1) | (~lue1[0] & bg1)) << 24) | (((lue2[0] & fg2) | (~lue2[0] & bg2)) >> 8);
  ((uint32_t*)buffer)[2] = (uint32_t)(((lue1[2] & fg1) | (~lue1[2] & bg1)) << 24) | (((lue2[2] & fg2) | (~lue2[2] & bg2)) >> 8);
  *(uint8_t*)buffer |= hmap->A_vidbuf.writecode;
  return hmap;
}

HOSTMAP* video4buf8halfdot2linecursor(HOSTMAP* hmap)
{
  intptr_t buffer = hmap->B_vidbuf.lineaddress + (hmap->B_vidbuf.column<<4);

  ((uint32_t*)buffer)[2] = ((uint32_t*)buffer)[1] = (uint32_t)hmap->B_videoula.cursorfill;
  *(uint8_t*)buffer |= hmap->A_vidbuf.writecode;
  return hmap;
}

HOSTMAP* video4buf8halfdot3linegraphics(HOSTMAP* hmap)
{
  intptr_t buffer = hmap->B_vidbuf.lineaddress + (hmap->B_vidbuf.column<<4);
  const uint8_t* nybbles = (uint8_t*)hmap->D_colour.fragment;
  uintptr_t bc = hmap->B_videoula.bytecolours;
  unsigned int v0;

  v0 = nybbles[(bc>>28)&0xF];
  v0 |= (nybbles[(bc>>24)&0xF]<<4);
  v0 |= (nybbles[(bc>>20)&0xF]<<8);
  v0 |= (nybbles[(bc>>16)&0xF]<<12);
  v0 |= (nybbles[(bc>>12)&0xF]<<16);
  v0 |= (nybbles[(bc>>8)&0xF]<<20);
  v0 |= (nybbles[(bc>>4)&0xF]<<24);
  v0 |= (nybbles[bc&0xF]<<28);

  ((uint32_t*)buffer)[3] = ((uint32_t*)buffer)[2] = ((uint32_t*)buffer)[1] = v0;
  *(uint8_t*)buffer |= hmap->A_vidbuf.writecode;
  return hmap;
}

HOSTMAP* video4buf8halfdot3lineteletext(HOSTMAP* hmap)
{
  intptr_t buffer = hmap->B_vidbuf.lineaddress + (hmap->B_vidbuf.column<<4);
  uintptr_t fg2 = hmap->B_teletext.fg2fill;
  uintptr_t bg2 = hmap->B_teletext.bg2fill;
  const uint32_t* lue2 = (const uint32_t*)hmap->B_teletext.lue2;

  ((uint32_t*)buffer)[1] = (lue2[0] & fg2) | (~lue2[0] & bg2);
  ((uint32_t*)buffer)[2] = (lue2[2] & fg2) | (~lue2[2] & bg2);
  ((uint32_t*)buffer)[3] = (lue2[4] & fg2) | (~lue2[4] & bg2);
  *(uint8_t*)buffer |= hmap->A_vidbuf.writecode;
  return hmap;
}

HOSTMAP* video4buf8halfdot3lineteletextb(HOSTMAP* hmap)
{
  intptr_t buffer = hmap->B_vidbuf.lineaddress + (hmap->B_vidbuf.column<<4);
  uintptr_t fg1 = hmap->B_teletext.fg1fill;
  uintptr_t bg1 = hmap->B_teletext.bg1fill;
  uintptr_t fg2 = hmap->B_teletext.fg2fill;
  uintptr_t bg2 = hmap->B_teletext.bg2fill;
  const uint32_t* lue1 = (const uint32_t*)hmap->B_teletext.lue1;
  const uint32_t* lue2 = (const uint32_t*)hmap->B_teletext.lue2;

  ((uint32_t*)buffer)[1] = (uint32_t)(((lue1[0] & fg1) | (~lue1[0] & bg1)) << 24) | (((lue2[0] & fg2) | (~lue2[0] & bg2)) >> 8);
  ((uint32_t*)buffer)[2] = (uint32_t)(((lue1[2] & fg1) | (~lue1[2] & bg1)) << 24) | (((lue2[2] & fg2) | (~lue2[2] & bg2)) >> 8);
  ((uint32_t*)buffer)[3] = (uint32_t)(((lue1[4] & fg1) | (~lue1[4] & bg1)) << 24) | (((lue2[4] & fg2) | (~lue2[4] & bg2)) >> 8);
  *(uint8_t*)buffer |= hmap->A_vidbuf.writecode;
  return hmap;
}

HOSTMAP* video4buf8halfdot3linecursor(HOSTMAP* hmap)
{
  intptr_t buffer = hmap->B_vidbuf.lineaddress + (hmap->B_vidbuf.column<<4);

  ((uint32_t*)buffer)[3] = ((uint32_t*)buffer)[2] = ((uint32_t*)buffer)[1] = (uint32_t)hmap->B_videoula.cursorfill;
  *(uint8_t*)buffer |= hmap->A_vidbuf.writecode;
  return hmap;
}

HOSTMAP* video4buf12quarterdot1linegraphics(HOSTMAP* hmap)
{
  intptr_t buffer = hmap->B_vidbuf.lineaddress + (hmap->B_vidbuf.column<<4);
  const uint8_t* nybbles = (uint8_t*)hmap->D_colour.fragment;
  uintptr_t bc = hmap->B_videoula.bytecolours;
  unsigned int v0;

  v0 = nybbles[(bc>>28)&0xF];
  v0 |= (nybbles[(bc>>20)&0xF]<<12);
  v0 |= (nybbles[(bc>>12)&0xF]<<24);
  v0 |= (v0<<4);
  v0 |= (nybbles[(bc>>24)&0xF]<<8);
  v0 |= (nybbles[(bc>>16)&0xF]<<20);
  ((uint32_t*)buffer)[1] = v0;

  v0 = (nybbles[(bc>>4)&0xF]<<4);
  v0 |= (v0<<4);
  v0 |= nybbles[(bc>>8)&0xF];
  v0 |= (nybbles[bc&0xF]<<12);
  ((uint32_t*)buffer)[2] = v0;

  *(uint8_t*)buffer |= hmap->A_vidbuf.writecode;
  return hmap;
}

HOSTMAP* video4buf12quarterdot1lineteletext(HOSTMAP* hmap)
{
  intptr_t buffer = hmap->B_vidbuf.lineaddress + (hmap->B_vidbuf.column<<4);
  uintptr_t fg2 = hmap->B_teletext.fg2fill;
  uintptr_t bg2 = hmap->B_teletext.bg2fill;
  const uint32_t* lue2 = (const uint32_t*)hmap->B_teletext.lue2;

  ((uint32_t*)buffer)[1] = (lue2[0] & fg2) | (~lue2[0] & bg2);
  ((uint32_t*)buffer)[2] = (lue2[1] & fg2) | ((lue2[1]^0xFFFF) & bg2);
  *(uint8_t*)buffer |= hmap->A_vidbuf.writecode;
  return hmap;
}

HOSTMAP* video4buf12quarterdot1lineteletextb(HOSTMAP* hmap)
{
  intptr_t buffer = hmap->B_vidbuf.lineaddress + (hmap->B_vidbuf.column<<4);
  uintptr_t fg1 = hmap->B_teletext.fg1fill;
  uintptr_t bg1 = hmap->B_teletext.bg1fill;
  uintptr_t fg2 = hmap->B_teletext.fg2fill;
  uintptr_t bg2 = hmap->B_teletext.bg2fill;
  const uint32_t* lue1 = (const uint32_t*)hmap->B_teletext.lue1;
  const uint32_t* lue2 = (const uint32_t*)hmap->B_teletext.lue2;

  ((uint32_t*)buffer)[1] = (uint32_t)(((lue2[1] & fg2) | (~lue2[1] & bg2))<<16) | (((lue2[0] & fg2) | (~lue2[0] & bg2))>>16);
  ((uint32_t*)buffer)[2] = ((lue1[0] & fg1) | (~lue1[0] & bg1)) & 0xFFFF;
  *(uint8_t*)buffer |= hmap->A_vidbuf.writecode;
  return hmap;
}

HOSTMAP* video4buf12quarterdot1linecursor(HOSTMAP* hmap)
{
  intptr_t buffer = hmap->B_vidbuf.lineaddress + (hmap->B_vidbuf.column<<4);

  ((uint32_t*)buffer)[1] = (uint32_t)hmap->B_videoula.cursorfill;
  ((uint32_t*)buffer)[2] = (uint32_t)hmap->B_videoula.cursorfill & 0x0000FFFF;
  *(uint8_t*)buffer |= hmap->A_vidbuf.writecode;
  return hmap;
}

HOSTMAP* video4buf12quarterdot2linegraphics(HOSTMAP* hmap)
{
  intptr_t buffer = hmap->B_vidbuf.lineaddress + (hmap->B_vidbuf.column<<6);
  const uint8_t* nybbles = (uint8_t*)hmap->D_colour.fragment;
  uintptr_t bc = hmap->B_videoula.bytecolours;
  unsigned int v0;

  v0 = nybbles[(bc>>28)&0xF];
  v0 |= (nybbles[(bc>>20)&0xF]<<12);
  v0 |= (nybbles[(bc>>12)&0xF]<<24);
  v0 |= (v0<<4);
  v0 |= (nybbles[(bc>>24)&0xF]<<8);
  v0 |= (nybbles[(bc>>16)&0xF]<<20);
  ((uint32_t*)buffer)[3] = ((uint32_t*)buffer)[1] = v0;

  v0 = (nybbles[(bc>>4)&0xF]<<4);
  v0 |= (v0<<4);
  v0 |= nybbles[(bc>>8)&0xF];
  v0 |= (nybbles[bc&0xF]<<12);
  ((uint32_t*)buffer)[4] = ((uint32_t*)buffer)[2] = v0;

  *(uint8_t*)buffer |= hmap->A_vidbuf.writecode;
  return hmap;
}

HOSTMAP* video4buf12quarterdot2lineteletext(HOSTMAP* hmap)
{
  intptr_t buffer = hmap->B_vidbuf.lineaddress + (hmap->B_vidbuf.column<<6);
  uintptr_t fg2 = hmap->B_teletext.fg2fill;
  uintptr_t bg2 = hmap->B_teletext.bg2fill;
  const uint32_t* lue2 = (const uint32_t*)hmap->B_teletext.lue2;

  ((uint32_t*)buffer)[1] = (lue2[0] & fg2) | (~lue2[0] & bg2);
  ((uint32_t*)buffer)[2] = (lue2[1] & fg2) | ((lue2[1]^0xFFFF) & bg2);
  ((uint32_t*)buffer)[3] = (lue2[4] & fg2) | (~lue2[4] & bg2);
  ((uint32_t*)buffer)[4] = (lue2[5] & fg2) | ((lue2[5]^0xFFFF) & bg2);
  *(uint8_t*)buffer |= hmap->A_vidbuf.writecode;
  return hmap;
}

HOSTMAP* video4buf12quarterdot2lineteletextb(HOSTMAP* hmap)
{
  intptr_t buffer = hmap->B_vidbuf.lineaddress + (hmap->B_vidbuf.column<<6);
  uintptr_t fg1 = hmap->B_teletext.fg1fill;
  uintptr_t bg1 = hmap->B_teletext.bg1fill;
  uintptr_t fg2 = hmap->B_teletext.fg2fill;
  uintptr_t bg2 = hmap->B_teletext.bg2fill;
  const uint32_t* lue1 = (const uint32_t*)hmap->B_teletext.lue1;
  const uint32_t* lue2 = (const uint32_t*)hmap->B_teletext.lue2;

  ((uint32_t*)buffer)[1] = (uint32_t)(((lue2[1] & fg2) | (~lue2[1] & bg2))<<16) | (((lue2[0] & fg2) | (~lue2[0] & bg2))>>16);
  ((uint32_t*)buffer)[2] = ((lue1[0] & fg1) | (~lue1[0] & bg1)) & 0xFFFF;
  ((uint32_t*)buffer)[3] = (uint32_t)(((lue2[5] & fg2) | (~lue2[5] & bg2))<<16) | (((lue2[4] & fg2) | (~lue2[4] & bg2))>>16);
  ((uint32_t*)buffer)[4] = ((lue1[4] & fg1) | (~lue1[4] & bg1)) & 0xFFFF;
  *(uint8_t*)buffer |= hmap->A_vidbuf.writecode;
  return hmap;
}

HOSTMAP* video4buf12quarterdot2linecursor(HOSTMAP* hmap)
{
  intptr_t buffer = hmap->B_vidbuf.lineaddress + (hmap->B_vidbuf.column<<6);

  ((uint32_t*)buffer)[3] = ((uint32_t*)buffer)[1] = (uint32_t)hmap->B_videoula.cursorfill;
  ((uint32_t*)buffer)[4] = ((uint32_t*)buffer)[2] = (uint32_t)hmap->B_videoula.cursorfill & 0x0000FFFF;
  *(uint8_t*)buffer |= hmap->A_vidbuf.writecode;
  return hmap;
}

HOSTMAP* video4buf12quarterdot3linegraphics(HOSTMAP* hmap)
{
  intptr_t buffer = hmap->B_vidbuf.lineaddress + (hmap->B_vidbuf.column<<6);
  const uint8_t* nybbles = (uint8_t*)hmap->D_colour.fragment;
  uintptr_t bc = hmap->B_videoula.bytecolours;
  unsigned int v0;

  v0 = nybbles[(bc>>28)&0xF];
  v0 |= (nybbles[(bc>>20)&0xF]<<12);
  v0 |= (nybbles[(bc>>12)&0xF]<<24);
  v0 |= (v0<<4);
  v0 |= (nybbles[(bc>>24)&0xF]<<8);
  v0 |= (nybbles[(bc>>16)&0xF]<<20);
  ((uint32_t*)buffer)[5] = ((uint32_t*)buffer)[3] = ((uint32_t*)buffer)[1] = v0;

  v0 = (nybbles[(bc>>4)&0xF]<<4);
  v0 |= (v0<<4);
  v0 |= nybbles[(bc>>8)&0xF];
  v0 |= (nybbles[bc&0xF]<<12);
  ((uint32_t*)buffer)[6] = ((uint32_t*)buffer)[4] = ((uint32_t*)buffer)[2] = v0;

  *(uint8_t*)buffer |= hmap->A_vidbuf.writecode;
  return hmap;
}

HOSTMAP* video4buf12quarterdot3lineteletext(HOSTMAP* hmap)
{
  intptr_t buffer = hmap->B_vidbuf.lineaddress + (hmap->B_vidbuf.column<<6);
  uintptr_t fg2 = hmap->B_teletext.fg2fill;
  uintptr_t bg2 = hmap->B_teletext.bg2fill;
  const uint32_t* lue2 = (const uint32_t*)hmap->B_teletext.lue2;

  ((uint32_t*)buffer)[1] = (lue2[0] & fg2) | (~lue2[0] & bg2);
  ((uint32_t*)buffer)[2] = (lue2[1] & fg2) | ((lue2[1]^0xFFFF) & bg2);
  ((uint32_t*)buffer)[3] = (lue2[4] & fg2) | (~lue2[4] & bg2);
  ((uint32_t*)buffer)[4] = (lue2[5] & fg2) | ((lue2[5]^0xFFFF) & bg2);
  ((uint32_t*)buffer)[5] = (lue2[8] & fg2) | (~lue2[8] & bg2);
  ((uint32_t*)buffer)[6] = (lue2[9] & fg2) | ((lue2[9]^0xFFFF) & bg2);
  *(uint8_t*)buffer |= hmap->A_vidbuf.writecode;
  return hmap;
}

HOSTMAP* video4buf12quarterdot3lineteletextb(HOSTMAP* hmap)
{
  intptr_t buffer = hmap->B_vidbuf.lineaddress + (hmap->B_vidbuf.column<<6);
  uintptr_t fg1 = hmap->B_teletext.fg1fill;
  uintptr_t bg1 = hmap->B_teletext.bg1fill;
  uintptr_t fg2 = hmap->B_teletext.fg2fill;
  uintptr_t bg2 = hmap->B_teletext.bg2fill;
  const uint32_t* lue1 = (const uint32_t*)hmap->B_teletext.lue1;
  const uint32_t* lue2 = (const uint32_t*)hmap->B_teletext.lue2;

  ((uint32_t*)buffer)[1] = (uint32_t)(((lue2[1] & fg2) | (~lue2[1] & bg2))<<16) | (((lue2[0] & fg2) | (~lue2[0] & bg2))>>16);
  ((uint32_t*)buffer)[2] = ((lue1[0] & fg1) | (~lue1[0] & bg1)) & 0xFFFF;
  ((uint32_t*)buffer)[3] = (uint32_t)(((lue2[5] & fg2) | (~lue2[5] & bg2))<<16) | (((lue2[4] & fg2) | (~lue2[4] & bg2))>>16);
  ((uint32_t*)buffer)[4] = ((lue1[4] & fg1) | (~lue1[4] & bg1)) & 0xFFFF;
  ((uint32_t*)buffer)[5] = (uint32_t)(((lue2[9] & fg2) | (~lue2[9] & bg2))<<16) | (((lue2[8] & fg2) | (~lue2[8] & bg2))>>16);
  ((uint32_t*)buffer)[6] = ((lue1[8] & fg1) | (~lue1[8] & bg1)) & 0xFFFF;
  *(uint8_t*)buffer |= hmap->A_vidbuf.writecode;
  return hmap;
}

HOSTMAP* video4buf12quarterdot3linecursor(HOSTMAP* hmap)
{
  intptr_t buffer = hmap->B_vidbuf.lineaddress + (hmap->B_vidbuf.column<<6);

  ((uint32_t*)buffer)[5] = ((uint32_t*)buffer)[3] = ((uint32_t*)buffer)[1] = (uint32_t)hmap->B_videoula.cursorfill;
  ((uint32_t*)buffer)[6] = ((uint32_t*)buffer)[4] = ((uint32_t*)buffer)[2] = (uint32_t)hmap->B_videoula.cursorfill & 0x0000FFFF;
  *(uint8_t*)buffer |= hmap->A_vidbuf.writecode;
  return hmap;
}

HOSTMAP* video4buf24eighthdot1linegraphics(HOSTMAP* hmap)
{
  intptr_t buffer = hmap->B_vidbuf.lineaddress + (hmap->B_vidbuf.column<<4);
  const uint8_t* nybbles = (uint8_t*)hmap->D_colour.fragment;
  uintptr_t bc = hmap->B_videoula.bytecolours;
  unsigned int v0;

  v0 = nybbles[(bc>>28)&0xF];
  v0 |= (nybbles[(bc>>24)&0xF]<<12);
  v0 |= (v0<<4);
  v0 |= (nybbles[(bc>>20)&0xF]<<24);
  ((uint32_t*)buffer)[1] = v0;

  v0 >>= 28;
  v0 |= (nybbles[(bc>>16)&0xF]<<8);
  v0 |= (nybbles[(bc>>12)&0xF]<<20);
  v0 |= (v0>>4);
  v0 |= ((nybbles[(bc>>8)&0xF]>>4)<<28);
  ((uint32_t*)buffer)[2] = v0;

  v0 >>= 28;
  v0 |= (nybbles[(bc>>4)&0xF]<<8);
  v0 |= (nybbles[bc&0xF]<<20);
  v0 |= (v0<<4);
  ((uint32_t*)buffer)[3] = v0;

  *(uint8_t*)buffer |= hmap->A_vidbuf.writecode;
  return hmap;
}

HOSTMAP* video4buf24eighthdot1lineteletext(HOSTMAP* hmap)
{
  intptr_t buffer = hmap->B_vidbuf.lineaddress + (hmap->B_vidbuf.column<<4);
  uintptr_t fg2 = hmap->B_teletext.fg2fill;
  uintptr_t bg2 = hmap->B_teletext.bg2fill;
  const uint32_t* lue2 = (const uint32_t*)hmap->B_teletext.lue2;

  ((uint32_t*)buffer)[1] = (lue2[0] & fg2) | (~lue2[0] & bg2);
  ((uint32_t*)buffer)[2] = (lue2[1] & fg2) | (~lue2[1] & bg2);
  ((uint32_t*)buffer)[3] = (lue2[2] & fg2) | (~lue2[2] & bg2);
  *(uint8_t*)buffer |= hmap->A_vidbuf.writecode;
  return hmap;
}

HOSTMAP* video4buf24eighthdot1lineteletextb(HOSTMAP* hmap)
{
  intptr_t buffer = hmap->B_vidbuf.lineaddress + (hmap->B_vidbuf.column<<4);
  uintptr_t fg1 = hmap->B_teletext.fg1fill;
  uintptr_t bg1 = hmap->B_teletext.bg1fill;
  uintptr_t fg2 = hmap->B_teletext.fg2fill;
  uintptr_t bg2 = hmap->B_teletext.bg2fill;
  const uint32_t* lue1 = (const uint32_t*)hmap->B_teletext.lue1;
  const uint32_t* lue2 = (const uint32_t*)hmap->B_teletext.lue2;

  ((uint32_t*)buffer)[1] = (uint32_t)(((lue2[1] & fg2) | (~lue2[1] & bg2)) << 8) | (((lue2[0] & fg2) | (~lue2[0] & bg2)) >> 24);
  ((uint32_t*)buffer)[2] = (uint32_t)(((lue2[2] & fg2) | (~lue2[2] & bg2)) << 8) | (((lue2[1] & fg2) | (~lue2[1] & bg2)) >> 24);
  ((uint32_t*)buffer)[3] = (uint32_t)(((lue1[0] & fg1) | (~lue1[0] & bg1)) << 8) | (((lue2[2] & fg2) | (~lue2[2] & bg2)) >> 24);
  *(uint8_t*)buffer |= hmap->A_vidbuf.writecode;
  return hmap;
}

HOSTMAP* video4buf24eighthdot1linecursor(HOSTMAP* hmap)
{
  intptr_t buffer = hmap->B_vidbuf.lineaddress + (hmap->B_vidbuf.column<<4);

  ((uint32_t*)buffer)[3] = ((uint32_t*)buffer)[2] = ((uint32_t*)buffer)[1] = (uint32_t)hmap->B_videoula.cursorfill;
  *(uint8_t*)buffer |= hmap->A_vidbuf.writecode;
  return hmap;
}

HOSTMAP* video4buf24eighthdot2linegraphics(HOSTMAP* hmap)
{
  intptr_t buffer = hmap->B_vidbuf.lineaddress + (hmap->B_vidbuf.column<<6);
  const uint8_t* nybbles = (uint8_t*)hmap->D_colour.fragment;
  uintptr_t bc = hmap->B_videoula.bytecolours;
  unsigned int v0;

  v0 = nybbles[(bc>>28)&0xF];
  v0 |= (nybbles[(bc>>24)&0xF]<<12);
  v0 |= (v0<<4);
  v0 |= (nybbles[(bc>>20)&0xF]<<24);
  ((uint32_t*)buffer)[4] = ((uint32_t*)buffer)[1] = v0;

  v0 >>= 28;
  v0 |= (nybbles[(bc>>16)&0xF]<<8);
  v0 |= (nybbles[(bc>>12)&0xF]<<20);
  v0 |= (v0>>4);
  v0 |= ((nybbles[(bc>>8)&0xF]>>4)<<28);
  ((uint32_t*)buffer)[5] = ((uint32_t*)buffer)[2] = v0;

  v0 >>= 28;
  v0 |= (nybbles[(bc>>4)&0xF]<<8);
  v0 |= (nybbles[bc&0xF]<<20);
  v0 |= (v0<<4);
  ((uint32_t*)buffer)[6] = ((uint32_t*)buffer)[3] = v0;

  *(uint8_t*)buffer |= hmap->A_vidbuf.writecode;
  return hmap;
}

HOSTMAP* video4buf24eighthdot2lineteletext(HOSTMAP* hmap)
{
  intptr_t buffer = hmap->B_vidbuf.lineaddress + (hmap->B_vidbuf.column<<6);
  uintptr_t fg2 = hmap->B_teletext.fg2fill;
  uintptr_t bg2 = hmap->B_teletext.bg2fill;
  const uint32_t* lue2 = (const uint32_t*)hmap->B_teletext.lue2;

  ((uint32_t*)buffer)[1] = (lue2[0] & fg2) | (~lue2[0] & bg2);
  ((uint32_t*)buffer)[2] = (lue2[1] & fg2) | (~lue2[1] & bg2);
  ((uint32_t*)buffer)[3] = (lue2[2] & fg2) | (~lue2[2] & bg2);
  ((uint32_t*)buffer)[4] = (lue2[6] & fg2) | (~lue2[6] & bg2);
  ((uint32_t*)buffer)[5] = (lue2[7] & fg2) | (~lue2[7] & bg2);
  ((uint32_t*)buffer)[6] = (lue2[8] & fg2) | (~lue2[8] & bg2);
  *(uint8_t*)buffer |= hmap->A_vidbuf.writecode;
  return hmap;
}

HOSTMAP* video4buf24eighthdot2lineteletextb(HOSTMAP* hmap)
{
  intptr_t buffer = hmap->B_vidbuf.lineaddress + (hmap->B_vidbuf.column<<6);
  uintptr_t fg1 = hmap->B_teletext.fg1fill;
  uintptr_t bg1 = hmap->B_teletext.bg1fill;
  uintptr_t fg2 = hmap->B_teletext.fg2fill;
  uintptr_t bg2 = hmap->B_teletext.bg2fill;
  const uint32_t* lue1 = (const uint32_t*)hmap->B_teletext.lue1;
  const uint32_t* lue2 = (const uint32_t*)hmap->B_teletext.lue2;

  ((uint32_t*)buffer)[1] = (uint32_t)(((lue2[1] & fg2) | (~lue2[1] & bg2)) << 8) | (((lue2[0] & fg2) | (~lue2[0] & bg2)) >> 24);
  ((uint32_t*)buffer)[2] = (uint32_t)(((lue2[2] & fg2) | (~lue2[2] & bg2)) << 8) | (((lue2[1] & fg2) | (~lue2[1] & bg2)) >> 24);
  ((uint32_t*)buffer)[3] = (uint32_t)(((lue1[0] & fg1) | (~lue1[0] & bg1)) << 8) | (((lue2[2] & fg2) | (~lue2[2] & bg2)) >> 24);
  ((uint32_t*)buffer)[4] = (uint32_t)(((lue2[7] & fg2) | (~lue2[7] & bg2)) << 8) | (((lue2[6] & fg2) | (~lue2[6] & bg2)) >> 24);
  ((uint32_t*)buffer)[5] = (uint32_t)(((lue2[8] & fg2) | (~lue2[8] & bg2)) << 8) | (((lue2[7] & fg2) | (~lue2[7] & bg2)) >> 24);
  ((uint32_t*)buffer)[6] = (uint32_t)(((lue1[6] & fg1) | (~lue1[6] & bg1)) << 8) | (((lue2[8] & fg2) | (~lue2[8] & bg2)) >> 24);
  *(uint8_t*)buffer |= hmap->A_vidbuf.writecode;
  return hmap;
}

HOSTMAP* video4buf24eighthdot2linecursor(HOSTMAP* hmap)
{
  intptr_t buffer = hmap->B_vidbuf.lineaddress + (hmap->B_vidbuf.column<<6);

  ((uint32_t*)buffer)[6] = ((uint32_t*)buffer)[5] = ((uint32_t*)buffer)[4] = ((uint32_t*)buffer)[3] = ((uint32_t*)buffer)[2] = ((uint32_t*)buffer)[1] = (uint32_t)hmap->B_videoula.cursorfill;
  *(uint8_t*)buffer |= hmap->A_vidbuf.writecode;
  return hmap;
}

HOSTMAP* video4buf24eighthdot3linegraphics(HOSTMAP* hmap)
{
  intptr_t buffer = hmap->B_vidbuf.lineaddress + (hmap->B_vidbuf.column<<6);
  const uint8_t* nybbles = (uint8_t*)hmap->D_colour.fragment;
  uintptr_t bc = hmap->B_videoula.bytecolours;
  unsigned int v0;

  v0 = nybbles[(bc>>28)&0xF];
  v0 |= (nybbles[(bc>>24)&0xF]<<12);
  v0 |= (v0<<4);
  v0 |= (nybbles[(bc>>20)&0xF]<<24);
  ((uint32_t*)buffer)[7] = ((uint32_t*)buffer)[4] = ((uint32_t*)buffer)[1] = v0;

  v0 >>= 28;
  v0 |= (nybbles[(bc>>16)&0xF]<<8);
  v0 |= (nybbles[(bc>>12)&0xF]<<20);
  v0 |= (v0>>4);
  v0 |= ((nybbles[(bc>>8)&0xF]>>4)<<28);
  ((uint32_t*)buffer)[8] = ((uint32_t*)buffer)[5] = ((uint32_t*)buffer)[2] = v0;

  v0 >>= 28;
  v0 |= (nybbles[(bc>>4)&0xF]<<8);
  v0 |= (nybbles[bc&0xF]<<20);
  v0 |= (v0<<4);
  ((uint32_t*)buffer)[9] = ((uint32_t*)buffer)[6] = ((uint32_t*)buffer)[3] = v0;

  *(uint8_t*)buffer |= hmap->A_vidbuf.writecode;
  return hmap;
}

HOSTMAP* video4buf24eighthdot3lineteletext(HOSTMAP* hmap)
{
  intptr_t buffer = hmap->B_vidbuf.lineaddress + (hmap->B_vidbuf.column<<6);
  uintptr_t fg2 = hmap->B_teletext.fg2fill;
  uintptr_t bg2 = hmap->B_teletext.bg2fill;
  const uint32_t* lue2 = (const uint32_t*)hmap->B_teletext.lue2;

  ((uint32_t*)buffer)[1] = (lue2[0] & fg2) | (~lue2[0] & bg2);
  ((uint32_t*)buffer)[2] = (lue2[1] & fg2) | (~lue2[1] & bg2);
  ((uint32_t*)buffer)[3] = (lue2[2] & fg2) | (~lue2[2] & bg2);
  ((uint32_t*)buffer)[4] = (lue2[6] & fg2) | (~lue2[6] & bg2);
  ((uint32_t*)buffer)[5] = (lue2[7] & fg2) | (~lue2[7] & bg2);
  ((uint32_t*)buffer)[6] = (lue2[8] & fg2) | (~lue2[8] & bg2);
  ((uint32_t*)buffer)[7] = (lue2[12] & fg2) | (~lue2[12] & bg2);
  ((uint32_t*)buffer)[8] = (lue2[13] & fg2) | (~lue2[13] & bg2);
  ((uint32_t*)buffer)[9] = (lue2[14] & fg2) | (~lue2[14] & bg2);
  *(uint8_t*)buffer |= hmap->A_vidbuf.writecode;
  return hmap;
}

HOSTMAP* video4buf24eighthdot3lineteletextb(HOSTMAP* hmap)
{
  intptr_t buffer = hmap->B_vidbuf.lineaddress + (hmap->B_vidbuf.column<<6);
  uintptr_t fg1 = hmap->B_teletext.fg1fill;
  uintptr_t bg1 = hmap->B_teletext.bg1fill;
  uintptr_t fg2 = hmap->B_teletext.fg2fill;
  uintptr_t bg2 = hmap->B_teletext.bg2fill;
  const uint32_t* lue1 = (const uint32_t*)hmap->B_teletext.lue1;
  const uint32_t* lue2 = (const uint32_t*)hmap->B_teletext.lue2;

  ((uint32_t*)buffer)[1] = (uint32_t)(((lue2[1] & fg2) | (~lue2[1] & bg2)) << 8) | (((lue2[0] & fg2) | (~lue2[0] & bg2)) >> 24);
  ((uint32_t*)buffer)[2] = (uint32_t)(((lue2[2] & fg2) | (~lue2[2] & bg2)) << 8) | (((lue2[1] & fg2) | (~lue2[1] & bg2)) >> 24);
  ((uint32_t*)buffer)[3] = (uint32_t)(((lue1[0] & fg1) | (~lue1[0] & bg1)) << 8) | (((lue2[2] & fg2) | (~lue2[2] & bg2)) >> 24);
  ((uint32_t*)buffer)[4] = (uint32_t)(((lue2[7] & fg2) | (~lue2[7] & bg2)) << 8) | (((lue2[6] & fg2) | (~lue2[6] & bg2)) >> 24);
  ((uint32_t*)buffer)[5] = (uint32_t)(((lue2[8] & fg2) | (~lue2[8] & bg2)) << 8) | (((lue2[7] & fg2) | (~lue2[7] & bg2)) >> 24);
  ((uint32_t*)buffer)[6] = (uint32_t)(((lue1[6] & fg1) | (~lue1[6] & bg1)) << 8) | (((lue2[8] & fg2) | (~lue2[8] & bg2)) >> 24);
  ((uint32_t*)buffer)[7] = (uint32_t)(((lue2[13] & fg2) | (~lue2[13] & bg2)) << 8) | (((lue2[12] & fg2) | (~lue2[12] & bg2)) >> 24);
  ((uint32_t*)buffer)[8] = (uint32_t)(((lue2[14] & fg2) | (~lue2[14] & bg2)) << 8) | (((lue2[13] & fg2) | (~lue2[13] & bg2)) >> 24);
  ((uint32_t*)buffer)[9] = (uint32_t)(((lue1[12] & fg1) | (~lue1[12] & bg1)) << 8) | (((lue2[14] & fg2) | (~lue2[14] & bg2)) >> 24);
  *(uint8_t*)buffer |= hmap->A_vidbuf.writecode;
  return hmap;
}

HOSTMAP* video4buf24eighthdot3linecursor(HOSTMAP* hmap)
{
  intptr_t buffer = hmap->B_vidbuf.lineaddress + (hmap->B_vidbuf.column<<6);

  ((uint32_t*)buffer)[9] = ((uint32_t*)buffer)[8] = ((uint32_t*)buffer)[7] = ((uint32_t*)buffer)[6] = ((uint32_t*)buffer)[5] = ((uint32_t*)buffer)[4] = ((uint32_t*)buffer)[3] = ((uint32_t*)buffer)[2] = ((uint32_t*)buffer)[1] = (uint32_t)hmap->B_videoula.cursorfill;
  *(uint8_t*)buffer |= hmap->A_vidbuf.writecode;
  return hmap;
}


VIDEOWRITEINNEROPS video4buf8halfdot1linefunctions = {
  video4buf8halfdot1linegraphics,
  video4buf8halfdot1lineteletext,
  video4buf8halfdot1lineteletextb,
  video4buf8halfdot1linecursor
};

VIDEOWRITEINNEROPS video4buf8halfdot2linefunctions = {
  video4buf8halfdot2linegraphics,
  video4buf8halfdot2lineteletext,
  video4buf8halfdot2lineteletextb,
  video4buf8halfdot2linecursor
};

VIDEOWRITEINNEROPS video4buf8halfdot3linefunctions = {
  video4buf8halfdot3linegraphics,
  video4buf8halfdot3lineteletext,
  video4buf8halfdot3lineteletextb,
  video4buf8halfdot3linecursor
};

VIDEOWRITEINNEROPS video4buf12quarterdot1linefunctions = {
  video4buf12quarterdot1linegraphics,
  video4buf12quarterdot1lineteletext,
  video4buf12quarterdot1lineteletextb,
  video4buf12quarterdot1linecursor
};

VIDEOWRITEINNEROPS video4buf12quarterdot2linefunctions = {
  video4buf12quarterdot2linegraphics,
  video4buf12quarterdot2lineteletext,
  video4buf12quarterdot2lineteletextb,
  video4buf12quarterdot2linecursor
};

VIDEOWRITEINNEROPS video4buf12quarterdot3linefunctions = {
  video4buf12quarterdot3linegraphics,
  video4buf12quarterdot3lineteletext,
  video4buf12quarterdot3lineteletextb,
  video4buf12quarterdot3linecursor
};

VIDEOWRITEINNEROPS video4buf24eighthdot1linefunctions = {
  video4buf24eighthdot1linegraphics,
  video4buf24eighthdot1lineteletext,
  video4buf24eighthdot1lineteletextb,
  video4buf24eighthdot1linecursor
};

VIDEOWRITEINNEROPS video4buf24eighthdot2linefunctions = {
  video4buf24eighthdot2linegraphics,
  video4buf24eighthdot2lineteletext,
  video4buf24eighthdot2lineteletextb,
  video4buf24eighthdot2linecursor
};

VIDEOWRITEINNEROPS video4buf24eighthdot3linefunctions = {
  video4buf24eighthdot3linegraphics,
  video4buf24eighthdot3lineteletext,
  video4buf24eighthdot3lineteletextb,
  video4buf24eighthdot3linecursor
};
