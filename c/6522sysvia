/*>6522sysvia.c
 *
 * BeebIt - BBC Micro Model B Emulator
 *
 * Rockwell 6522 Versatile Interface Adapter (VIA) [1MHz]
 *
 * (C) Copyright Michael J Foot, 1998-2002
 *
 * Email: <mjfoot@paradise.net.nz>
 */

/* 0xffff * 2 = 0x1fffe +2 = 0x20000 */

/*ACR bits*/
/*b7 = output enable*/
/*b6 = free-run enable*/
/*b5 = timer 2 control (0=timed interrupt,1=countdown with pulses)*/
/*b1 = PB latching enabled*/
/*b0 = PA latching enabled*/

#include <stdio.h>
#include <time.h>
#include "6502cpu.h"
#include "6522sysvia.h"
#include "76489sound.h"
#include "beebit.h"
#include "kernel.h"
#include "keyboard.h"
#include "main.h"
#include "riscos.h"
#include "swis.h"

/*extern char keymap[0x100];*/
extern _kernel_swi_regs regs;

/*extern int r6502_cyclecount;*/

/*System VIA*/
char r6522sysvia_orb; /*output register B*/
char r6522sysvia_irb; /*input register B*/
char r6522sysvia_ora; /*output register A*/
char r6522sysvia_ira; /*input register A*/
char r6522sysvia_ddrb; /*0 bit means input, 1 means output*/
char r6522sysvia_ddra; /*0 bit means input, 1 means output*/
char r6522sysvia_t1cl; /*T1 low order counter*/
char r6522sysvia_t1ch; /*T1 high order counter*/
char r6522sysvia_t1ll; /*T1 low order latch*/
char r6522sysvia_t1lh; /*T1 high order latch*/
char r6522sysvia_t2cl; /*T2 low order counter*/
char r6522sysvia_t2ch; /*T1 high order counter*/
char r6522sysvia_t2ll; /*T1 low order latch*/
char r6522sysvia_sr; /*status register*/
char r6522sysvia_acr;
char r6522sysvia_pcr;
char r6522sysvia_ifr;
char r6522sysvia_ier;
/*these variables contain the actual values on the lines...*/
char r6522sysvia_porta;
char r6522sysvia_portb;
int r6522sysvia_t1; /*timer 1 (used for speed)*/
int r6522sysvia_t2; /*timer 2 (used for speed)*/
int r6522sysvia_t1setint; /*set interrupt when timer1 reaches 0*/
int r6522sysvia_t2setint; /*set interrupt when timer2 reaches 0*/
/*int r6522sysvia_irq;*/ /*irq interrupt status*/
int r6522sysvia_tick;

int video_baseaddress;
char video_startindex; /*screen start index (system via)*/

char r6522sysvia_rtcreadwrite;
char r6522sysvia_rtcdatastrobe;
char r6522sysvia_rtcaddrstrobe;
char r6522sysvia_rtcchipselect;

int lsoundlatch; /*, nsoundtimer;*/
/*int nwrite15 = 0;*/

static int ScreenStartArray[] = {0x4000,0x6000,0x3000,0x5800};

char bcd(char nvalue)
{
  //convert a decimal value to a BCD value
  return(((nvalue / 10) * 16) + nvalue % 10);
}

char cmosread(char naddress)
{
  #ifdef __RISCOS__
    char cmosclock[8];
  #else
    time_t currenttime;
    struct tm * splittime;
  #endif
  switch (naddress)
  {
    case 0x00:
    case 0x01:
      /*clock*/
      #ifdef __RISCOS__
        cmosclock[0] = 1;
        regs.r[0] = 14;
        regs.r[1] = (int)cmosclock;
        _kernel_swi(OS_Word,&regs,&regs);
        return(cmosclock[6]);
      #else
        time(&currenttime);
        splittime = localtime(&currenttime);
        return (bcd(splittime->tm_sec));
      #endif
       break;
    case 0x02:
    case 0x03:
      /*clock*/
      #ifdef __RISCOS__
        cmosclock[0] = 1;
        regs.r[0] = 14;
        regs.r[1] = (int)cmosclock;
        _kernel_swi(OS_Word,&regs,&regs);
        return(cmosclock[5]);
      #else
        time(&currenttime);
        splittime = localtime(&currenttime);
        return (bcd(splittime->tm_min));
      #endif
      break;
    case 0x04:
    case 0x05:
      /*clock*/
      #ifdef __RISCOS__
        cmosclock[0] = 1;
        regs.r[0] = 14;
        regs.r[1] = (int)cmosclock;
        _kernel_swi(OS_Word,&regs,&regs);
        return(cmosclock[4]);
      #else
        time(&currenttime);
        splittime = localtime(&currenttime);
        return (bcd(splittime->tm_hour));
      #endif
      break;
    case 0x06:
      /*clock*/
      #ifdef __RISCOS__
        cmosclock[0] = 1;
        regs.r[0] = 14;
        regs.r[1] = (int)cmosclock;
        _kernel_swi(OS_Word,&regs,&regs);
        return(cmosclock[3]);
      #else
        time(&currenttime);
        splittime = localtime(&currenttime);
        return (bcd(splittime->tm_wday)+1);
      #endif
      break;
    case 0x07:
      /*clock*/
      #ifdef __RISCOS__
        cmosclock[0] = 1;
        regs.r[0] = 14;
        regs.r[1] = (int)cmosclock;
        _kernel_swi(OS_Word,&regs,&regs);
        return(cmosclock[2]);
      #else
        time(&currenttime);
        splittime = localtime(&currenttime);
        return (bcd(splittime->tm_mday));
      #endif
      return(0);
      break;
    case 0x08:
      /*clock*/
      #ifdef __RISCOS__
        cmosclock[0] = 1;
        regs.r[0] = 14;
        regs.r[1] = (int)cmosclock;
        _kernel_swi(OS_Word,&regs,&regs);
        return(cmosclock[1]);
      #else
        time(&currenttime);
        splittime = localtime(&currenttime);
        return (bcd(splittime->tm_mon+1));
      #endif
      break;
    case 0x09:
      /*clock*/
      #ifdef __RISCOS__
        cmosclock[0] = 1;
        regs.r[0] = 14;
        regs.r[1] = (int)cmosclock;
        _kernel_swi(OS_Word,&regs,&regs);
        return(cmosclock[0]);
      #else
        time(&currenttime);
        splittime = localtime(&currenttime);
        return (bcd(splittime->tm_year-10));
      #endif
      break;
    case 0x0A:
    case 0x0B:
    case 0x0C:
    case 0x0D:
      /*registers*/
      return(0);
      break;
    default:
      return(beebit_cmos[naddress-0x0E]);
      break;
  }
}

void cmoswrite(char naddress,char nvalue)
{
  switch (naddress)
  {
    case 0x00:
    case 0x01:
    case 0x02:
    case 0x03:
    case 0x04:
    case 0x05:
    case 0x06:
    case 0x07:
    case 0x08:
    case 0x09:
      break;
    case 0x0A:
    case 0x0B:
    case 0x0C:
    case 0x0D:
      break;
    default:
      beebit_cmos[naddress-0x0E] = nvalue;
      break;
  }
}

void systemviasetirq(void)
{
  if (r6522sysvia_ifr & r6522sysvia_ier & 0x7F)
  {
    /*if (beebit_trace)
      fprintf(htrace,"SV IRQ=&FF\n");*/
    r6522sysvia_ifr |= 0x80;
    /*r6522sysvia_irq = TRUE;*/
    beebit_irq |= IRQ_6522SYSVIA;
  }
  else
  {
    r6522sysvia_ifr &= 0x7F;
    /*r6522sysvia_irq = FALSE;*/
    beebit_irq &= IRQ_NOT6522SYSVIA;
  }
}

void systemviasetca1(void)
{
  #ifdef __DEBUG__
    fprintf(htrace,"CA1 ");
  #endif
  r6522sysvia_ifr |= 0x02; /*CA1 flag*/
  systemviasetirq();
}

/*void systemviavidca1(void)
{*/
  /*CA1 flag*/
  /*r6522sysvia_ifr |= 0x02;
  systemviasetirq();
  r6522sysvia_ira=(r6522sysvia_ora & r6522sysvia_ddra) | (r6522sysvia_porta & ~r6522sysvia_ddra);
}*/

/*void systemviavidirq(void)
{
  systemviasetirq();
  r6522sysvia_ira=(r6522sysvia_ora & r6522sysvia_ddra) | (r6522sysvia_porta & ~r6522sysvia_ddra);
}*/

void systemviaunsetca1(void)
{
  r6522sysvia_ifr &= 0xFD; /*CA1 flag*/
  systemviasetirq();
}

void systemviasetca2(void)
{
  #ifdef __DEBUG__
    fprintf(htrace,"CA2 ");
  #endif
  switch (r6522sysvia_pcr & 0x0E)
  {
    case 0:
    case 2:
      /*updatekeyboard();*/
      r6522sysvia_ifr |= 0x01; /*CA2 flag*/
      systemviasetirq();
      break;
    case 4:
    case 6:
      /*updatekeyboard();*/
      r6522sysvia_ifr |= 0x01; /*CA2 flag*/
      systemviasetirq();
      break;
  }
}

void systemviakeyca2(void)
{
  /*updatekeyboard();*/
  /*if (beebit_trace)
    printf("SVK PC=%X, SP=%X %X\n", r6502_pc, r6502_sp, r6522sysvia_ifr);*/
  r6522sysvia_ifr |= 0x01; /*CA2 flag*/
  systemviasetirq();
}

/*void systemviaunsetca2(void)
{
  r6522sysvia_ifr &= 0xFE;*/ /*CA2 flag*/
  /*systemviasetirq();
}*/

void systemviasett1t2(int ncycles)
{
  /*we are dealing with a 1MHz device here*/
  int lflag = FALSE;

  r6522sysvia_t1 -= ncycles;

  if (r6522sysvia_t1 < 0)
  {
    /*it takes 1 1Mhz cycle when the timer crosses the boundary*/
    /*it takes 1 1MHz cycle to transfer the latches to the counter*/
    switch (r6522sysvia_acr & 0xC0)
    {
      case 0x00:
        /*output disabled and one-shot mode*/
        /*timed interrupt each time T1 is loaded*/
        if (r6522sysvia_t1setint)
        {
          /*r6522sysvia_orb ^= 0x80;
          r6522sysvia_irb ^= 0x80;*/
          /*T1 interrupt flag set*/
          r6522sysvia_ifr |= 0x40;
          r6522sysvia_t1setint = FALSE;
        }
        /*roll the timers over*/
        r6522sysvia_t1 &= 0xFFFF;
        break;
      case 0x40:
        /*output disabled and free-run mode*/
        /*continuous interrupts*/
        if (r6522sysvia_t1setint)
          /*T1 interrupt flag set*/
          r6522sysvia_ifr |= 0x40;
        r6522sysvia_t1 += ((r6522sysvia_t1lh<<8) | r6522sysvia_t1ll) + 2;
        break;
      case 0x80:
        /*output enabled and one-shot mode*/
        /*timed interrupt each time T1 is loaded*/
        if (r6522sysvia_t1setint)
        {
          /*PB7 goes high*/
          /*r6522sysvia_orb ^= 0x80;
          r6522sysvia_irb ^= 0x80;*/
          /*T1 interrupt flag set*/
          r6522sysvia_ifr |= 0x40;
          r6522sysvia_t1setint = FALSE;
        }
        /*if (r6522sysvia_ddrb & 0x80)*/
          r6522sysvia_portb |= 0x80;
        /*roll the timers over*/
        r6522sysvia_t1 &= 0xFFFF;
        break;
      case 0xC0:
        /*output enabled and free-run mode*/
        /*continuous interrupts*/
        /*squarewave output on PB7*/
        /*if (r6522sysvia_ddrb & 0x80)*/
          r6522sysvia_portb ^= 0x80;

        if (r6522sysvia_t1setint)
          /*T1 interrupt flag set*/
          r6522sysvia_ifr |= 0x40;

        r6522sysvia_t1 = ((r6522sysvia_t1lh<<8) | r6522sysvia_t1ll) + 2;
        break;
    }
    #ifdef __DEBUG__
      fprintf(htrace,"T1=&%X IFR=&%X IER=&%X",r6522sysvia_t1,r6522sysvia_ifr,r6522sysvia_ier);
    #endif
    lflag = TRUE;
    /*envelopes processed on timer1*/
    /*soundprocess();*/
  }

  if (!(r6522sysvia_acr & 0x20))
  {
    /*one shot mode only*/
    /*decrement counter by 6502 system clock cycles*/
    r6522sysvia_t2 -= ncycles;
    if (r6522sysvia_t2 < 0)
    {
      r6522sysvia_t2 &= 0xFFFF;
      #ifdef __DEBUG__
        fprintf(htrace,"T2=&%X ",r6522sysvia_t2);
      #endif

      if (r6522sysvia_t2setint)
      {
        /*on completion of the timing interval,
          T2 interrupt flag is set (IFR b5)*/
        r6522sysvia_ifr |= 0x20;
        r6522sysvia_t2setint=FALSE;
      }
      lflag = TRUE;
    }
  }
 else
  {
    if (r6522sysvia_portb & 0x40)
    {
      /*decrement counter by 1MHz clock cycles*/
      r6522sysvia_t2 -= ncycles;
      if (r6522sysvia_t2 < 0)
      {
        r6522sysvia_t2 &= 0xFFFF;
        if (r6522sysvia_t2setint)
        {
          /*on completion of the timing interval,
            T2 interrupt flag is set (IFR b5)*/
          r6522sysvia_ifr |= 0x20;
          r6522sysvia_t2setint=FALSE;
        }
        lflag = TRUE;
      }
    }
  }
  if (lflag)
    systemviasetirq();
}

void systemviareset(int lfull)
{
  if (lfull)
  {
    /*if ier is set, a hard reset will be done*/
    r6522sysvia_ier = 0x80;
  }
  r6522sysvia_ifr = 0x00;
  r6522sysvia_ddra = 0; /*input*/
  r6522sysvia_ddrb = 0; /*input*/
  r6522sysvia_t1ll = 0xFF;
  r6522sysvia_t1lh = 0xFF;
  r6522sysvia_t2ll = 0xFF;
  r6522sysvia_acr = 0;
  r6522sysvia_pcr = 0;
  r6522sysvia_ora = 0xFF;
  r6522sysvia_ira = 0xFF;
  r6522sysvia_orb = 0xFF;
  r6522sysvia_irb = 0xFF;
  r6522sysvia_porta = 0xFF;
  r6522sysvia_portb = 0xFF;

  r6522sysvia_t1 = 0x10000; /*1FFFF;*/
  r6522sysvia_t2 = 0x10000; /*1FFFF*/

  r6522sysvia_t1setint = FALSE;
  r6522sysvia_t2setint = FALSE;
  lsoundlatch = FALSE;
  systemviasetirq();
  video_baseaddress = 0;
  video_startindex = 0;
  r6522sysvia_tick = 0;
}

char systemviaread(int naddress)
{
  int ntotal;
  char nresult;
  /*read/write to slow 1MHz device takes 2 cycles instead of one*/
  /*but it may be out of synchronisaton with the CPU,*/
  /*so a single cycle is used to synchronise instead*/
  ntotal = (r6502_cyclesoriginal-r6502_cyclestogo) + r6502_cycle;
  if (ntotal & 1)
    r6502_cyclestogo -= 1;
  else
    r6502_cyclestogo -= 2;

  switch (naddress & 0x0F)
  {
    case 0x00:
      /*input/output reg b*/
      /*r6522sysvia_pcr & 0x20 = CB2 input*/
      /*r6522sysvia_pcr & 0x40 = CB2 active edge input*/
      /*updatetimers();*/
      /*independant mode*/
      if ((r6522sysvia_pcr & 0xE0 == 0x20) OR (r6522sysvia_pcr & 0xE0 == 0x60))
      {
        /*clear b4 (CB1)*/
        r6522sysvia_ifr &= 0xEF;
      }
      else
      {
        /*clear b4,b3 (CB1,CB2)*/
        r6522sysvia_ifr &= 0xE7;
      }
      systemviasetirq();
      /*reads output register bit in orb. pin level has no effect*/
      nresult = (r6522sysvia_orb & r6522sysvia_ddrb);
      if (r6522sysvia_acr & 0x02)
      {
        /*input latching enabled*/
        /*read input level on irb*/
        nresult |= (r6522sysvia_irb & ~r6522sysvia_ddrb);
      }
      else
      {
        /*input latching disabled*/
        /*read input level on PB pin*/
        nresult |= (r6522sysvia_portb & ~r6522sysvia_ddrb);
      }
      if (!beebit_button1)
        nresult |= 0x10; /*fire button 1 released*/
      if (!beebit_button2)
        nresult |= 0x20; /*fire button 2 released*/

      nresult |= 0xC0; /*speech system not available*/
      /*nresult |= 0xF0;*/
      #ifdef __DEBUG__
        fprintf(htrace,"=&%X (&%X & &%X) ",nresult,r6522sysvia_orb,r6522sysvia_ddrb);
      #endif
      break;
    case 0x01:
      /*input/output reg a*/
      /*r6522sysvia_pcr & 0x02 = CA2 input*/
      /*r6522sysvia_pcr & 0x04 = CA2 active edge input*/
      updatetimers();
      if ((r6522sysvia_pcr & 0x0E == 0x02) OR (r6522sysvia_pcr & 0x0E == 0x06))
      {
        /*independant interrupt*/
        /*clear b2 (CA1)*/
        r6522sysvia_ifr &= 0xFD;
      }
      else
      {
        /*clear b2,b1 (CA1,CA2)*/
        r6522sysvia_ifr &= 0xFC;
      }
      systemviasetirq();
      if (r6522sysvia_acr & 0x01)
      {
        /*input latching enabled*/
        nresult = r6522sysvia_ira;
      }
      else
      {
        /*input latching disabled*/
        if (beebit_machinetype == MACHINE_MASTER128 OR beebit_machinetype == MACHINE_COMPACT)
        {
          if (r6522sysvia_rtcchipselect && r6522sysvia_rtcreadwrite)
          {
            r6522sysvia_porta = cmosread(r6522sysvia_rtcaddrstrobe);
            /*nresult = (r6522sysvia_porta & r6522sysvia_ddra);
            if (r6522sysvia_rtcchipselect)
              nresult |= (r6522sysvia_porta & ~r6522sysvia_ddra);*/
            nresult = (r6522sysvia_ora & r6522sysvia_ddra) | (r6522sysvia_porta & ~r6522sysvia_ddra);
          }
          else
            nresult = r6522sysvia_porta;
        }
        else
          nresult = r6522sysvia_porta;
      }
      break;
    case 0x02:
      nresult = r6522sysvia_ddrb;
      break;
    case 0x03:
      nresult = r6522sysvia_ddra;
      break;
    case 0x04:
      /*T1 low order counter*/
      updatetimers();
      if (r6522sysvia_t1 < 0)
        r6522sysvia_t1cl = 0xFF;
      else
        r6522sysvia_t1cl = (r6522sysvia_t1 & 0xFF);
      /*T1 interrupt flag is reset (IFR b6)*/
      r6522sysvia_ifr &= 0xBF;
      systemviasetirq();
      nresult = r6522sysvia_t1cl;
      break;
    case 0x05:
      /*T1 high order counter*/
      updatetimers();
      if (r6522sysvia_t1 < 0)
        r6522sysvia_t1ch = 0xFF;
      else
        r6522sysvia_t1ch = ((r6522sysvia_t1 >> 8) & 0xFF);
      nresult = r6522sysvia_t1ch;
      break;
    case 0x06:
      /*T1 low order latch*/
      nresult = r6522sysvia_t1ll;
      break;
    case 0x07:
      /*T1 high order latch*/
      nresult = r6522sysvia_t1lh;
      break;
    case 0x08:
      /*T2 low order counter*/
      updatetimers();
      if (r6522sysvia_t2 < 0)
        r6522sysvia_t2cl = 0xFF;
      else
        r6522sysvia_t2cl = (r6522sysvia_t2 & 0xFF);
      /*T2 interrupt flag is cleared (IFR b5)*/
      r6522sysvia_ifr &= 0xDF;
      systemviasetirq();
      nresult = r6522sysvia_t2cl;
      break;
    case 0x09:
      /*T2 high order counter*/
      updatetimers();
      if (r6522sysvia_t2 < 0)
        r6522sysvia_t2ch = 0xFF;
      else
        r6522sysvia_t2ch = ((r6522sysvia_t2 >> 8) & 0xFF);
      nresult = r6522sysvia_t2ch;
      break;
    case 0x0A:
      /*shift register*/
      /*SR interrupt flag is cleared (IFR b2)*/
      updatetimers();
      r6522sysvia_ifr &= 0xFB;
      systemviasetirq();
      nresult = r6522sysvia_sr;
      break;
    case 0x0B:
      /*auxilary control reg*/
      nresult = r6522sysvia_acr;
      break;
    case 0x0C:
      /*peripheral control reg*/
      nresult = r6522sysvia_pcr;
      break;
    case 0x0D:
      /*interrupt flag reg*/
      /*b7 of this register will be read as a logic 1*/
      /*when an interrupt exists within the chip*/
      updatetimers();
      systemviasetirq();
      nresult = r6522sysvia_ifr;
      break;
    case 0x0E:
      /*interrupt enable reg*/
      nresult = (r6522sysvia_ier | 0x80);
      break;
    case 0x0F:
      /*input output reg a*/
      updatetimers();
      if (r6522sysvia_acr & 0x01)
      {
        /*input latching enabled*/
        nresult = r6522sysvia_ira;
      }
      else
      {
        /*input latching disabled*/
        if (beebit_machinetype == MACHINE_MASTER128 OR beebit_machinetype == MACHINE_COMPACT)
        {
          if (r6522sysvia_rtcchipselect && r6522sysvia_rtcreadwrite)
          {
            r6522sysvia_porta = cmosread(r6522sysvia_rtcaddrstrobe);
            /*nresult = (r6522sysvia_porta & r6522sysvia_ddra);
            if (r6522sysvia_rtcchipselect)
              nresult |= (r6522sysvia_porta & ~r6522sysvia_ddra);*/
            nresult = (r6522sysvia_ora & r6522sysvia_ddra) | (r6522sysvia_porta & ~r6522sysvia_ddra);
          }
          else
          {
            /*if (keynormalstatus[(r6522sysvia_porta & r6522sysvia_ddra)])*/
            /*if (keymap[(r6522sysvia_porta & r6522sysvia_ddra)])*/
            if (keystatus[(r6522sysvia_porta & r6522sysvia_ddra)])
              r6522sysvia_porta = keyboardread(r6522sysvia_porta,r6522sysvia_ddra);
            nresult = r6522sysvia_porta;
          }
        }
        else
        {
          /*if (keynormalstatus[(r6522sysvia_porta & r6522sysvia_ddra)])*/
          /*if (keymap[(r6522sysvia_porta & r6522sysvia_ddra)])*/
          if (keystatus[(r6522sysvia_porta & r6522sysvia_ddra)])
            r6522sysvia_porta = keyboardread(r6522sysvia_porta,r6522sysvia_ddra);
          nresult = r6522sysvia_porta;
        }
      }
      break;
    default:
      nresult = 0xFF;
      break;
  }
  #ifdef __DEBUG__
    fprintf(htrace,"SVREAD IER=&%X IFR=&%X ",r6522sysvia_ier,r6522sysvia_ifr);
    fprintf(htrace,"ORA=&%X ",r6522sysvia_ora);
  #endif

  /*bbcvdu(83);
  bbcvdu(32);
  inttohex4(naddress);
  bbcvdu(32);
  inttohex4(nresult);
  bbcvdu(13);
  bbcvdu(10);*/

  return (nresult);
}

void systemviawrite(int naddress, char nvalue)
{
  int ntotal;
  int nlatch,lenabled;
  /*read/write to slow 1MHz device takes 2 cycles instead of one*/
  /*but it may be out of synchronisaton with the CPU,*/
  /*so a single cycle is used to synchronise instead*/
  ntotal = (r6502_cyclesoriginal-r6502_cyclestogo) + r6502_cycle;
  if (ntotal & 1)
    r6502_cyclestogo -= 1;
  else
    r6502_cyclestogo -= 2;

  switch (naddress & 0x0F)
  {
    case 0x00:
      /*input/output reg b*/
      updatetimers();
      r6522sysvia_orb = nvalue;
      r6522sysvia_portb = (r6522sysvia_orb & r6522sysvia_ddrb) | (r6522sysvia_portb & ~r6522sysvia_ddrb);
      /*PCR & 0x20 = CB2 input*/
      /*PCR & 0x40 = CB2 active edge input*/
      /*independant mode*/
      if ((r6522sysvia_pcr & 0xE0 == 0x20) OR (r6522sysvia_pcr & 0xE0 == 0x60))
      {
        /*clear b4 (CB1)*/
        r6522sysvia_ifr &= 0xEF;
      }
      else
      {
        /*clear b4,b3 (CB1,CB2)*/
        r6522sysvia_ifr &= 0xE7;
      }
      systemviasetirq();
      nlatch = (r6522sysvia_portb & 0x07);
      lenabled = (r6522sysvia_portb & 0x08);

      switch (nlatch)
      {
        case 0x00:
          /*sound write enable*/
          if (lenabled AND !lsoundlatch)
          {
            if (beebit_sound)
            {
              /*bbcvdu(48);
              bbcvdu(120);
              inttohex8(r6502_cyclecount);
              bbcvdu(44);
              bbcvdu(48);
              bbcvdu(120);
              inttohex4(r6522sysvia_ora);
              bbcvdu(44);*/
              zeribeepwrite(r6522sysvia_ora);
            }
          }
          lsoundlatch = lenabled;
          break;
        case 0x01:
          switch (beebit_machinetype)
          {
            case MACHINE_MODELB:
            case MACHINE_MODELBPLUS:
              /*read speech*/
              break;
            case MACHINE_MASTER128:
            case MACHINE_COMPACT:
               /*RTC/RAM read write*/
              r6522sysvia_rtcreadwrite = lenabled;
              if (r6522sysvia_portb & 0x80)
                r6522sysvia_rtcaddrstrobe = r6522sysvia_porta;
              r6522sysvia_rtcchipselect = (r6522sysvia_portb & 0x40);
              if (r6522sysvia_rtcchipselect)
              {
                if (r6522sysvia_rtcreadwrite)
                  r6522sysvia_porta = cmosread(r6522sysvia_rtcaddrstrobe);
                else
                {
                  if (r6522sysvia_rtcdatastrobe)
                    cmoswrite(r6522sysvia_rtcaddrstrobe, r6522sysvia_porta);
                }
              }
              break;
          }
          break;
        case 0x02:
          switch (beebit_machinetype)
          {
            case MACHINE_MODELB:
            case MACHINE_MODELBPLUS:
              /*write speech*/
              break;
            case MACHINE_MASTER128:
            case MACHINE_COMPACT:
              /*RTC/RAM data strobe*/
              if (r6522sysvia_portb & 0x80)
                r6522sysvia_rtcaddrstrobe = r6522sysvia_porta;
              r6522sysvia_rtcchipselect = (r6522sysvia_portb & 0x40);
              if (r6522sysvia_rtcchipselect)
              {
                if (r6522sysvia_rtcreadwrite)
                  r6522sysvia_porta = cmosread(r6522sysvia_rtcaddrstrobe);
                else
                {
                  if (r6522sysvia_rtcdatastrobe)
                    cmoswrite(r6522sysvia_rtcaddrstrobe, r6522sysvia_porta);
                }
              }
              r6522sysvia_rtcdatastrobe = lenabled;
              break;
          }
          break;
        case 0x03:
          /*keyboard*/
          if (!lenabled)
            r6522sysvia_porta = keyboardread(r6522sysvia_porta,r6522sysvia_ddra);
          break;
        case 0x04:
          /*Screen Size hi*/
          if (!lenabled)
          {
            video_startindex &= 2;
            video_baseaddress=ScreenStartArray[video_startindex];
          }
          else
          {
            video_startindex |= 1;
            video_baseaddress=ScreenStartArray[video_startindex];
          }
          break;
        case 0x05:
          /*Screen Size lo*/
          if (!lenabled)
          {
            video_startindex &= 1;
            video_baseaddress=ScreenStartArray[video_startindex];
          }
          else
          {
            video_startindex |= 2;
            video_baseaddress=ScreenStartArray[video_startindex];
          }
          break;
        case 0x06:
          /*caps lock on/off*/
          /*get keyboard status*/
          regs.r[0] = 202;
          regs.r[1] = 0;
          regs.r[2] = 255;
          _kernel_swi(OS_Byte,&regs,&regs);

          if ((regs.r[1] & 0x10) != beebit_leds)
          {
            /*only update the keyboard leds if the have changed*/
            beebit_leds = (regs.r[1] & 0x10);

            /*set keyboard status*/
            regs.r[0] = 202;
            if (lenabled)
              regs.r[1] = 0x10;
            else
              regs.r[1] = 0x00;
            regs.r[2] = 0xEF;
            _kernel_swi(OS_Byte,&regs,&regs);

            /*set the leds*/
            regs.r[0] = 118;
            _kernel_swi(OS_Byte,&regs,&regs);
          }
          break;
        case 0x07:
          /*shift lock on/off*/
          break;
      }
      break;
    case 0x01:
      /*input/output reg a*/
      /*zeribeep_value = nvalue;*/
      updatetimers();
      r6522sysvia_ora = nvalue;
      r6522sysvia_porta = (r6522sysvia_ora & r6522sysvia_ddra) | (r6522sysvia_porta & ~r6522sysvia_ddra);
      /*PCR & 0x02 = CA2 input*/
      /*PCR & 0x04 = CA2 active edge input*/
      /*indepandant mode*/
      if ((r6522sysvia_pcr & 0x0E == 0x02) OR (r6522sysvia_pcr & 0x0E == 0x06))
      {
        /*clear b2 (CA1)*/
        r6522sysvia_ifr &= 0xFD;
      }
      else
      {
        /*clear b2,b1 (CA1,CA2)*/
        r6522sysvia_ifr &= 0xFC;
      }
      systemviasetirq();
      nlatch = (r6522sysvia_portb & 0x07);
      lenabled = (r6522sysvia_portb & 0x08);
      switch (nlatch)
      {
        case 0x00:
          /*sound write enable*/
          if (lenabled AND !lsoundlatch)
          {
            if (beebit_sound)
            {
              /*bbcvdu(48);
              bbcvdu(120);
              inttohex8(r6502_cyclecount);
              bbcvdu(44);
              bbcvdu(48);
              bbcvdu(120);
              inttohex4(r6522sysvia_ora);
              bbcvdu(44);*/
              zeribeepwrite(r6522sysvia_ora);
            }
          }
          lsoundlatch = lenabled;
          break;
        case 0x01:
          switch (beebit_machinetype)
          {
            case MACHINE_MODELB:
            case MACHINE_MODELBPLUS:
              /*read speech*/
              break;
            case MACHINE_MASTER128:
            case MACHINE_COMPACT:
              /*RTC/RAM read write*/
              r6522sysvia_rtcreadwrite = lenabled;
              if (r6522sysvia_rtcdatastrobe && r6522sysvia_rtcreadwrite && r6522sysvia_rtcchipselect)
                cmoswrite(r6522sysvia_rtcaddrstrobe, r6522sysvia_porta);
              break;
          }
          break;
        case 0x02:
          switch (beebit_machinetype)
          {
            case MACHINE_MODELB:
            case MACHINE_MODELBPLUS:
              /*write speech*/
              break;
            case MACHINE_MASTER128:
            case MACHINE_COMPACT:
              /*RTC/RAM data strobe*/
              if (r6522sysvia_rtcdatastrobe && r6522sysvia_rtcreadwrite && r6522sysvia_rtcchipselect)
                cmoswrite(r6522sysvia_rtcaddrstrobe, r6522sysvia_porta);
              r6522sysvia_rtcdatastrobe = lenabled;
              break;
          }
          break;
        case 0x03:
          if (!lenabled)
            r6522sysvia_porta = keyboardread(r6522sysvia_porta,r6522sysvia_ddra);
          break;
      }
      break;
    case 0x02:
      r6522sysvia_ddrb = nvalue;
      break;
    case 0x03:
      r6522sysvia_ddra = nvalue;
      break;
    case 0x04:
      /*T1 low order latch*/
      r6522sysvia_t1ll = nvalue;
      break;
    case 0x05:
      /*T1 high order counter*/
      updatetimers();
      /*no effect in one-shot mode?*/
      r6522sysvia_t1lh = r6522sysvia_t1ch = nvalue;
      /*copy latch to counter*/
      r6522sysvia_t1cl = r6522sysvia_t1ll;
      /*clear T1 interrupt flag (b6)*/
      r6522sysvia_ifr &= 0xBF;
      systemviasetirq();
      if ((r6522sysvia_acr & 0xC0) == 0x80)
      {
        /*output enabled (b7=1) and free-run disabled (b6=0)*/
        /*one-shot mode*/
        /*PB7 goes low, but goes high when timer 1 times out*/
        /*r6522sysvia_orb &= 0x7F;
        r6522sysvia_irb &= 0x7F;*/
        r6522sysvia_portb &= 0x7F;
      }
      r6522sysvia_t1setint=TRUE;
      /*it takes 1 1MHz cycle to transfer the latches to the counter*/
      r6522sysvia_t1 = ((r6522sysvia_t1ch<<8) | r6522sysvia_t1cl) + 1;
      break;
    case 0x06:
      /*T1 low order latch*/
      r6522sysvia_t1ll = nvalue;
      break;
    case 0x07:
      /*T1 high order latch*/
      /*if ((r6522sysvia_acr & 0xC0) != 0x80)
      {*/
        /*no effect in one-shot mode?*/
        r6522sysvia_t1lh = nvalue;
        /*clear t1 interrupt flag (bit 6) ??*/
        r6522sysvia_ifr &= 0xBF;
        systemviasetirq();
      /*}*/
      break;
    case 0x08:
      /*t2 low order latch*/
      r6522sysvia_t2ll=nvalue;
      break;
    case 0x09:
      /*T2 high order counter*/
      updatetimers();
      r6522sysvia_t2ch = nvalue;
      r6522sysvia_t2cl = r6522sysvia_t2ll;
      /*clear T2 interrupt flag (bit 5)*/
      r6522sysvia_ifr &= 0xDF;
      systemviasetirq();
      /*start the timer*/
      /*it takes 1 1MHz cycle to transfer the latches to the counter*/
      r6522sysvia_t2 = ((r6522sysvia_t2ch<<8) | r6522sysvia_t2cl) + 1;
      /*provide a single interrupt*/
      r6522sysvia_t2setint=TRUE;
      break;
    case 0x0A:
      /*shift reg*/
      r6522sysvia_sr = nvalue;
      r6522sysvia_ifr &= 0xFB;
      systemviasetirq();
      break;
    case 0x0B:
      /*auxiliary control reg*/
      r6522sysvia_acr = nvalue;
      break;
    case 0x0C:
      /*peripheral control reg*/
      r6522sysvia_pcr = nvalue;
      /*CA1 active edge*/
      if (r6522sysvia_pcr & 0x01)
      {
        /*set b2 (CA1)*/
        r6522sysvia_ifr |= 0x02;
      }
      /*CA2 active edge*/
      if ((r6522sysvia_pcr & 0x0E) == 0x04)
      {
        /*set b1 (CA2)*/
        r6522sysvia_ifr |= 0x01;
      }
      /*CB1 active edge*/
      if (r6522sysvia_pcr & 0x10)
      {
        /*set b5 (CB1)*/
        r6522sysvia_ifr |= 0x10;
      }
      /*CB2 active edge*/
      if ((r6522sysvia_pcr & 0xE0) == 0x40)
      {
        /*set b4 (CB2)*/
        r6522sysvia_ifr |= 0x08;
      }
      break;
    case 0x0D:
      /*interrupt flag reg*/
      nvalue &= 0x7F; /*not really needed*/
      r6522sysvia_ifr &= (~nvalue);
      systemviasetirq();
      break;
    case 0x0E:
      /*interrupt enable reg*/
      if (nvalue & 0x80)
        r6522sysvia_ier |= nvalue;
      else
        r6522sysvia_ier &= (~nvalue);
      r6522sysvia_ier &= 0x7F;
      systemviasetirq();
      break;
    case 0x0F:
      /*output reg a*/
      updatetimers();
      r6522sysvia_ora = nvalue;
      r6522sysvia_porta = (r6522sysvia_ora & r6522sysvia_ddra) | (r6522sysvia_porta & ~r6522sysvia_ddra);
      nlatch = (r6522sysvia_portb & 0x07);
      lenabled = (r6522sysvia_portb & 0x08);
      switch (nlatch)
      {
        case 0x00:
          /*sound write enable*/
          if (lenabled AND !lsoundlatch)
          {
            if (beebit_sound)
            {
              /*bbcvdu(48);
              bbcvdu(120);
              inttohex8(r6502_cyclecount);
              bbcvdu(44);
              bbcvdu(48);
              bbcvdu(120);
              inttohex4(r6522sysvia_ora);
              bbcvdu(44);*/
              zeribeepwrite(r6522sysvia_ora);
            }
          }
          lsoundlatch = lenabled;
          break;
        case 0x01:
          switch (beebit_machinetype)
          {
            case MACHINE_MODELB:
            case MACHINE_MODELBPLUS:
              /*read speech*/
              break;
            case MACHINE_MASTER128:
            case MACHINE_COMPACT:
              /*RTC/RAM read write*/
              r6522sysvia_rtcreadwrite = lenabled;
              if (r6522sysvia_rtcdatastrobe && r6522sysvia_rtcreadwrite && r6522sysvia_rtcchipselect)
                cmoswrite(r6522sysvia_rtcaddrstrobe, r6522sysvia_porta);
              break;
          }
          break;
        case 0x02:
          switch (beebit_machinetype)
          {
            case MACHINE_MODELB:
            case MACHINE_MODELBPLUS:
              /*write speech*/
              break;
            case MACHINE_MASTER128:
            case MACHINE_COMPACT:
              /*RTC/RAM data strobe*/
              if (r6522sysvia_rtcdatastrobe && r6522sysvia_rtcreadwrite && r6522sysvia_rtcchipselect)
                cmoswrite(r6522sysvia_rtcaddrstrobe, r6522sysvia_porta);
              r6522sysvia_rtcdatastrobe = lenabled;
              break;
          }
          break;
        case 0x03:
          /*keyboard*/
          if (!lenabled)
            r6522sysvia_porta = keyboardread(r6522sysvia_porta,r6522sysvia_ddra);
          break;
      }
      break;
  }
  #ifdef __DEBUG__
    fprintf(htrace,"SVWRITE IER=&%X IFR=&%X ",r6522sysvia_ier,r6522sysvia_ifr);
    fprintf(htrace,"ORA=&%X ",r6522sysvia_ora);
  #endif
}
