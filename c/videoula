/*>videoula.c
 *
 * BeebIt - BBC Micro Model B Emulator
 *
 * Acorn Video ULA [1MHz]
 *
 * (C) Copyright Michael J Foot, 1998-2003
 *
 * Email: <mjfoot@paradise.net.nz>
 */

/* Bit assignments in control reg:
   0 - Flash colour (0=first colour, 1=second)
   1 - Teletext select (0=on chip serialiser, 1=teletext)
 2,3 - Bytes per line (2,3=1,1 is 80, 1,0=40, 0,1=20, 0,0=10)
   4 - Clock chip select (0=low frequency (1MHz),1=high frequency (2MHz))
 5,6 - Cursor width in bytes (00=1 byte, 01=not defined, 10=2, 11=4)
   7 - Master cursor width (if set causes large cursor)
*/

#include <stdio.h>
#include <string.h>
#include "6502cpu.h"
#include "6522sysvia.h"
#include "6845crtc.h"
#include "beebit.h"
#include "kernel.h"
#include "main.h"
#include "riscos.h"
#include "swis.h"
#include "video.h"

extern _kernel_swi_regs regs;

#ifdef __DEVELOP__
  extern FILE *htrace;
#else
  #ifdef __DEBUG__
    extern FILE *htrace;
  #endif
#endif

/*Video ULA*/
/*char videoula_colours[0x10];*/
/*colour lookup table for modes 0, 3, 4 and 6*/
int video_colourlookup1[0x10] = {0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1};
/*colour lookup table for modes 1 and 5*/
int video_colourlookup2[0x10] = {0,0,1,1,0,0,1,1,2,2,3,3,2,2,3,3};
char videoula_physical0[0x10] = {0,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7};
char videoula_physical1[0x10] = {0,1,2,3,4,5,6,7,7,6,5,4,3,2,1,0};
char videoula_palette0[0x10] = {0,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7};
char videoula_palette1[0x10] = {0,1,2,3,4,5,6,7,7,6,5,4,3,2,1,0};
char videoula_palette[0x10];
/*colour map for 8bpp modes*/
char videoula_colourmap8[0x08] = {0x00,0x15,0x62,0x77,0x88,0x9D,0xEA,0xFF};
char videoula_rawpalette[0x10];
int videoula_palettevalue;
int videoula_clockrate;
int videoula_flashcolour;
int videoula_control;

int llargecursor,lteletextmode;
/*int ncursorwidth;*/
int ncurrentmode;
/*char npalettevalue;*/

void videoulareset(int lfull)
{
  videoula_palettevalue = 0;
  lteletextmode = TRUE;
  if (lfull)
  {
    video_mode = -1;
    ncurrentmode = -1;
  }
  /*else
  {
    video_mode = 7;
    ncurrentmode = -1;
  }*/
  cursor_width = 0;
}

void videoulasetpalette(void)
{
  char n1,n2;
  switch (video_mode)
  {
    case 0x00:
    case 0x03:
    case 0x04:
    case 0x06:
      /*1bpp*/
      if (videoula_flashcolour == 0)
      {
        for (n1=0;n1<=0x0F;n1++)
        {
          n2 = video_colourlookup1[n1];
          switch (beebit_graphicsmode)
          {
            case 12:
              videoula_palette[n2] = videoula_palette0[n1];
              break;
            case 15:
              videoula_palette[n2] = videoula_colourmap8[videoula_palette0[n1]];
              break;
            case 21:
              videoula_palette[n2] = videoula_colourmap8[videoula_palette0[n1]];
              break;
            case 12801024:
            case 16001024:
              videoula_palette[n2] = videoula_colourmap8[videoula_palette0[n1]];
              break;
          }
        }
      }
      else
      {
        for (n1=0;n1<=0x0F;n1++)
        {
          n2 = video_colourlookup1[n1];
          switch (beebit_graphicsmode)
          {
            case 12:
              videoula_palette[n2] = videoula_palette1[n1];
              break;
            case 15:
              videoula_palette[n2] = videoula_colourmap8[videoula_palette1[n1]];
              break;
            case 21:
              videoula_palette[n2] = videoula_colourmap8[videoula_palette1[n1]];
              break;
            case 12801024:
            case 16001024:
              videoula_palette[n2] = videoula_colourmap8[videoula_palette1[n1]];
              break;
          }
        }
      }
      break;
    case 0x01:
    case 0x05:
      /*2bpp*/
      if (videoula_flashcolour == 0)
      {
        for (n1=0;n1<=0x0F;n1++)
        {
          n2 = video_colourlookup2[n1];
          switch (beebit_graphicsmode)
          {
            case 12:
              videoula_palette[n2] = videoula_palette0[n1];
              break;
            case 15:
              videoula_palette[n2] = videoula_colourmap8[videoula_palette0[n1]];
              break;
            case 21:
              videoula_palette[n2] = videoula_colourmap8[videoula_palette0[n1]];
              break;
            case 12801024:
            case 16001024:
              videoula_palette[n2] = videoula_colourmap8[videoula_palette0[n1]];
              break;
          }
        }
      }
      else
      {
        for (n1=0;n1<=0x0F;n1++)
        {
          n2 = video_colourlookup2[n1];
          switch (beebit_graphicsmode)
          {
            case 12:
              videoula_palette[n2] = videoula_palette1[n1];
              break;
            case 15:
              videoula_palette[n2] = videoula_colourmap8[videoula_palette1[n1]];
              break;
            case 21:
              videoula_palette[n2] = videoula_colourmap8[videoula_palette1[n1]];
              break;
            case 12801024:
            case 16001024:
              videoula_palette[n2] = videoula_colourmap8[videoula_palette1[n1]];
              break;
          }
        }
      }
      break;
    case 0x02:
    case 0x08:
      if (videoula_flashcolour == 0)
      {
        switch (beebit_graphicsmode)
        {
          case 12:
            memcpy(videoula_palette,videoula_palette0,0x10);
            break;
          case 15:
            for (n1=0;n1<=0x0F;n1++)
              videoula_palette[n1] = videoula_colourmap8[videoula_palette0[n1]];
            break;
         case 21:
            for (n1=0;n1<=0x0F;n1++)
              videoula_palette[n1] = videoula_colourmap8[videoula_palette0[n1]];
            break;
          case 12801024:
          case 16001024:
            for (n1=0;n1<=0x0F;n1++)
              videoula_palette[n1] = videoula_colourmap8[videoula_palette0[n1]];
            break;
        }
      }
      else
      {
        switch (beebit_graphicsmode)
        {
          case 12:
            memcpy(videoula_palette,videoula_palette1,0x10);
            break;
          case 15:
            for (n1=0;n1<=0x0F;n1++)
              videoula_palette[n1] = videoula_colourmap8[videoula_palette1[n1]];
            break;
          case 21:
            for (n1=0;n1<=0x0F;n1++)
              videoula_palette[n1] = videoula_colourmap8[videoula_palette1[n1]];
            break;
          case 12801024:
          case 16001024:
            for (n1=0;n1<=0x0F;n1++)
              videoula_palette[n1] = videoula_colourmap8[videoula_palette1[n1]];
            break;
        }
      }
    /*default:*/
      break;
  }
}

int videoularead(int naddress)
{
/*
 routine used for making snapshot
 0 = video control register
 1 to 0x10 = palette entries
 */

  #ifdef __DEBUG__
    fprintf(htrace,"read videoula");
  #endif

  if (naddress == 0)
    return videoula_control;
  else
    return videoula_rawpalette[naddress-1];

  /*if (naddress & 0x01)
    return (videoula_palettevalue);
  else
    return (0xAE);*/
}

void videoulasetcursor(void)
{
  switch ((videoula_control & 0x60)>>5)
  {
    case 0:
      cursor_width = 1;
      break;
    case 1:
      cursor_width = 0;
      break;
    case 2:
      cursor_width = 2;
      break;
    case 3:
      cursor_width = 4;
      break;
  }
  if (lteletextmode)
  {
    switch (beebit_teletextmode)
    {
      case 7:
        cursor_width <<= 1;
        break;
      case 15:
        cursor_width <<= 3;
        break;
      case 21:
        cursor_width <<= 3;
        break;
      case 12801024:
      case 16001024:
        cursor_width <<= 4;
        break;
    }
  }
  else
  {
    if (videoula_clockrate)
    {
      /*modes 0-3*/
      switch (beebit_graphicsmode)
      {
        case 12:
          cursor_width <<= 2;
          break;
        case 15:
          cursor_width <<= 3;
          break;
        case 21:
          cursor_width <<= 3;
          break;
        case 12801024:
        case 16001024:
          cursor_width <<= 4;
          break;
      }
    }
    else
    {
      /*modes 4-7*/
      switch (beebit_graphicsmode)
      {
        case 12:
          cursor_width <<= 3;
          break;
        case 15:
          cursor_width <<= 4;
          break;
        case 21:
          cursor_width <<= 4;
          break;
        case 12801024:
        case 16001024:
          cursor_width <<= 5;
          break;
      }
    }
  }
}

void videoulawrite(int naddress, char nvalue)
{
  char cmodeblock[24];
  int ntotal;
  char n1,n2;
  /*read/write to slow 1MHz device takes 2 cycles instead of one*/
  /*but it may be out of synchronisaton with the CPU,*/
  /*so a single cycle is used to synchronise instead*/
  ntotal = (r6502_cyclesoriginal-r6502_cyclestogo) + r6502_cycle;
  if (ntotal & 1)
    r6502_cyclestogo -= 1;
  else
    r6502_cyclestogo -= 2;

  #ifdef __DEBUG__
    fprintf(htrace,"write videoula %X %X\n",naddress,nvalue);
  #endif
  if (naddress & 0x01)
  {
    /*palette*/
    videoula_rawpalette[nvalue>>4] =(nvalue & 0x0F);

    n1 = (nvalue>>4); /*logical colour*/
    n2 = ((nvalue & 0x0F)^7); /*physical colour*/
    videoula_palettevalue = nvalue;
    /*videoula_colours[n1] = n2;*/
    #ifdef __DEBUG__
      fprintf(htrace,"Palette %u=&%X\n",n1,n2);
    #endif
    switch (video_mode)
    {
      case 0x00:
      case 0x03:
      case 0x04:
      case 0x06:
        /*1bpp*/
        videoula_palette0[n1] = videoula_physical0[n2];
        videoula_palette1[n1] = videoula_physical1[n2];
        n2 = video_colourlookup1[n1];
        if (videoula_flashcolour == 0)
        {
          switch (beebit_graphicsmode)
          {
            case 12:
              videoula_palette[n2] = videoula_palette0[n1];
              break;
            case 15:
              videoula_palette[n2] = videoula_colourmap8[videoula_palette0[n1]];
              break;
            case 21:
              videoula_palette[n2] = videoula_colourmap8[videoula_palette0[n1]];
              break;
            case 12801024:
            case 16001024:
              videoula_palette[n2] = videoula_colourmap8[videoula_palette0[n1]];
              break;
          }
        }
        else
        {
          switch (beebit_graphicsmode)
          {
            case 12:
              videoula_palette[n2] = videoula_palette1[n1];
              break;
            case 15:
              videoula_palette[n2] = videoula_colourmap8[videoula_palette1[n1]];
              break;
            case 21:
              videoula_palette[n2] = videoula_colourmap8[videoula_palette1[n1]];
              break;
            case 12801024:
            case 16001024:
              videoula_palette[n2] = videoula_colourmap8[videoula_palette1[n1]];
              break;
          }
        }
        break;
      case 0x01:
      case 0x05:
        /*2bpp*/
        videoula_palette0[n1] = videoula_physical0[n2];
        videoula_palette1[n1] = videoula_physical1[n2];
        n2 = video_colourlookup2[n1];
        if (videoula_flashcolour == 0)
        {
          switch (beebit_graphicsmode)
          {
            case 12:
              videoula_palette[n2] = videoula_palette0[n1];
              break;
            case 15:
              videoula_palette[n2] = videoula_colourmap8[videoula_palette0[n1]];
              break;
            case 21:
              videoula_palette[n2] = videoula_colourmap8[videoula_palette0[n1]];
              break;
            case 12801024:
            case 16001024:
              videoula_palette[n2] = videoula_colourmap8[videoula_palette0[n1]];
              break;
          }
        }
        else
        {
          switch (beebit_graphicsmode)
          {
            case 12:
              videoula_palette[n2] = videoula_palette1[n1];
              break;
            case 15:
              videoula_palette[n2] = videoula_colourmap8[videoula_palette1[n1]];
              break;
            case 21:
              videoula_palette[n2] = videoula_colourmap8[videoula_palette1[n1]];
              break;
            case 12801024:
            case 16001024:
              videoula_palette[n2] = videoula_colourmap8[videoula_palette1[n1]];
              break;
          }
        }
        break;
      default:
      /*case 0x02:*/
        videoula_palette0[n1] = videoula_physical0[n2];
        videoula_palette1[n1] = videoula_physical1[n2];
        if (videoula_flashcolour == 0)
        {
          switch (beebit_graphicsmode)
          {
            case 12:
              videoula_palette[n1] = videoula_palette0[n1];
              break;
            case 15:
              videoula_palette[n1] = videoula_colourmap8[videoula_palette0[n1]];
              break;
            case 21:
              videoula_palette[n1] = videoula_colourmap8[videoula_palette0[n1]];
              break;
            case 12801024:
            case 16001024:
              videoula_palette[n1] = videoula_colourmap8[videoula_palette0[n1]];
              break;
          }
        }
        else
        {
          switch (beebit_graphicsmode)
          {
            case 12:
              videoula_palette[n1] = videoula_palette1[n1];
              break;
            case 15:
              videoula_palette[n1] = videoula_colourmap8[videoula_palette1[n1]];
              break;
            case 21:
              videoula_palette[n1] = videoula_colourmap8[videoula_palette1[n1]];
              break;
            case 12801024:
            case 16001024:
              videoula_palette[n1] = videoula_colourmap8[videoula_palette1[n1]];
              break;
          }
        }
        break;
    }
    #ifdef __DEBUG__
      fprintf(htrace,"FLASH=&%X\n",videoula_flashcolour);
      fprintf(htrace,"PAL");
      for (n1=0;n1<=0x0F;n1++)
        fprintf(htrace," %u",videoula_palette[n1]);
      fprintf(htrace,"\n");
      fprintf(htrace,"PL0");
      for (n1=0;n1<=0x0F;n1++)
        fprintf(htrace," %u",videoula_palette0[n1]);
      fprintf(htrace,"\n");
      fprintf(htrace,"PL1");
      for (n1=0;n1<=0x0F;n1++)
        fprintf(htrace," %u",videoula_palette1[n1]);
      fprintf(htrace,"\n");
    #endif
    /*#ifdef __DEBUG__
      for (n1=0;n1<0x0F;n1++)
        fprintf(htrace,"PAL %u=%u\n",n,videoulapalette[n1]);
    #endif*/
  }
  else
  {
    /*bbcvdu(86);
    inttohex4(naddress);
    bbcvdu(32);
    inttohex4(nvalue);
    bbcvdu(13);
    bbcvdu(10);*/
    videoula_control = nvalue;
    videoula_flashcolour = (nvalue & 0x01);
    /*fprintf(htrace,"FLASH=%u\n",videoula_flashcolour);*/
    llargecursor = (nvalue & 0x80);
    /*ncursorwidth = ((nvalue & 0x60)>>5);*/
    lteletextmode = (nvalue & 0x02);
    videoula_clockrate = (nvalue & 0x10);
    crtchorizontal();
    crtcwidthextra();
    crtccursor();
    videoulasetcursor();
    /*fprintf(htrace,"CUR W:&%X &%X\n",cursor_width,llargecursor);*/

    /*cursor_show = (cursor_width > 0);*/
    /*cursor_show = (!cursor_nondisplay AND cursor_width > 0);*/
      cursor_show = (!cursor_nondisplay AND cursor_width > 0) AND (m6845_cursorskew != 3);

    #ifdef __DEBUG__
      fprintf(htrace,"nvalue= &%X, &%X\n",nvalue,((nvalue & 0x1C)>>2));
      if (lteletextmode AND video_baseaddress == 0x4000)
      {
      fprintf(htrace,"PC=&%X OP=&%X &%X &%X",r6502_pc-1,memory[r6502_pc-1],memory[r6502_pc-2],memory[r6502_pc-3]);
      }
    #endif

    if (lteletextmode)
      video_mode = 7;
    else
    {
      switch ((nvalue & 0x1C)>>2)
      {
        case 0x07:
          if (video_baseaddress == 0x4000)
            video_mode = 3;
          else
            video_mode = 0;
          break;
        case 0x06:
          video_mode = 1;
          break;
        case 0x05:
          video_mode = 2;
          break;
        case 0x02:
          if (video_baseaddress == 0x6000)
            video_mode = 6;
          else
            video_mode = 4;
          break;
        case 0x01:
          video_mode = 5;
          break;
        case 0x00:
          video_mode = 8;
          break;
        default:
          video_mode = -1;
          break;
      }
      videomodechange();
    }
    #ifdef __DEBUG__
      fprintf(htrace,"MODE %u\n",video_mode);
    #endif

    videoulasetpalette();

    if (ncurrentmode == -1)
    {
      if (lteletextmode)
      {
        switch (beebit_teletextmode)
        {
          case 7:
            host_screenwidth = MODE12_X;
            cursor_bitmap = 0x77777777;
            videoulasetcursor();
            regs.r[0] = 0;
            regs.r[1] = 7;
            _kernel_swi(OS_ScreenMode,&regs,&regs);
            /*bbcvdu(22);
            bbcvdu(7);*/
            break;
          case 15:
            host_screenwidth = MODE15_X;
            cursor_bitmap = 0xFFFFFFFF;
            videoulasetcursor();
            videoulasetcursor();
            regs.r[0] = 0;
            regs.r[1] = 15;
            _kernel_swi(OS_ScreenMode,&regs,&regs);
            /*bbcvdu(22);
            bbcvdu(15);*/
            break;
          case 21:
            host_screenwidth = MODE15_X;
            cursor_bitmap = 0xFFFFFFFF;
            videoulasetcursor();
            regs.r[0] = 0;
            regs.r[1] = 21;
            _kernel_swi(OS_ScreenMode,&regs,&regs);
            /*bbcvdu(22);
            bbcvdu(21);*/
            break;
          case 12801024:
            /*1280 x 1024*/
            setword(cmodeblock, 1);
            setword(cmodeblock + 4, 1280);
            setword(cmodeblock + 8, 1024);
            setword(cmodeblock + 12, 3); /*log2bpp*/
            setword(cmodeblock + 16, -1);
            setword(cmodeblock + 20, -1);
            regs.r[0] = 0;
            regs.r[1] = (int)cmodeblock; /*MODE block*/
            _kernel_swi(OS_ScreenMode,&regs,&regs);
            host_screenwidth = 1280;
            cursor_bitmap = 0xFFFFFFFF;
            break;
          case 16001024:
            /*1600 x 1024*/
            setword(cmodeblock, 1);
            setword(cmodeblock + 4, 1600);
            setword(cmodeblock + 8, 1024);
            setword(cmodeblock + 12, 3); /*log2bpp*/
            setword(cmodeblock + 16, -1);
            setword(cmodeblock + 20, -1);
            regs.r[0] = 0;
            regs.r[1] = (int)cmodeblock; /*MODE block*/
            _kernel_swi(OS_ScreenMode,&regs,&regs);
            host_screenwidth = 1600;
            cursor_bitmap = 0xFFFFFFFF;
            break;
        }
      }
      else
      {
        switch (beebit_graphicsmode)
        {
          case 12:
            /*mode 12 will suit all modes*/
            regs.r[0] = 0;
            regs.r[1] = 12;
            _kernel_swi(OS_ScreenMode,&regs,&regs);
            /*bbcvdu(22);
            bbcvdu(12);*/
            host_screenwidth = MODE12_X;
            cursor_bitmap = 0x77777777;
            break;
          case 15:
            /*mode 15 for RISC OS 5*/
            regs.r[0] = 0;
            regs.r[1] = 15;
            _kernel_swi(OS_ScreenMode,&regs,&regs);
            /*bbcvdu(22);
            bbcvdu(15);*/
            host_screenwidth = MODE15_X;
            cursor_bitmap = 0xFFFFFFFF;
            break;
          case 21:
            /*mode 21 for RISC OS 5*/
            regs.r[0] = 0;
            regs.r[1] = 21;
            _kernel_swi(OS_ScreenMode,&regs,&regs);
            /*bbcvdu(22);
            bbcvdu(21);*/
            host_screenwidth = MODE15_X;
            cursor_bitmap = 0xFFFFFFFF;
            break;
          case 12801024:
            /*1280 x 1024*/
            setword(cmodeblock, 1);
            setword(cmodeblock + 4, 1280);
            setword(cmodeblock + 8, 1024);
            setword(cmodeblock + 12, 3); /*log2bpp*/
            setword(cmodeblock + 16, -1);
            setword(cmodeblock + 20, -1);
            regs.r[0] = 0;
            regs.r[1] = (int)cmodeblock; /*MODE block*/
            _kernel_swi(OS_ScreenMode,&regs,&regs);
            host_screenwidth = 1280;
            cursor_bitmap = 0xFFFFFFFF;
            break;
          case 16001024:
            /*11600 x 1024*/
            setword(cmodeblock, 1);
            setword(cmodeblock + 4, 1600);
            setword(cmodeblock + 8, 1024);
            setword(cmodeblock + 12, 3); /*log2bpp*/
            setword(cmodeblock + 16, -1);
            setword(cmodeblock + 20, -1);
            regs.r[0] = 0;
            regs.r[1] = (int)cmodeblock; /*MODE block*/
            _kernel_swi(OS_ScreenMode,&regs,&regs);
            host_screenwidth = 1600;
            cursor_bitmap = 0xFFFFFFFF;
            break;
        }
      }
      ncurrentmode = video_mode;
      /*videomodechange();*/
      screenstart();
      cursordisable();
      crtcscreen();
      crtccursor();
      video_startaddress = video_storeaddress;
      video_offset = 0;
    }
  }
}
