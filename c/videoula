/*>videoula.c
 *
 * BeebIt - BBC Micro Model B Emulator
 *
 * Acorn Video ULA [1MHz]
 *
 * (C) Copyright Michael J Foot, 1998-2024
 *
 * Email: <mjfoot.nz@gmail.com>
 *
 * Addressing optimization contributed by Crispian Daniels in 2024
 *
 * Email: <convertedgames@3insdale.me.uk>
 */

/* Bit assignments in control reg:
   0 - Flash colour (0=first colour, 1=second)
   1 - Teletext select (0=on chip serialiser, 1=teletext)
 2,3 - Bytes per line (2,3=1,1 is 80, 1,0=40, 0,1=20, 0,0=10)
   4 - Clock chip select (0=low frequency (1MHz),1=high frequency (2MHz))
 5,6 - Cursor width in bytes (00=1 byte, 01=not defined, 10=2, 11=4)
   7 - Master cursor width (if set causes large cursor)
*/

#include <stddef.h>
#include <stdio.h>
#include <string.h>
#include "hostmap.h"
#include "6522sysvia.h"
#include "6845crtc.h"
#include "beebit.h"
#include "kernel.h"
#include "main.h"
#include "riscos.h"
#include "scrmode.h"
#include "swis.h"
#include "adc.h"
#include "video.h"

extern _kernel_swi_regs regs;

#ifdef __DEVELOP__
  extern FILE *htrace;
#else
  #ifdef __DEBUG__
    extern FILE *htrace;
  #endif
#endif

/*Video ULA*/
/*char videoula_colours[0x10];*/
/*colour lookup table for modes 0, 3, 4 and 6*/
int video_colourlookup1[0x10] = {0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1};
/*colour lookup table for modes 1 and 5*/
int video_colourlookup2[0x10] = {0,0,1,1,0,0,1,1,2,2,3,3,2,2,3,3};
char videoula_physical0[0x10] = {0,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7};
char videoula_physical1[0x10] = {0,1,2,3,4,5,6,7,7,6,5,4,3,2,1,0};
char videoula_palette0[0x10] = {0,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7};
char videoula_palette1[0x10] = {0,1,2,3,4,5,6,7,7,6,5,4,3,2,1,0};
char videoula_palette[0x10];
/*colour map for 8bpp modes*/
char videoula_colourmap8[0x08] = {0x00,0x15,0x62,0x77,0x88,0x9D,0xEA,0xFF};
char videoula_rawpalette[0x10];
int videoula_palettevalue;
int videoula_clockrate;
int videoula_flashcolour;
int videoula_control;

int llargecursor,lteletextmode;
/*int ncursorwidth;*/
int ncurrentmode;
/*char npalettevalue;*/

void videoulareset(void)
{
  videoula_palettevalue = 0;
  lteletextmode = TRUE;
  video_mode = -1;
  ncurrentmode = -1;
  cursor_width = 0;
}

void videoulasetpalette(void)
{
  char n1,n2;
  switch (video_mode)
  {
    case 0x00:
    case 0x03:
    case 0x04:
    case 0x06:
      /*1bpp*/
      if (videoula_flashcolour == 0)
      {
        for (n1=0;n1<=0x0F;n1++)
        {
          n2 = video_colourlookup1[n1];
          switch (beebit_graphicsmode)
          {
            case 12:
            case 20:
              videoula_palette[n2] = videoula_palette0[n1];
              break;
            case 15:
            case 21:
              videoula_palette[n2] = videoula_colourmap8[videoula_palette0[n1]];
              break;
          }
        }
      }
      else
      {
        for (n1=0;n1<=0x0F;n1++)
        {
          n2 = video_colourlookup1[n1];
          switch (beebit_graphicsmode)
          {
            case 12:
            case 20:
              videoula_palette[n2] = videoula_palette1[n1];
              break;
            case 15:
            case 21:
              videoula_palette[n2] = videoula_colourmap8[videoula_palette1[n1]];
              break;
          }
        }
      }
      break;
    case 0x01:
    case 0x05:
      /*2bpp*/
      if (videoula_flashcolour == 0)
      {
        for (n1=0;n1<=0x0F;n1++)
        {
          n2 = video_colourlookup2[n1];
          switch (beebit_graphicsmode)
          {
            case 12:
            case 20:
              videoula_palette[n2] = videoula_palette0[n1];
              break;
            case 15:
            case 21:
              videoula_palette[n2] = videoula_colourmap8[videoula_palette0[n1]];
              break;
          }
        }
      }
      else
      {
        for (n1=0;n1<=0x0F;n1++)
        {
          n2 = video_colourlookup2[n1];
          switch (beebit_graphicsmode)
          {
            case 12:
            case 20:
              videoula_palette[n2] = videoula_palette1[n1];
              break;
            case 15:
            case 21:
              videoula_palette[n2] = videoula_colourmap8[videoula_palette1[n1]];
              break;
          }
        }
      }
      break;
    case 0x02:
    case 0x08:
      if (videoula_flashcolour == 0)
      {
        switch (beebit_graphicsmode)
        {
          case 12:
          case 20:
            memcpy(videoula_palette,videoula_palette0,0x10);
            break;
          case 15:
          case 21:
            for (n1=0;n1<=0x0F;n1++)
              videoula_palette[n1] = videoula_colourmap8[videoula_palette0[n1]];
            break;
        }
      }
      else
      {
        switch (beebit_graphicsmode)
        {
          case 12:
          case 20:
            memcpy(videoula_palette,videoula_palette1,0x10);
            break;
          case 15:
          case 21:
            for (n1=0;n1<=0x0F;n1++)
              videoula_palette[n1] = videoula_colourmap8[videoula_palette1[n1]];
            break;
        }
      }
    /*default:*/
      break;
  }
}

int videoularead(int naddress)
{
/*
 routine used for making snapshot
 0 = video control register
 1 to 0x10 = palette entries
 */

  #ifdef __DEBUG__
    fprintf(htrace,"read videoula");
  #endif

  if (naddress == 0)
    return videoula_control;
  else
    return videoula_rawpalette[naddress-1];

  /*if (naddress & 0x01)
    return (videoula_palettevalue);
  else
    return (0xAE);*/
}

void videoulasetcursor(void)
{
  switch ((videoula_control & 0x60)>>5)
  {
    case 0:
      cursor_width = 1;
      break;
    case 1:
      cursor_width = 0;
      break;
    case 2:
      cursor_width = 2;
      break;
    case 3:
      cursor_width = 4;
      break;
  }
  if (lteletextmode)
  {
    if (local_teletextform == 0)
    {
      cursor_width <<= 1;
    }
    else
    {
      if ((local_teletextform & 2) == 0)
        cursor_width <<= 2;
      else
        cursor_width <<= 3;
    }
  }
  else
  {
    if (videoula_clockrate)
    {
      /*modes 0-3*/
      switch (beebit_graphicsmode)
      {
        case 12:
        case 20:
          cursor_width <<= 2;
          break;
        case 15:
        case 21:
          cursor_width <<= 3;
          break;
      }
    }
    else
    {
      /*modes 4-7*/
      switch (beebit_graphicsmode)
      {
        case 12:
        case 20:
          cursor_width <<= 3;
          break;
        case 15:
        case 21:
          cursor_width <<= 4;
          break;
      }
    }
  }
}

HOSTMAP* videoula00write(HOSTMAP* hmap, uintptr_t address_code)
{
  videoula_control = hmap->m;
  videoula_flashcolour = (hmap->m & 0x01);
  llargecursor = (hmap->m & 0x80);
  lteletextmode = (hmap->m & 0x02);
  videoula_clockrate = (hmap->m & 0x10);
  crtchorizontal();
  crtcwidthextra();
  crtccursor();
  videoulasetcursor();

  cursor_show = (!cursor_nondisplay AND cursor_width > 0) AND (m6845_cursorskew != 3);

  if (lteletextmode)
    video_mode = 7;
  else
  {
    switch ((hmap->m & 0x1C)>>2)
    {
      case 0x07:
        if (hmap->screenstartaddress == 0x4000)
          video_mode = 3;
        else
          video_mode = 0;
        break;
      case 0x06:
        video_mode = 1;
        break;
      case 0x05:
        video_mode = 2;
        break;
      case 0x02:
        if (hmap->screenstartaddress == 0x6000)
          video_mode = 6;
        else
          video_mode = 4;
        break;
      case 0x01:
        video_mode = 5;
        break;
      case 0x00:
        video_mode = 8;
        break;
      default:
        video_mode = -1;
        break;
    }
    videomodechange();
  }

  videoulasetpalette();

  if (ncurrentmode == -1)
  {
    if (lteletextmode && local_teletextform == 0)
    {
      if (screenmoderecords)
      {
        regs.r[0] = 0;
        regs.r[1] = 7;
        _kernel_swi(OS_ScreenMode,&regs,&regs);
      }
      else
      {
        bbcvdu(22);
        bbcvdu(7);
      }
    }
    else
    {
      if (screenmoderecords)
      {
        regs.r[0] = 0;
        regs.r[1] = beebit_graphicsmodespecifier;
        _kernel_swi(OS_ScreenMode,&regs,&regs);
      }
      else
      {
        bbcvdu(22);
        bbcvdu(beebit_graphicsmodespecifier);
      }
    }
    ncurrentmode = video_mode;
    videohostmodevars();
    adcmodevars();
    cursordisable();
    crtcscreen();
    crtccursor();
    video_startaddress = video_storeaddress;
    video_offset = 0;
  }
  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* videoula01write(HOSTMAP* hmap, uintptr_t address_code)
{
  int n1,n2;

  /*palette*/
  videoula_rawpalette[hmap->m>>4] =(hmap->m & 0x0F);

  n1 = (hmap->m>>4); /*logical colour*/
  n2 = ((hmap->m & 0x0F)^7); /*physical colour*/
  videoula_palettevalue = hmap->m;
  /*videoula_colours[n1] = n2;*/
  #ifdef __DEBUG__
    fprintf(htrace,"Palette %u=&%X\n",n1,n2);
  #endif
  switch (video_mode)
  {
    case 0x00:
    case 0x03:
    case 0x04:
    case 0x06:
      /*1bpp*/
      videoula_palette0[n1] = videoula_physical0[n2];
      videoula_palette1[n1] = videoula_physical1[n2];
      n2 = video_colourlookup1[n1];
      if (videoula_flashcolour == 0)
      {
        switch (beebit_graphicsmode)
        {
          case 12:
          case 20:
            videoula_palette[n2] = videoula_palette0[n1];
            break;
          case 15:
          case 21:
            videoula_palette[n2] = videoula_colourmap8[videoula_palette0[n1]];
            break;
        }
      }
      else
      {
        switch (beebit_graphicsmode)
        {
          case 12:
          case 20:
            videoula_palette[n2] = videoula_palette1[n1];
            break;
          case 15:
          case 21:
            videoula_palette[n2] = videoula_colourmap8[videoula_palette1[n1]];
            break;
        }
      }
      break;
    case 0x01:
    case 0x05:
      /*2bpp*/
      videoula_palette0[n1] = videoula_physical0[n2];
      videoula_palette1[n1] = videoula_physical1[n2];
      n2 = video_colourlookup2[n1];
      if (videoula_flashcolour == 0)
      {
        switch (beebit_graphicsmode)
        {
          case 12:
          case 20:
            videoula_palette[n2] = videoula_palette0[n1];
            break;
          case 15:
          case 21:
            videoula_palette[n2] = videoula_colourmap8[videoula_palette0[n1]];
            break;
        }
      }
      else
      {
        switch (beebit_graphicsmode)
        {
          case 12:
          case 20:
            videoula_palette[n2] = videoula_palette1[n1];
            break;
          case 15:
          case 21:
            videoula_palette[n2] = videoula_colourmap8[videoula_palette1[n1]];
            break;
        }
      }
      break;
    default:
    /*case 0x02:*/
      videoula_palette0[n1] = videoula_physical0[n2];
      videoula_palette1[n1] = videoula_physical1[n2];
      if (videoula_flashcolour == 0)
      {
        switch (beebit_graphicsmode)
        {
          case 12:
          case 20:
            videoula_palette[n1] = videoula_palette0[n1];
            break;
          case 15:
          case 21:
            videoula_palette[n1] = videoula_colourmap8[videoula_palette0[n1]];
            break;
        }
      }
      else
      {
        switch (beebit_graphicsmode)
        {
          case 12:
          case 20:
            videoula_palette[n1] = videoula_palette1[n1];
            break;
          case 15:
          case 21:
            videoula_palette[n1] = videoula_colourmap8[videoula_palette1[n1]];
            break;
        }
      }
      break;
  }
  R6502_JUMP_FROM_HIGH_OP(hmap)
}
