/*>keyboard.c
 *
 * BeebIt - BBC Micro Model B Emulator
 *
 * (C) Copyright Michael J Foot, 1998-2025
 *
 * Email: <mjfoot.nz@gmail.com>
 *
 * Cycle-level keyboard emulation contributed by Crispian Daniels in 2025
 *
 * Email: <convertedgames@3insdale.me.uk>
 */

#include <stdio.h>
#include <string.h>
#include "hostmap.h"
#include "beebit.h"
#include "riscos.h"
#include "6522sysvia.h"
#include "keyboard.h"

extern void keyboardload(char *filename);

void keyboardreset(void)
{
  char cbuffer[128];
  strcpy(cbuffer,"<BeebIt$Dir>.KeyMaps.");
  strcat(cbuffer,beebit_keylayout);
  keyboardload(cbuffer);
}

void keyboardload(char *filename)
{
  FILE * hfile;
  hfile = fopen(filename,"rb");
  if (hfile != NULL)
  {
    fread(&keylookup,1,0x100,hfile);
    fclose(hfile);
  }
}

void keyboardsetlinks(void)
{
  HOSTMAP* hmap = &hostmap;
  int i;
  switch (beebit_machinetype)
  {
    case MACHINE_MODELB:
    case MACHINE_MODELBPLUS:
      for (i=0;i<8;i++)
      {
        if (beebit_links & (1 << (7-i)))
          hmap->keystatus[0x02+i] |= 1;
        else
          hmap->keystatus[0x02+i] &= 0xFE;
      }
      break;
    case MACHINE_MASTER128:
    case MACHINE_COMPACT:
      for (i=0;i<8;i++)
        hmap->keystatus[0x02+i] &= 0xFE;
      break;
  }
}

#ifdef BEEBIT_NO_ASM
static inline HOSTMAP* keyboardCA2columnN(HOSTMAP *hmap, uintptr_t incremented_state, int n)
{
  uint8_t keybits;

  hmap->keyboard_state = (HOSTKEYBOARDOP*)incremented_state;

  keybits = hmap->keystatus[n];

  if (keybits <= 1)
  {
    hmap->keyboard_state -= KEYBOARDCA2FLAG;
    systemviaunsetca2(hmap);
  }

  return hmap;
}

static inline HOSTMAP* keyboardCA2WEIcolumnNrowM(HOSTMAP *hmap, uintptr_t incremented_state, int n, int m)
{
  uint8_t keybits = hmap->keystatus[n];

  if (keybits & (1<<m))
    hmap->A_sysvia.porta |= 0x80;
  else
    hmap->A_sysvia.porta &= ~0x80;

  if (keybits <= 1)
  {
    hmap->keyboard_state -= KEYBOARDCA2FLAG;
    systemviaunsetca2(hmap);
  }

  return hmap;
}

static inline HOSTMAP* keyboardCA2WEcolumnN(HOSTMAP *hmap, uintptr_t incremented_state, int n)
{
  uint8_t keybits = hmap->keystatus[n];

  if (keybits <= 1)
  {
    hmap->keyboard_state -= KEYBOARDCA2FLAG;
    systemviaunsetca2(hmap);
  }

  return hmap;
}

static inline HOSTMAP* keyboardcolumnN(HOSTMAP *hmap, uintptr_t incremented_state, int n)
{
  uint8_t keybits;

  hmap->keyboard_state = (HOSTKEYBOARDOP*)incremented_state;

  keybits = hmap->keystatus[n];

  if (keybits > 1)
  {
    hmap->keyboard_state += KEYBOARDCA2FLAG;
    systemviasetca2(hmap);
  }

  return hmap;
}

static inline HOSTMAP* keyboardWEIcolumnNrowM(HOSTMAP *hmap, uintptr_t incremented_state, int n, int m)
{
  uint8_t keybits = hmap->keystatus[n];

  if (keybits & (1<<m))
    hmap->A_sysvia.porta |= 0x80;
  else
    hmap->A_sysvia.porta &= ~0x80;

  if (keybits > 1)
  {
    hmap->keyboard_state += KEYBOARDCA2FLAG;
    systemviasetca2(hmap);
  }

  return hmap;
}

static inline HOSTMAP* keyboardWEcolumnN(HOSTMAP *hmap, uintptr_t incremented_state, int n)
{
  uint8_t keybits = hmap->keystatus[n];

  if (keybits > 1)
  {
    hmap->keyboard_state += KEYBOARDCA2FLAG;
    systemviasetca2(hmap);
  }

  return hmap;
}

HOSTMAP* keyboardCA2max(HOSTMAP *hmap, uintptr_t incremented_state)
{
  incremented_state = (uintptr_t)(((HOSTKEYBOARDOP*)incremented_state)-16);
  return keyboardCA2columnN(hmap, incremented_state, 0);
}

HOSTMAP* keyboardCA2column0(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2columnN(hmap, incremented_state, 1);
}

HOSTMAP* keyboardCA2column1(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2columnN(hmap, incremented_state, 2);
}

HOSTMAP* keyboardCA2column2(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2columnN(hmap, incremented_state, 3);
}

HOSTMAP* keyboardCA2column3(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2columnN(hmap, incremented_state, 4);
}

HOSTMAP* keyboardCA2column4(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2columnN(hmap, incremented_state, 5);
}

HOSTMAP* keyboardCA2column5(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2columnN(hmap, incremented_state, 6);
}

HOSTMAP* keyboardCA2column6(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2columnN(hmap, incremented_state, 7);
}

HOSTMAP* keyboardCA2column7(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2columnN(hmap, incremented_state, 8);
}

HOSTMAP* keyboardCA2column8(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2columnN(hmap, incremented_state, 9);
}

HOSTMAP* keyboardCA2column9(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2columnN(hmap, incremented_state, 10);
}

HOSTMAP* keyboardCA2column10(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2columnN(hmap, incremented_state, 11);
}

HOSTMAP* keyboardCA2column11(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2columnN(hmap, incremented_state, 12);
}

HOSTMAP* keyboardCA2WEIcolumn0row0(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 0, 0);
}

HOSTMAP* keyboardCA2WEIcolumn0row1(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 0, 1);
}

HOSTMAP* keyboardCA2WEIcolumn0row2(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 0, 2);
}

HOSTMAP* keyboardCA2WEIcolumn0row3(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 0, 3);
}

HOSTMAP* keyboardCA2WEIcolumn0row4(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 0, 4);
}

HOSTMAP* keyboardCA2WEIcolumn0row5(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 0, 5);
}

HOSTMAP* keyboardCA2WEIcolumn0row6(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 0, 6);
}

HOSTMAP* keyboardCA2WEIcolumn0row7(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 0, 7);
}

HOSTMAP* keyboardCA2WEIcolumn1row0(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 1, 0);
}

HOSTMAP* keyboardCA2WEIcolumn1row1(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 1, 1);
}

HOSTMAP* keyboardCA2WEIcolumn1row2(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 1, 2);
}

HOSTMAP* keyboardCA2WEIcolumn1row3(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 1, 3);
}

HOSTMAP* keyboardCA2WEIcolumn1row4(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 1, 4);
}

HOSTMAP* keyboardCA2WEIcolumn1row5(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 1, 5);
}

HOSTMAP* keyboardCA2WEIcolumn1row6(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 1, 6);
}

HOSTMAP* keyboardCA2WEIcolumn1row7(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 1, 7);
}

HOSTMAP* keyboardCA2WEIcolumn2row0(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 2, 0);
}

HOSTMAP* keyboardCA2WEIcolumn2row1(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 2, 1);
}

HOSTMAP* keyboardCA2WEIcolumn2row2(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 2, 2);
}

HOSTMAP* keyboardCA2WEIcolumn2row3(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 2, 3);
}

HOSTMAP* keyboardCA2WEIcolumn2row4(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 2, 4);
}

HOSTMAP* keyboardCA2WEIcolumn2row5(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 2, 5);
}

HOSTMAP* keyboardCA2WEIcolumn2row6(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 2, 6);
}

HOSTMAP* keyboardCA2WEIcolumn2row7(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 2, 7);
}

HOSTMAP* keyboardCA2WEIcolumn3row0(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 3, 0);
}

HOSTMAP* keyboardCA2WEIcolumn3row1(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 3, 1);
}

HOSTMAP* keyboardCA2WEIcolumn3row2(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 3, 2);
}

HOSTMAP* keyboardCA2WEIcolumn3row3(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 3, 3);
}

HOSTMAP* keyboardCA2WEIcolumn3row4(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 3, 4);
}

HOSTMAP* keyboardCA2WEIcolumn3row5(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 3, 5);
}

HOSTMAP* keyboardCA2WEIcolumn3row6(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 3, 6);
}

HOSTMAP* keyboardCA2WEIcolumn3row7(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 3, 7);
}

HOSTMAP* keyboardCA2WEIcolumn4row0(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 4, 0);
}

HOSTMAP* keyboardCA2WEIcolumn4row1(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 4, 1);
}

HOSTMAP* keyboardCA2WEIcolumn4row2(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 4, 2);
}

HOSTMAP* keyboardCA2WEIcolumn4row3(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 4, 3);
}

HOSTMAP* keyboardCA2WEIcolumn4row4(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 4, 4);
}

HOSTMAP* keyboardCA2WEIcolumn4row5(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 4, 5);
}

HOSTMAP* keyboardCA2WEIcolumn4row6(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 4, 6);
}

HOSTMAP* keyboardCA2WEIcolumn4row7(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 4, 7);
}

HOSTMAP* keyboardCA2WEIcolumn5row0(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 5, 0);
}

HOSTMAP* keyboardCA2WEIcolumn5row1(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 5, 1);
}

HOSTMAP* keyboardCA2WEIcolumn5row2(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 5, 2);
}

HOSTMAP* keyboardCA2WEIcolumn5row3(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 5, 3);
}

HOSTMAP* keyboardCA2WEIcolumn5row4(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 5, 4);
}

HOSTMAP* keyboardCA2WEIcolumn5row5(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 5, 5);
}

HOSTMAP* keyboardCA2WEIcolumn5row6(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 5, 6);
}

HOSTMAP* keyboardCA2WEIcolumn5row7(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 5, 7);
}

HOSTMAP* keyboardCA2WEIcolumn6row0(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 6, 0);
}

HOSTMAP* keyboardCA2WEIcolumn6row1(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 6, 1);
}

HOSTMAP* keyboardCA2WEIcolumn6row2(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 6, 2);
}

HOSTMAP* keyboardCA2WEIcolumn6row3(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 6, 3);
}

HOSTMAP* keyboardCA2WEIcolumn6row4(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 6, 4);
}

HOSTMAP* keyboardCA2WEIcolumn6row5(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 6, 5);
}

HOSTMAP* keyboardCA2WEIcolumn6row6(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 6, 6);
}

HOSTMAP* keyboardCA2WEIcolumn6row7(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 6, 7);
}

HOSTMAP* keyboardCA2WEIcolumn7row0(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 7, 0);
}

HOSTMAP* keyboardCA2WEIcolumn7row1(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 7, 1);
}

HOSTMAP* keyboardCA2WEIcolumn7row2(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 7, 2);
}

HOSTMAP* keyboardCA2WEIcolumn7row3(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 7, 3);
}

HOSTMAP* keyboardCA2WEIcolumn7row4(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 7, 4);
}

HOSTMAP* keyboardCA2WEIcolumn7row5(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 7, 5);
}

HOSTMAP* keyboardCA2WEIcolumn7row6(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 7, 6);
}

HOSTMAP* keyboardCA2WEIcolumn7row7(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 7, 7);
}

HOSTMAP* keyboardCA2WEIcolumn8row0(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 8, 0);
}

HOSTMAP* keyboardCA2WEIcolumn8row1(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 8, 1);
}

HOSTMAP* keyboardCA2WEIcolumn8row2(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 8, 2);
}

HOSTMAP* keyboardCA2WEIcolumn8row3(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 8, 3);
}

HOSTMAP* keyboardCA2WEIcolumn8row4(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 8, 4);
}

HOSTMAP* keyboardCA2WEIcolumn8row5(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 8, 5);
}

HOSTMAP* keyboardCA2WEIcolumn8row6(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 8, 6);
}

HOSTMAP* keyboardCA2WEIcolumn8row7(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 8, 7);
}

HOSTMAP* keyboardCA2WEIcolumn9row0(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 9, 0);
}

HOSTMAP* keyboardCA2WEIcolumn9row1(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 9, 1);
}

HOSTMAP* keyboardCA2WEIcolumn9row2(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 9, 2);
}

HOSTMAP* keyboardCA2WEIcolumn9row3(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 9, 3);
}

HOSTMAP* keyboardCA2WEIcolumn9row4(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 9, 4);
}

HOSTMAP* keyboardCA2WEIcolumn9row5(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 9, 5);
}

HOSTMAP* keyboardCA2WEIcolumn9row6(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 9, 6);
}

HOSTMAP* keyboardCA2WEIcolumn9row7(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 9, 7);
}

HOSTMAP* keyboardCA2WEIcolumn10row0(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 10, 0);
}

HOSTMAP* keyboardCA2WEIcolumn10row1(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 10, 1);
}

HOSTMAP* keyboardCA2WEIcolumn10row2(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 10, 2);
}

HOSTMAP* keyboardCA2WEIcolumn10row3(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 10, 3);
}

HOSTMAP* keyboardCA2WEIcolumn10row4(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 10, 4);
}

HOSTMAP* keyboardCA2WEIcolumn10row5(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 10, 5);
}

HOSTMAP* keyboardCA2WEIcolumn10row6(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 10, 6);
}

HOSTMAP* keyboardCA2WEIcolumn10row7(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 10, 7);
}

HOSTMAP* keyboardCA2WEIcolumn11row0(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 11, 0);
}

HOSTMAP* keyboardCA2WEIcolumn11row1(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 11, 1);
}

HOSTMAP* keyboardCA2WEIcolumn11row2(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 11, 2);
}

HOSTMAP* keyboardCA2WEIcolumn11row3(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 11, 3);
}

HOSTMAP* keyboardCA2WEIcolumn11row4(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 11, 4);
}

HOSTMAP* keyboardCA2WEIcolumn11row5(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 11, 5);
}

HOSTMAP* keyboardCA2WEIcolumn11row6(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 11, 6);
}

HOSTMAP* keyboardCA2WEIcolumn11row7(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 11, 7);
}

HOSTMAP* keyboardCA2WEIcolumn12row0(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 12, 0);
}

HOSTMAP* keyboardCA2WEIcolumn12row1(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 12, 1);
}

HOSTMAP* keyboardCA2WEIcolumn12row2(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 12, 2);
}

HOSTMAP* keyboardCA2WEIcolumn12row3(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 12, 3);
}

HOSTMAP* keyboardCA2WEIcolumn12row4(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 12, 4);
}

HOSTMAP* keyboardCA2WEIcolumn12row5(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 12, 5);
}

HOSTMAP* keyboardCA2WEIcolumn12row6(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 12, 6);
}

HOSTMAP* keyboardCA2WEIcolumn12row7(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEIcolumnNrowM(hmap, incremented_state, 12, 7);
}

HOSTMAP* keyboardCA2WEcolumn0(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEcolumnN(hmap, incremented_state, 0);
}

HOSTMAP* keyboardCA2WEcolumn1(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEcolumnN(hmap, incremented_state, 1);
}

HOSTMAP* keyboardCA2WEcolumn2(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEcolumnN(hmap, incremented_state, 2);
}

HOSTMAP* keyboardCA2WEcolumn3(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEcolumnN(hmap, incremented_state, 3);
}

HOSTMAP* keyboardCA2WEcolumn4(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEcolumnN(hmap, incremented_state, 4);
}

HOSTMAP* keyboardCA2WEcolumn5(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEcolumnN(hmap, incremented_state, 5);
}

HOSTMAP* keyboardCA2WEcolumn6(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEcolumnN(hmap, incremented_state, 6);
}

HOSTMAP* keyboardCA2WEcolumn7(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEcolumnN(hmap, incremented_state, 7);
}

HOSTMAP* keyboardCA2WEcolumn8(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEcolumnN(hmap, incremented_state, 8);
}

HOSTMAP* keyboardCA2WEcolumn9(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEcolumnN(hmap, incremented_state, 9);
}

HOSTMAP* keyboardCA2WEcolumn10(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEcolumnN(hmap, incremented_state, 10);
}

HOSTMAP* keyboardCA2WEcolumn11(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEcolumnN(hmap, incremented_state, 11);
}

HOSTMAP* keyboardCA2WEcolumn12(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardCA2WEcolumnN(hmap, incremented_state, 12);
}

HOSTMAP* keyboardmax(HOSTMAP *hmap, uintptr_t incremented_state)
{
  incremented_state = (uintptr_t)(((HOSTKEYBOARDOP*)incremented_state)-16);
  return keyboardcolumnN(hmap, incremented_state, 0);
}

HOSTMAP* keyboardcolumn0(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardcolumnN(hmap, incremented_state, 1);
}

HOSTMAP* keyboardcolumn1(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardcolumnN(hmap, incremented_state, 2);
}

HOSTMAP* keyboardcolumn2(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardcolumnN(hmap, incremented_state, 3);
}

HOSTMAP* keyboardcolumn3(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardcolumnN(hmap, incremented_state, 4);
}

HOSTMAP* keyboardcolumn4(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardcolumnN(hmap, incremented_state, 5);
}

HOSTMAP* keyboardcolumn5(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardcolumnN(hmap, incremented_state, 6);
}

HOSTMAP* keyboardcolumn6(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardcolumnN(hmap, incremented_state, 7);
}

HOSTMAP* keyboardcolumn7(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardcolumnN(hmap, incremented_state, 8);
}

HOSTMAP* keyboardcolumn8(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardcolumnN(hmap, incremented_state, 9);
}

HOSTMAP* keyboardcolumn9(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardcolumnN(hmap, incremented_state, 10);
}

HOSTMAP* keyboardcolumn10(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardcolumnN(hmap, incremented_state, 11);
}

HOSTMAP* keyboardcolumn11(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardcolumnN(hmap, incremented_state, 12);
}

HOSTMAP* keyboardWEIcolumn0row0(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 0, 0);
}

HOSTMAP* keyboardWEIcolumn0row1(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 0, 1);
}

HOSTMAP* keyboardWEIcolumn0row2(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 0, 2);
}

HOSTMAP* keyboardWEIcolumn0row3(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 0, 3);
}

HOSTMAP* keyboardWEIcolumn0row4(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 0, 4);
}

HOSTMAP* keyboardWEIcolumn0row5(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 0, 5);
}

HOSTMAP* keyboardWEIcolumn0row6(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 0, 6);
}

HOSTMAP* keyboardWEIcolumn0row7(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 0, 7);
}

HOSTMAP* keyboardWEIcolumn1row0(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 1, 0);
}

HOSTMAP* keyboardWEIcolumn1row1(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 1, 1);
}

HOSTMAP* keyboardWEIcolumn1row2(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 1, 2);
}

HOSTMAP* keyboardWEIcolumn1row3(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 1, 3);
}

HOSTMAP* keyboardWEIcolumn1row4(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 1, 4);
}

HOSTMAP* keyboardWEIcolumn1row5(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 1, 5);
}

HOSTMAP* keyboardWEIcolumn1row6(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 1, 6);
}

HOSTMAP* keyboardWEIcolumn1row7(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 1, 7);
}

HOSTMAP* keyboardWEIcolumn2row0(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 2, 0);
}

HOSTMAP* keyboardWEIcolumn2row1(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 2, 1);
}

HOSTMAP* keyboardWEIcolumn2row2(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 2, 2);
}

HOSTMAP* keyboardWEIcolumn2row3(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 2, 3);
}

HOSTMAP* keyboardWEIcolumn2row4(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 2, 4);
}

HOSTMAP* keyboardWEIcolumn2row5(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 2, 5);
}

HOSTMAP* keyboardWEIcolumn2row6(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 2, 6);
}

HOSTMAP* keyboardWEIcolumn2row7(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 2, 7);
}

HOSTMAP* keyboardWEIcolumn3row0(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 3, 0);
}

HOSTMAP* keyboardWEIcolumn3row1(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 3, 1);
}

HOSTMAP* keyboardWEIcolumn3row2(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 3, 2);
}

HOSTMAP* keyboardWEIcolumn3row3(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 3, 3);
}

HOSTMAP* keyboardWEIcolumn3row4(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 3, 4);
}

HOSTMAP* keyboardWEIcolumn3row5(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 3, 5);
}

HOSTMAP* keyboardWEIcolumn3row6(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 3, 6);
}

HOSTMAP* keyboardWEIcolumn3row7(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 3, 7);
}

HOSTMAP* keyboardWEIcolumn4row0(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 4, 0);
}

HOSTMAP* keyboardWEIcolumn4row1(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 4, 1);
}

HOSTMAP* keyboardWEIcolumn4row2(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 4, 2);
}

HOSTMAP* keyboardWEIcolumn4row3(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 4, 3);
}

HOSTMAP* keyboardWEIcolumn4row4(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 4, 4);
}

HOSTMAP* keyboardWEIcolumn4row5(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 4, 5);
}

HOSTMAP* keyboardWEIcolumn4row6(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 4, 6);
}

HOSTMAP* keyboardWEIcolumn4row7(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 4, 7);
}

HOSTMAP* keyboardWEIcolumn5row0(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 5, 0);
}

HOSTMAP* keyboardWEIcolumn5row1(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 5, 1);
}

HOSTMAP* keyboardWEIcolumn5row2(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 5, 2);
}

HOSTMAP* keyboardWEIcolumn5row3(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 5, 3);
}

HOSTMAP* keyboardWEIcolumn5row4(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 5, 4);
}

HOSTMAP* keyboardWEIcolumn5row5(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 5, 5);
}

HOSTMAP* keyboardWEIcolumn5row6(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 5, 6);
}

HOSTMAP* keyboardWEIcolumn5row7(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 5, 7);
}

HOSTMAP* keyboardWEIcolumn6row0(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 6, 0);
}

HOSTMAP* keyboardWEIcolumn6row1(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 6, 1);
}

HOSTMAP* keyboardWEIcolumn6row2(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 6, 2);
}

HOSTMAP* keyboardWEIcolumn6row3(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 6, 3);
}

HOSTMAP* keyboardWEIcolumn6row4(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 6, 4);
}

HOSTMAP* keyboardWEIcolumn6row5(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 6, 5);
}

HOSTMAP* keyboardWEIcolumn6row6(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 6, 6);
}

HOSTMAP* keyboardWEIcolumn6row7(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 6, 7);
}

HOSTMAP* keyboardWEIcolumn7row0(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 7, 0);
}

HOSTMAP* keyboardWEIcolumn7row1(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 7, 1);
}

HOSTMAP* keyboardWEIcolumn7row2(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 7, 2);
}

HOSTMAP* keyboardWEIcolumn7row3(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 7, 3);
}

HOSTMAP* keyboardWEIcolumn7row4(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 7, 4);
}

HOSTMAP* keyboardWEIcolumn7row5(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 7, 5);
}

HOSTMAP* keyboardWEIcolumn7row6(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 7, 6);
}

HOSTMAP* keyboardWEIcolumn7row7(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 7, 7);
}

HOSTMAP* keyboardWEIcolumn8row0(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 8, 0);
}

HOSTMAP* keyboardWEIcolumn8row1(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 8, 1);
}

HOSTMAP* keyboardWEIcolumn8row2(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 8, 2);
}

HOSTMAP* keyboardWEIcolumn8row3(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 8, 3);
}

HOSTMAP* keyboardWEIcolumn8row4(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 8, 4);
}

HOSTMAP* keyboardWEIcolumn8row5(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 8, 5);
}

HOSTMAP* keyboardWEIcolumn8row6(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 8, 6);
}

HOSTMAP* keyboardWEIcolumn8row7(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 8, 7);
}

HOSTMAP* keyboardWEIcolumn9row0(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 9, 0);
}

HOSTMAP* keyboardWEIcolumn9row1(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 9, 1);
}

HOSTMAP* keyboardWEIcolumn9row2(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 9, 2);
}

HOSTMAP* keyboardWEIcolumn9row3(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 9, 3);
}

HOSTMAP* keyboardWEIcolumn9row4(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 9, 4);
}

HOSTMAP* keyboardWEIcolumn9row5(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 9, 5);
}

HOSTMAP* keyboardWEIcolumn9row6(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 9, 6);
}

HOSTMAP* keyboardWEIcolumn9row7(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 9, 7);
}

HOSTMAP* keyboardWEIcolumn10row0(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 10, 0);
}

HOSTMAP* keyboardWEIcolumn10row1(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 10, 1);
}

HOSTMAP* keyboardWEIcolumn10row2(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 10, 2);
}

HOSTMAP* keyboardWEIcolumn10row3(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 10, 3);
}

HOSTMAP* keyboardWEIcolumn10row4(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 10, 4);
}

HOSTMAP* keyboardWEIcolumn10row5(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 10, 5);
}

HOSTMAP* keyboardWEIcolumn10row6(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 10, 6);
}

HOSTMAP* keyboardWEIcolumn10row7(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 10, 7);
}

HOSTMAP* keyboardWEIcolumn11row0(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 11, 0);
}

HOSTMAP* keyboardWEIcolumn11row1(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 11, 1);
}

HOSTMAP* keyboardWEIcolumn11row2(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 11, 2);
}

HOSTMAP* keyboardWEIcolumn11row3(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 11, 3);
}

HOSTMAP* keyboardWEIcolumn11row4(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 11, 4);
}

HOSTMAP* keyboardWEIcolumn11row5(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 11, 5);
}

HOSTMAP* keyboardWEIcolumn11row6(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 11, 6);
}

HOSTMAP* keyboardWEIcolumn11row7(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 11, 7);
}

HOSTMAP* keyboardWEIcolumn12row0(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 12, 0);
}

HOSTMAP* keyboardWEIcolumn12row1(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 12, 1);
}

HOSTMAP* keyboardWEIcolumn12row2(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 12, 2);
}

HOSTMAP* keyboardWEIcolumn12row3(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 12, 3);
}

HOSTMAP* keyboardWEIcolumn12row4(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 12, 4);
}

HOSTMAP* keyboardWEIcolumn12row5(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 12, 5);
}

HOSTMAP* keyboardWEIcolumn12row6(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 12, 6);
}

HOSTMAP* keyboardWEIcolumn12row7(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEIcolumnNrowM(hmap, incremented_state, 12, 7);
}

HOSTMAP* keyboardWEcolumn0(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEcolumnN(hmap, incremented_state, 0);
}

HOSTMAP* keyboardWEcolumn1(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEcolumnN(hmap, incremented_state, 1);
}

HOSTMAP* keyboardWEcolumn2(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEcolumnN(hmap, incremented_state, 2);
}

HOSTMAP* keyboardWEcolumn3(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEcolumnN(hmap, incremented_state, 3);
}

HOSTMAP* keyboardWEcolumn4(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEcolumnN(hmap, incremented_state, 4);
}

HOSTMAP* keyboardWEcolumn5(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEcolumnN(hmap, incremented_state, 5);
}

HOSTMAP* keyboardWEcolumn6(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEcolumnN(hmap, incremented_state, 6);
}

HOSTMAP* keyboardWEcolumn7(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEcolumnN(hmap, incremented_state, 7);
}

HOSTMAP* keyboardWEcolumn8(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEcolumnN(hmap, incremented_state, 8);
}

HOSTMAP* keyboardWEcolumn9(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEcolumnN(hmap, incremented_state, 9);
}

HOSTMAP* keyboardWEcolumn10(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEcolumnN(hmap, incremented_state, 10);
}

HOSTMAP* keyboardWEcolumn11(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEcolumnN(hmap, incremented_state, 11);
}

HOSTMAP* keyboardWEcolumn12(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return keyboardWEcolumnN(hmap, incremented_state, 12);
}

HOSTMAP* keyboardCA2nocolumn(HOSTMAP *hmap, uintptr_t incremented_state)
{
  hmap->keyboard_state = ((HOSTKEYBOARDOP*)incremented_state) - KEYBOARDCA2FLAG;
  systemviaunsetca2(hmap);

  return hmap;
}

HOSTMAP* keyboardCA2WEInocolumn(HOSTMAP *hmap, uintptr_t incremented_state)
{
  hmap->keyboard_state -= KEYBOARDCA2FLAG;

  hmap->A_sysvia.porta &= ~0x80;

  systemviaunsetca2(hmap);

  return hmap;
}

HOSTMAP* keyboardCA2WEnocolumn(HOSTMAP *hmap, uintptr_t incremented_state)
{
  hmap->keyboard_state -= KEYBOARDCA2FLAG;

  systemviaunsetca2(hmap);

  return hmap;
}

HOSTMAP* keyboardnocolumn(HOSTMAP *hmap, uintptr_t incremented_state)
{
  hmap->keyboard_state = (HOSTKEYBOARDOP*)incremented_state;
  return hmap;
}

HOSTMAP* keyboardWEInocolumn(HOSTMAP *hmap, uintptr_t incremented_state)
{
  hmap->A_sysvia.porta &= ~0x80;
  return hmap;
}

HOSTMAP* keyboardWEnocolumn(HOSTMAP *hmap, uintptr_t incremented_state)
{
  return hmap;
}
#endif

static const HOSTKEYBOARDOP keyboardWEIcolumnops[104] = {
  keyboardWEIcolumn0row0, keyboardWEIcolumn0row1, keyboardWEIcolumn0row2, keyboardWEIcolumn0row3,
  keyboardWEIcolumn0row4, keyboardWEIcolumn0row5, keyboardWEIcolumn0row6, keyboardWEIcolumn0row7,
  keyboardWEIcolumn1row0, keyboardWEIcolumn1row1, keyboardWEIcolumn1row2, keyboardWEIcolumn1row3,
  keyboardWEIcolumn1row4, keyboardWEIcolumn1row5, keyboardWEIcolumn1row6, keyboardWEIcolumn1row7,
  keyboardWEIcolumn2row0, keyboardWEIcolumn2row1, keyboardWEIcolumn2row2, keyboardWEIcolumn2row3,
  keyboardWEIcolumn2row4, keyboardWEIcolumn2row5, keyboardWEIcolumn2row6, keyboardWEIcolumn2row7,
  keyboardWEIcolumn3row0, keyboardWEIcolumn3row1, keyboardWEIcolumn3row2, keyboardWEIcolumn3row3,
  keyboardWEIcolumn3row4, keyboardWEIcolumn3row5, keyboardWEIcolumn3row6, keyboardWEIcolumn3row7,
  keyboardWEIcolumn4row0, keyboardWEIcolumn4row1, keyboardWEIcolumn4row2, keyboardWEIcolumn4row3,
  keyboardWEIcolumn4row4, keyboardWEIcolumn4row5, keyboardWEIcolumn4row6, keyboardWEIcolumn4row7,
  keyboardWEIcolumn5row0, keyboardWEIcolumn5row1, keyboardWEIcolumn5row2, keyboardWEIcolumn5row3,
  keyboardWEIcolumn5row4, keyboardWEIcolumn5row5, keyboardWEIcolumn5row6, keyboardWEIcolumn5row7,
  keyboardWEIcolumn6row0, keyboardWEIcolumn6row1, keyboardWEIcolumn6row2, keyboardWEIcolumn6row3,
  keyboardWEIcolumn6row4, keyboardWEIcolumn6row5, keyboardWEIcolumn6row6, keyboardWEIcolumn6row7,
  keyboardWEIcolumn7row0, keyboardWEIcolumn7row1, keyboardWEIcolumn7row2, keyboardWEIcolumn7row3,
  keyboardWEIcolumn7row4, keyboardWEIcolumn7row5, keyboardWEIcolumn7row6, keyboardWEIcolumn7row7,
  keyboardWEIcolumn8row0, keyboardWEIcolumn8row1, keyboardWEIcolumn8row2, keyboardWEIcolumn8row3,
  keyboardWEIcolumn8row4, keyboardWEIcolumn8row5, keyboardWEIcolumn8row6, keyboardWEIcolumn8row7,
  keyboardWEIcolumn9row0, keyboardWEIcolumn9row1, keyboardWEIcolumn9row2, keyboardWEIcolumn9row3,
  keyboardWEIcolumn9row4, keyboardWEIcolumn9row5, keyboardWEIcolumn9row6, keyboardWEIcolumn9row7,
  keyboardWEIcolumn10row0, keyboardWEIcolumn10row1, keyboardWEIcolumn10row2, keyboardWEIcolumn10row3,
  keyboardWEIcolumn10row4, keyboardWEIcolumn10row5, keyboardWEIcolumn10row6, keyboardWEIcolumn10row7,
  keyboardWEIcolumn11row0, keyboardWEIcolumn11row1, keyboardWEIcolumn11row2, keyboardWEIcolumn11row3,
  keyboardWEIcolumn11row4, keyboardWEIcolumn11row5, keyboardWEIcolumn11row6, keyboardWEIcolumn11row7,
  keyboardWEIcolumn12row0, keyboardWEIcolumn12row1, keyboardWEIcolumn12row2, keyboardWEIcolumn12row3,
  keyboardWEIcolumn12row4, keyboardWEIcolumn12row5, keyboardWEIcolumn12row6, keyboardWEIcolumn12row7
};
static const HOSTKEYBOARDOP keyboardWEcolumnops[13] = {
  keyboardWEcolumn0, keyboardWEcolumn1, keyboardWEcolumn2, keyboardWEcolumn3,
  keyboardWEcolumn4, keyboardWEcolumn5, keyboardWEcolumn6, keyboardWEcolumn7,
  keyboardWEcolumn8, keyboardWEcolumn9, keyboardWEcolumn10, keyboardWEcolumn11,
  keyboardWEcolumn12
};
static const HOSTKEYBOARDOP keyboardcolumnops[12] = {
  keyboardcolumn0, keyboardcolumn1, keyboardcolumn2, keyboardcolumn3,
  keyboardcolumn4, keyboardcolumn5, keyboardcolumn6, keyboardcolumn7,
  keyboardcolumn8, keyboardcolumn9, keyboardcolumn10, keyboardcolumn11
};
static const HOSTKEYBOARDOP keyboardCA2WEIcolumnops[104] = {
  keyboardCA2WEIcolumn0row0, keyboardCA2WEIcolumn0row1, keyboardCA2WEIcolumn0row2, keyboardCA2WEIcolumn0row3,
  keyboardCA2WEIcolumn0row4, keyboardCA2WEIcolumn0row5, keyboardCA2WEIcolumn0row6, keyboardCA2WEIcolumn0row7,
  keyboardCA2WEIcolumn1row0, keyboardCA2WEIcolumn1row1, keyboardCA2WEIcolumn1row2, keyboardCA2WEIcolumn1row3,
  keyboardCA2WEIcolumn1row4, keyboardCA2WEIcolumn1row5, keyboardCA2WEIcolumn1row6, keyboardCA2WEIcolumn1row7,
  keyboardCA2WEIcolumn2row0, keyboardCA2WEIcolumn2row1, keyboardCA2WEIcolumn2row2, keyboardCA2WEIcolumn2row3,
  keyboardCA2WEIcolumn2row4, keyboardCA2WEIcolumn2row5, keyboardCA2WEIcolumn2row6, keyboardCA2WEIcolumn2row7,
  keyboardCA2WEIcolumn3row0, keyboardCA2WEIcolumn3row1, keyboardCA2WEIcolumn3row2, keyboardCA2WEIcolumn3row3,
  keyboardCA2WEIcolumn3row4, keyboardCA2WEIcolumn3row5, keyboardCA2WEIcolumn3row6, keyboardCA2WEIcolumn3row7,
  keyboardCA2WEIcolumn4row0, keyboardCA2WEIcolumn4row1, keyboardCA2WEIcolumn4row2, keyboardCA2WEIcolumn4row3,
  keyboardCA2WEIcolumn4row4, keyboardCA2WEIcolumn4row5, keyboardCA2WEIcolumn4row6, keyboardCA2WEIcolumn4row7,
  keyboardCA2WEIcolumn5row0, keyboardCA2WEIcolumn5row1, keyboardCA2WEIcolumn5row2, keyboardCA2WEIcolumn5row3,
  keyboardCA2WEIcolumn5row4, keyboardCA2WEIcolumn5row5, keyboardCA2WEIcolumn5row6, keyboardCA2WEIcolumn5row7,
  keyboardCA2WEIcolumn6row0, keyboardCA2WEIcolumn6row1, keyboardCA2WEIcolumn6row2, keyboardCA2WEIcolumn6row3,
  keyboardCA2WEIcolumn6row4, keyboardCA2WEIcolumn6row5, keyboardCA2WEIcolumn6row6, keyboardCA2WEIcolumn6row7,
  keyboardCA2WEIcolumn7row0, keyboardCA2WEIcolumn7row1, keyboardCA2WEIcolumn7row2, keyboardCA2WEIcolumn7row3,
  keyboardCA2WEIcolumn7row4, keyboardCA2WEIcolumn7row5, keyboardCA2WEIcolumn7row6, keyboardCA2WEIcolumn7row7,
  keyboardCA2WEIcolumn8row0, keyboardCA2WEIcolumn8row1, keyboardCA2WEIcolumn8row2, keyboardCA2WEIcolumn8row3,
  keyboardCA2WEIcolumn8row4, keyboardCA2WEIcolumn8row5, keyboardCA2WEIcolumn8row6, keyboardCA2WEIcolumn8row7,
  keyboardCA2WEIcolumn9row0, keyboardCA2WEIcolumn9row1, keyboardCA2WEIcolumn9row2, keyboardCA2WEIcolumn9row3,
  keyboardCA2WEIcolumn9row4, keyboardCA2WEIcolumn9row5, keyboardCA2WEIcolumn9row6, keyboardCA2WEIcolumn9row7,
  keyboardCA2WEIcolumn10row0, keyboardCA2WEIcolumn10row1, keyboardCA2WEIcolumn10row2, keyboardCA2WEIcolumn10row3,
  keyboardCA2WEIcolumn10row4, keyboardCA2WEIcolumn10row5, keyboardCA2WEIcolumn10row6, keyboardCA2WEIcolumn10row7,
  keyboardCA2WEIcolumn11row0, keyboardCA2WEIcolumn11row1, keyboardCA2WEIcolumn11row2, keyboardCA2WEIcolumn11row3,
  keyboardCA2WEIcolumn11row4, keyboardCA2WEIcolumn11row5, keyboardCA2WEIcolumn11row6, keyboardCA2WEIcolumn11row7,
  keyboardCA2WEIcolumn12row0, keyboardCA2WEIcolumn12row1, keyboardCA2WEIcolumn12row2, keyboardCA2WEIcolumn12row3,
  keyboardCA2WEIcolumn12row4, keyboardCA2WEIcolumn12row5, keyboardCA2WEIcolumn12row6, keyboardCA2WEIcolumn12row7
};
static const HOSTKEYBOARDOP keyboardCA2WEcolumnops[13] = {
  keyboardCA2WEcolumn0, keyboardCA2WEcolumn1, keyboardCA2WEcolumn2, keyboardCA2WEcolumn3,
  keyboardCA2WEcolumn4, keyboardCA2WEcolumn5, keyboardCA2WEcolumn6, keyboardCA2WEcolumn7,
  keyboardCA2WEcolumn8, keyboardCA2WEcolumn9, keyboardCA2WEcolumn10, keyboardCA2WEcolumn11,
  keyboardCA2WEcolumn12
};
static const HOSTKEYBOARDOP keyboardCA2columnops[12] = {
  keyboardCA2column0, keyboardCA2column1, keyboardCA2column2, keyboardCA2column3,
  keyboardCA2column4, keyboardCA2column5, keyboardCA2column6, keyboardCA2column7,
  keyboardCA2column8, keyboardCA2column9, keyboardCA2column10, keyboardCA2column11
};

void setkeyboardops(int columns)
{
  HOSTMAP *hmap = &hostmap;
  int i,j;

  for (j=0; j<128; j+=16)
  {
    for (i=0; i<columns; i++)
    {
      hmap->keyboardops[j+i] = keyboardWEIcolumnops[(i<<3)+((j>>4)&7)];
    }
    for (i=columns; i<16; i++)
    {
      hmap->keyboardops[j+i] = keyboardWEInocolumn;
    }
  }
  for (j=128; j<256; j+=16)
  {
    for (i=0; i<columns; i++)
    {
      hmap->keyboardops[j+i] = keyboardCA2WEIcolumnops[(i<<3)+((j>>4)&7)];
    }
    for (i=columns; i<16; i++)
    {
      hmap->keyboardops[j+i] = keyboardCA2WEInocolumn;
    }
  }
  for (j=256; j<384; j+=16)
  {
    for (i=0; i<columns-1; i++)
    {
      hmap->keyboardops[j+i] = keyboardcolumnops[i];
    }
    for (i=columns-1; i<15; i++)
    {
      hmap->keyboardops[j+i] = keyboardnocolumn;
    }
    hmap->keyboardops[j+i] = keyboardmax;
  }
  for (j=384; j<512; j+=16)
  {
    for (i=0; i<columns-1; i++)
    {
      hmap->keyboardops[j+i] = keyboardCA2columnops[i];
    }
    for (i=columns-1; i<15; i++)
    {
      hmap->keyboardops[j+i] = keyboardCA2nocolumn;
    }
    hmap->keyboardops[j+i] = keyboardCA2max;
  }
  for (j=512; j<640; j+=16)
  {
    for (i=0; i<columns; i++)
    {
      hmap->keyboardops[j+i] = keyboardWEcolumnops[i];
    }
    for (i=columns; i<16; i++)
    {
      hmap->keyboardops[j+i] = keyboardWEnocolumn;
    }
  }
  for (j=640; j<768; j+=16)
  {
    for (i=0; i<columns; i++)
    {
      hmap->keyboardops[j+i] = keyboardCA2WEcolumnops[i];
    }
    for (i=columns; i<16; i++)
    {
      hmap->keyboardops[j+i] = keyboardCA2WEnocolumn;
    }
  }
  for (j=768; j<896; j+=16)
  {
    for (i=0; i<columns-1; i++)
    {
      hmap->keyboardops[j+i] = keyboardcolumnops[i];
    }
    for (i=columns-1; i<15; i++)
    {
      hmap->keyboardops[j+i] = keyboardnocolumn;
    }
    hmap->keyboardops[j+i] = keyboardmax;
  }
  for (j=896; j<1024; j+=16)
  {
    for (i=0; i<columns-1; i++)
    {
      hmap->keyboardops[j+i] = keyboardCA2columnops[i];
    }
    for (i=columns-1; i<15; i++)
    {
      hmap->keyboardops[j+i] = keyboardCA2nocolumn;
    }
    hmap->keyboardops[j+i] = keyboardCA2max;
  }
}
