/*>videoread.c
 *
 * BeebIt - BBC Micro Model B Emulator
 *
 * Cycle-level video emulation
 *
 * (C) Copyright Crispian Daniels, 2024-2025
 *
 * Email: <convertedgames@3insdale.me.uk>
 */

#include "hostmap.h"
#include "beebit.h"
#include "video.h"

extern HOSTMAP* videoulaloadfasteven(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoulaloadfastevenR(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoulaloadfastodd(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoulaloadfastoddR(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoulaloadslowodd(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoulaloadslowoddR(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoularate0shift(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoularate0shiftR(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoularate1shift(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoularate1shiftR(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoularate2shift(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoularate2shiftR(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoularate3shift(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoularate3shiftR(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoularate0pshift(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoularate0pshiftR(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoularate1pshift(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoularate1pshiftR(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoularate2pshift(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoularate2pshiftR(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoularate3pshift(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoularate3pshiftR(HOSTMAP* hmap, uintptr_t value);

const VIDEOULALOADOP videoulaloadset[32] = {
  videoularate0shift, videoulaloadslowodd, videoularate0shiftR, videoulaloadslowoddR,
  videoularate1shift, videoulaloadslowodd, videoularate1shiftR, videoulaloadslowoddR,
  videoularate2shift, videoulaloadslowodd, videoularate2shiftR, videoulaloadslowoddR,
  videoularate3shift, videoulaloadslowodd, videoularate3shiftR, videoulaloadslowoddR,
  videoulaloadfasteven, videoulaloadfastodd, videoulaloadfastevenR, videoulaloadfastoddR,
  videoulaloadfasteven, videoulaloadfastodd, videoulaloadfastevenR, videoulaloadfastoddR,
  videoulaloadfasteven, videoulaloadfastodd, videoulaloadfastevenR, videoulaloadfastoddR,
  videoulaloadfasteven, videoulaloadfastodd, videoulaloadfastevenR, videoulaloadfastoddR
};
const VIDEOULALOADOP videoulaploadset[32] = {
  videoularate0pshift, videoulaloadslowodd, videoularate0pshiftR, videoulaloadslowoddR,
  videoularate1pshift, videoulaloadslowodd, videoularate1pshiftR, videoulaloadslowoddR,
  videoularate2pshift, videoulaloadslowodd, videoularate2pshiftR, videoulaloadslowoddR,
  videoularate3pshift, videoulaloadslowodd, videoularate3pshiftR, videoulaloadslowoddR,
  videoulaloadfasteven, videoulaloadfastodd, videoulaloadfastevenR, videoulaloadfastoddR,
  videoulaloadfasteven, videoulaloadfastodd, videoulaloadfastevenR, videoulaloadfastoddR,
  videoulaloadfasteven, videoulaloadfastodd, videoulaloadfastevenR, videoulaloadfastoddR,
  videoulaloadfasteven, videoulaloadfastodd, videoulaloadfastevenR, videoulaloadfastoddR
};

static inline HOSTMAP* teletextloadeven(HOSTMAP* hmap, uintptr_t value)
{
  uintptr_t queue = hmap->B_teletext.queue;
  value &= 0x7F;
  if (hmap->peripheral_code&VIDEODISPLAYDISPLAY)
    value |= 0x80;
  else
    value &= ~0x80;
  queue = ((queue<<8) & 0xFFFFFFFF) | value;
  return videoloadteletext(hmap, queue);
}

static inline HOSTMAP* teletextloadevenR(HOSTMAP* hmap, uintptr_t value)
{
  return videoloadteletext(hmap, (hmap->B_teletext.queue<<8) & 0xFFFFFFFF);
}

static inline HOSTMAP* teletextloadodd(HOSTMAP* hmap, uintptr_t value)
{
  if (hmap->B_teletext.queue & 0x00808000U)
    return videoshiftteletext(hmap);
  return hmap;
}

static inline HOSTMAP* teletextloadoddR(HOSTMAP* hmap, uintptr_t value)
{
  uintptr_t queue = hmap->B_teletext.queue;
  hmap->B_teletext.queue = queue & ~0xFF;
  if (queue & 0x00808000U)
    return videoshiftteletext(hmap);
  return hmap;
}

HOSTMAP* videoulaloadfasteven(HOSTMAP* hmap, uintptr_t value)
{
  hmap->A_videoula.shiftregister = (uint32_t)value;
  return teletextloadeven(hmap, value);
}

HOSTMAP* videoulaloadfastevenR(HOSTMAP* hmap, uintptr_t value)
{
  hmap->A_videoula.shiftregister = (uint32_t)value;
  return teletextloadevenR(hmap, value);
}

HOSTMAP* videoulaloadfastodd(HOSTMAP* hmap, uintptr_t value)
{
  hmap->A_videoula.shiftregister = (uint32_t)value;
  return teletextloadodd(hmap, value);
}

HOSTMAP* videoulaloadfastoddR(HOSTMAP* hmap, uintptr_t value)
{
  hmap->A_videoula.shiftregister = (uint32_t)value;
  return teletextloadoddR(hmap, value);
}

HOSTMAP* videoulaloadslowodd(HOSTMAP* hmap, uintptr_t value)
{
  hmap->B_crtc.step_state += VIDEOSTEPIDLEFLAG;
  hmap->A_videoula.shiftregister = (uint32_t)value;
  return teletextloadodd(hmap, value);
}

HOSTMAP* videoulaloadslowoddR(HOSTMAP* hmap, uintptr_t value)
{
  hmap->B_crtc.step_state += VIDEOSTEPIDLEFLAG;
  hmap->A_videoula.shiftregister = (uint32_t)value;
  return teletextloadoddR(hmap, value);
}

HOSTMAP* videoularate0shift(HOSTMAP* hmap, uintptr_t value)
{
  hmap->B_crtc.step_state -= VIDEOSTEPIDLEFLAG;
  hmap->A_videoula.shiftregister = (hmap->A_videoula.shiftregister<<1)|0x01;
  return teletextloadeven(hmap, value);
}

HOSTMAP* videoularate0shiftR(HOSTMAP* hmap, uintptr_t value)
{
  hmap->B_crtc.step_state -= VIDEOSTEPIDLEFLAG;
  hmap->A_videoula.shiftregister = (hmap->A_videoula.shiftregister<<1)|0x01;
  return teletextloadevenR(hmap, value);
}

HOSTMAP* videoularate1shift(HOSTMAP* hmap, uintptr_t value)
{
  hmap->B_crtc.step_state -= VIDEOSTEPIDLEFLAG;
  hmap->A_videoula.shiftregister = (hmap->A_videoula.shiftregister<<2)|0x03;
  return teletextloadeven(hmap, value);
}

HOSTMAP* videoularate1shiftR(HOSTMAP* hmap, uintptr_t value)
{
  hmap->B_crtc.step_state -= VIDEOSTEPIDLEFLAG;
  hmap->A_videoula.shiftregister = (hmap->A_videoula.shiftregister<<2)|0x03;
  return teletextloadevenR(hmap, value);
}

HOSTMAP* videoularate2shift(HOSTMAP* hmap, uintptr_t value)
{
  hmap->B_crtc.step_state -= VIDEOSTEPIDLEFLAG;
  hmap->A_videoula.shiftregister = (hmap->A_videoula.shiftregister<<4)|0x0F;
  return teletextloadeven(hmap, value);
}

HOSTMAP* videoularate2shiftR(HOSTMAP* hmap, uintptr_t value)
{
  hmap->B_crtc.step_state -= VIDEOSTEPIDLEFLAG;
  hmap->A_videoula.shiftregister = (hmap->A_videoula.shiftregister<<4)|0x0F;
  return teletextloadevenR(hmap, value);
}

HOSTMAP* videoularate3shift(HOSTMAP* hmap, uintptr_t value)
{
  hmap->B_crtc.step_state -= VIDEOSTEPIDLEFLAG;
  hmap->A_videoula.shiftregister = 0xFF;
  return teletextloadeven(hmap, value);
}

HOSTMAP* videoularate3shiftR(HOSTMAP* hmap, uintptr_t value)
{
  hmap->B_crtc.step_state -= VIDEOSTEPIDLEFLAG;
  hmap->A_videoula.shiftregister = 0xFF;
  return teletextloadevenR(hmap, value);
}

HOSTMAP* videoularate0pshift(HOSTMAP* hmap, uintptr_t value)
{
  hmap->B_crtc.step_state -= VIDEOSTEPIDLEFLAG;
  hmap->A_videoula.shiftregister = (hmap->A_videoula.shiftregister<<1)|0x01010101;
  return teletextloadeven(hmap, value);
}

HOSTMAP* videoularate0pshiftR(HOSTMAP* hmap, uintptr_t value)
{
  hmap->B_crtc.step_state -= VIDEOSTEPIDLEFLAG;
  hmap->A_videoula.shiftregister = (hmap->A_videoula.shiftregister<<1)|0x01010101;
  return teletextloadevenR(hmap, value);
}

HOSTMAP* videoularate1pshift(HOSTMAP* hmap, uintptr_t value)
{
  hmap->B_crtc.step_state -= VIDEOSTEPIDLEFLAG;
  hmap->A_videoula.shiftregister = (hmap->A_videoula.shiftregister<<2)|0x03030303;
  return teletextloadeven(hmap, value);
}

HOSTMAP* videoularate1pshiftR(HOSTMAP* hmap, uintptr_t value)
{
  hmap->B_crtc.step_state -= VIDEOSTEPIDLEFLAG;
  hmap->A_videoula.shiftregister = (hmap->A_videoula.shiftregister<<2)|0x03030303;
  return teletextloadevenR(hmap, value);
}

HOSTMAP* videoularate2pshift(HOSTMAP* hmap, uintptr_t value)
{
  hmap->B_crtc.step_state -= VIDEOSTEPIDLEFLAG;
  hmap->A_videoula.shiftregister = (hmap->A_videoula.shiftregister<<4)|0x0F0F0F0F;
  return teletextloadeven(hmap, value);
}

HOSTMAP* videoularate2pshiftR(HOSTMAP* hmap, uintptr_t value)
{
  hmap->B_crtc.step_state -= VIDEOSTEPIDLEFLAG;
  hmap->A_videoula.shiftregister = (hmap->A_videoula.shiftregister<<4)|0x0F0F0F0F;
  return teletextloadevenR(hmap, value);
}

HOSTMAP* videoularate3pshift(HOSTMAP* hmap, uintptr_t value)
{
  hmap->B_crtc.step_state -= VIDEOSTEPIDLEFLAG;
  hmap->A_videoula.shiftregister = 0xFFFFFFFF;
  return teletextloadeven(hmap, value);
}

HOSTMAP* videoularate3pshiftR(HOSTMAP* hmap, uintptr_t value)
{
  hmap->B_crtc.step_state -= VIDEOSTEPIDLEFLAG;
  hmap->A_videoula.shiftregister = 0xFFFFFFFF;
  return teletextloadevenR(hmap, value);
}

extern HOSTMAP* videoreadM0even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadM0odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadS0even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadS0odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadM10even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadM10odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadS10even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadS10odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadM11even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadM11odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadS11even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadS11odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadM12even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadM12odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadS12even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadS12odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadM13even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadM13odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadS13even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadS13odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadM2evenb(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadM2oddb(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadM2even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadM2odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadS2even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadS2odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadM30evenb(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadM30oddb(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpM0even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpM0odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpS0even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpS0odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpM10even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpM10odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpS10even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpS10odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpM11even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpM11odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpS11even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpS11odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpM12even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpM12odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpS12even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpS12odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpM13even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpM13odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpS13even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpS13odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpM2evenb(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpM2oddb(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpM2even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpM2odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpS2even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpS2odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpM30evenb(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpM30oddb(HOSTMAP* hmap, uintptr_t scan_code);

HOSTMAP* videoreadM0even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->memory[scan_code>>15];

  hmap->B_crtc.scan_code = scan_code | VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.evenRloadop(hmap, p[line]);
}

HOSTMAP* videoreadM0odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->memory[scan_code>>15];

  hmap->B_crtc.scan_code = scan_code & ~VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.oddRloadop(hmap, p[line]);
}

HOSTMAP* videoreadS0even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->shadow[scan_code>>15];

  hmap->B_crtc.scan_code = scan_code | VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.evenRloadop(hmap, p[line]);
}

HOSTMAP* videoreadS0odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->shadow[scan_code>>15];

  hmap->B_crtc.scan_code = scan_code & ~VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.oddRloadop(hmap, p[line]);
}

HOSTMAP* videoreadM10even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->memory[((scan_code>>15)+0x4000)&0x7FFF];

  hmap->B_crtc.scan_code = scan_code | VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.evenRloadop(hmap, p[line]);
}

HOSTMAP* videoreadM10odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->memory[((scan_code>>15)+0x4000)&0x7FFF];

  hmap->B_crtc.scan_code = scan_code & ~VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.oddRloadop(hmap, p[line]);
}

HOSTMAP* videoreadS10even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->shadow[((scan_code>>15)+0x4000)&0x7FFF];

  hmap->B_crtc.scan_code = scan_code | VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.evenRloadop(hmap, p[line]);
}

HOSTMAP* videoreadS10odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->shadow[((scan_code>>15)+0x4000)&0x7FFF];

  hmap->B_crtc.scan_code = scan_code & ~VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.oddRloadop(hmap, p[line]);
}

HOSTMAP* videoreadM11even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->memory[((scan_code>>15)+0x6000)&0x7FFF];

  hmap->B_crtc.scan_code = scan_code | VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.evenRloadop(hmap, p[line]);
}

HOSTMAP* videoreadM11odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->memory[((scan_code>>15)+0x6000)&0x7FFF];

  hmap->B_crtc.scan_code = scan_code & ~VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.oddRloadop(hmap, p[line]);
}

HOSTMAP* videoreadS11even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->shadow[((scan_code>>15)+0x6000)&0x7FFF];

  hmap->B_crtc.scan_code = scan_code | VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.evenRloadop(hmap, p[line]);
}

HOSTMAP* videoreadS11odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->shadow[((scan_code>>15)+0x6000)&0x7FFF];

  hmap->B_crtc.scan_code = scan_code & ~VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.oddRloadop(hmap, p[line]);
}

HOSTMAP* videoreadM12even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->memory[((scan_code>>15)+0x3000)&0x7FFF];

  hmap->B_crtc.scan_code = scan_code | VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.evenRloadop(hmap, p[line]);
}

HOSTMAP* videoreadM12odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->memory[((scan_code>>15)+0x3000)&0x7FFF];

  hmap->B_crtc.scan_code = scan_code & ~VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.oddRloadop(hmap, p[line]);
}

HOSTMAP* videoreadS12even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->shadow[((scan_code>>15)+0x3000)&0x7FFF];

  hmap->B_crtc.scan_code = scan_code | VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.evenRloadop(hmap, p[line]);
}

HOSTMAP* videoreadS12odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->shadow[((scan_code>>15)+0x3000)&0x7FFF];

  hmap->B_crtc.scan_code = scan_code & ~VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.oddRloadop(hmap, p[line]);
}

HOSTMAP* videoreadM13even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->memory[((scan_code>>15)+0x5800)&0x7FFF];

  hmap->B_crtc.scan_code = scan_code | VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.evenRloadop(hmap, p[line]);
}

HOSTMAP* videoreadM13odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->memory[((scan_code>>15)+0x5800)&0x7FFF];

  hmap->B_crtc.scan_code = scan_code & ~VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.oddRloadop(hmap, p[line]);
}

HOSTMAP* videoreadS13even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->shadow[((scan_code>>15)+0x5800)&0x7FFF];

  hmap->B_crtc.scan_code = scan_code | VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.evenRloadop(hmap, p[line]);
}

HOSTMAP* videoreadS13odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->shadow[((scan_code>>15)+0x5800)&0x7FFF];

  hmap->B_crtc.scan_code = scan_code & ~VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.oddRloadop(hmap, p[line]);
}

HOSTMAP* videoreadM2evenb(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t characteraddress,value;

  hmap->B_crtc.scan_code = scan_code | VIDEOREADODDFLAG;
  characteraddress = ((scan_code>>15) & 0x4000) | 0x3C00 | (scan_code>>18);
  value = hmap->memory[characteraddress];
  return hmap->B_videoula.evenloadop(hmap, value);
}

HOSTMAP* videoreadM2oddb(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t characteraddress,value;

  hmap->B_crtc.scan_code = scan_code & ~VIDEOREADODDFLAG;
  characteraddress = (((scan_code>>15) & 0x4000) | 0x3C00 | (scan_code>>18)) ^ 0x40;
  value = hmap->memory[characteraddress];
  return hmap->B_videoula.oddloadop(hmap, value);
}

HOSTMAP* videoreadM2even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t characteraddress,value;

  hmap->B_crtc.scan_code = scan_code | VIDEOREADODDFLAG;
  characteraddress = 0x7C00 | (scan_code>>18);
  value = hmap->memory[characteraddress];
  return hmap->B_videoula.evenloadop(hmap, value);
}

HOSTMAP* videoreadM2odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t characteraddress,value;

  hmap->B_crtc.scan_code = scan_code & ~VIDEOREADODDFLAG;
  characteraddress = (0x7C00 | (scan_code>>18)) ^ 0x40;
  value = hmap->memory[characteraddress];
  return hmap->B_videoula.oddloadop(hmap, value);
}

HOSTMAP* videoreadS2even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t characteraddress,value;

  hmap->B_crtc.scan_code = scan_code | VIDEOREADODDFLAG;
  characteraddress = 0x7C00 | (scan_code>>18);
  value = hmap->shadow[characteraddress];
  return hmap->B_videoula.evenloadop(hmap, value);
}

HOSTMAP* videoreadS2odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t characteraddress,value;

  hmap->B_crtc.scan_code = scan_code & ~VIDEOREADODDFLAG;
  characteraddress = (0x7C00 | (scan_code>>18)) ^ 0x40;
  value = hmap->shadow[characteraddress];
  return hmap->B_videoula.oddloadop(hmap, value);
}

HOSTMAP* videoreadM30evenb(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t characteraddress,value;

  hmap->B_crtc.scan_code = scan_code | VIDEOREADODDFLAG;
  characteraddress = ((~scan_code>>15) & 0x4000) | 0x3C00 | (scan_code>>18);
  value = hmap->memory[characteraddress];
  return hmap->B_videoula.evenloadop(hmap, value);
}

HOSTMAP* videoreadM30oddb(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t characteraddress,value;

  hmap->B_crtc.scan_code = scan_code & ~VIDEOREADODDFLAG;
  characteraddress = ((~scan_code>>15) & 0x4000) | 0x3C00 | (scan_code>>18);
  value = hmap->memory[characteraddress];
  return hmap->B_videoula.oddloadop(hmap, value);
}

HOSTMAP* videoreadpM0even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->memory[scan_code>>15];

  hmap->B_crtc.scan_code = scan_code | VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.evenloadop(hmap, value);
}

HOSTMAP* videoreadpM0odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->memory[scan_code>>15];

  hmap->B_crtc.scan_code = scan_code & ~VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.oddRloadop(hmap, value);
}

HOSTMAP* videoreadpS0even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->shadow[scan_code>>15];

  hmap->B_crtc.scan_code = scan_code | VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.evenRloadop(hmap, value);
}

HOSTMAP* videoreadpS0odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->shadow[scan_code>>15];

  hmap->B_crtc.scan_code = scan_code & ~VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.oddRloadop(hmap, value);
}

HOSTMAP* videoreadpM10even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->memory[((scan_code>>15)+0x4000)&0x7FFF];

  hmap->B_crtc.scan_code = scan_code | VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.evenRloadop(hmap, value);
}

HOSTMAP* videoreadpM10odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->memory[((scan_code>>15)+0x4000)&0x7FFF];

  hmap->B_crtc.scan_code = scan_code & ~VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.oddRloadop(hmap, value);
}

HOSTMAP* videoreadpS10even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->shadow[((scan_code>>15)+0x4000)&0x7FFF];

  hmap->B_crtc.scan_code = scan_code | VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.evenRloadop(hmap, value);
}

HOSTMAP* videoreadpS10odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->shadow[((scan_code>>15)+0x4000)&0x7FFF];

  hmap->B_crtc.scan_code = scan_code & ~VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.oddRloadop(hmap, value);
}

HOSTMAP* videoreadpM11even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->memory[((scan_code>>15)+0x6000)&0x7FFF];

  hmap->B_crtc.scan_code = scan_code | VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.evenRloadop(hmap, value);
}

HOSTMAP* videoreadpM11odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->memory[((scan_code>>15)+0x6000)&0x7FFF];

  hmap->B_crtc.scan_code = scan_code & ~VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.oddRloadop(hmap, value);
}

HOSTMAP* videoreadpS11even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->shadow[((scan_code>>15)+0x6000)&0x7FFF];

  hmap->B_crtc.scan_code = scan_code | VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.evenRloadop(hmap, value);
}

HOSTMAP* videoreadpS11odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->shadow[((scan_code>>15)+0x6000)&0x7FFF];

  hmap->B_crtc.scan_code = scan_code & ~VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.oddRloadop(hmap, value);
}

HOSTMAP* videoreadpM12even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->memory[((scan_code>>15)+0x3000)&0x7FFF];

  hmap->B_crtc.scan_code = scan_code | VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.evenRloadop(hmap, value);
}

HOSTMAP* videoreadpM12odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->memory[((scan_code>>15)+0x3000)&0x7FFF];

  hmap->B_crtc.scan_code = scan_code & ~VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.oddRloadop(hmap, value);
}

HOSTMAP* videoreadpS12even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->shadow[((scan_code>>15)+0x3000)&0x7FFF];

  hmap->B_crtc.scan_code = scan_code | VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.evenRloadop(hmap, value);
}

HOSTMAP* videoreadpS12odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->shadow[((scan_code>>15)+0x3000)&0x7FFF];

  hmap->B_crtc.scan_code = scan_code & ~VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.oddRloadop(hmap, value);
}

HOSTMAP* videoreadpM13even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->memory[((scan_code>>15)+0x5800)&0x7FFF];

  hmap->B_crtc.scan_code = scan_code | VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.evenRloadop(hmap, value);
}

HOSTMAP* videoreadpM13odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->memory[((scan_code>>15)+0x5800)&0x7FFF];

  hmap->B_crtc.scan_code = scan_code & ~VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.oddRloadop(hmap, value);
}

HOSTMAP* videoreadpS13even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->shadow[((scan_code>>15)+0x5800)&0x7FFF];

  hmap->B_crtc.scan_code = scan_code | VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.evenRloadop(hmap, value);
}

HOSTMAP* videoreadpS13odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->shadow[((scan_code>>15)+0x5800)&0x7FFF];

  hmap->B_crtc.scan_code = scan_code & ~VIDEOREADODDFLAG;
  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.oddRloadop(hmap, value);
}

HOSTMAP* videoreadpM2evenb(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t characteraddress,value;

  hmap->B_crtc.scan_code = scan_code | VIDEOREADODDFLAG;
  characteraddress = ((scan_code>>15) & 0x4000) | 0x3C00 | (scan_code>>18);
  value = hmap->memory[characteraddress];
  return hmap->B_videoula.evenloadop(hmap, (value<<24) | (value<<8) | value);
}

HOSTMAP* videoreadpM2oddb(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t characteraddress,value;

  hmap->B_crtc.scan_code = scan_code & ~VIDEOREADODDFLAG;
  characteraddress = (((scan_code>>15) & 0x4000) | 0x3C00 | (scan_code>>18)) ^ 0x40;
  value = hmap->memory[characteraddress];
  return hmap->B_videoula.oddloadop(hmap, (value<<24) | (value<<8) | value);
}

HOSTMAP* videoreadpM2even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t characteraddress,value;

  hmap->B_crtc.scan_code = scan_code | VIDEOREADODDFLAG;
  characteraddress = 0x7C00 | (scan_code>>18);
  value = hmap->memory[characteraddress];
  return hmap->B_videoula.evenloadop(hmap, (value<<24) | (value<<8) | value);
}

HOSTMAP* videoreadpM2odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t characteraddress,value;

  hmap->B_crtc.scan_code = scan_code & ~VIDEOREADODDFLAG;
  characteraddress = (0x7C00 | (scan_code>>18)) ^ 0x40;
  value = hmap->memory[characteraddress];
  return hmap->B_videoula.oddloadop(hmap, (value<<24) | (value<<8) | value);
}

HOSTMAP* videoreadpS2even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t characteraddress,value;

  hmap->B_crtc.scan_code = scan_code | VIDEOREADODDFLAG;
  characteraddress = 0x7C00 | (scan_code>>18);
  value = hmap->shadow[characteraddress];
  return hmap->B_videoula.evenloadop(hmap, (value<<24) | (value<<8) | value);
}

HOSTMAP* videoreadpS2odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t characteraddress,value;

  hmap->B_crtc.scan_code = scan_code & ~VIDEOREADODDFLAG;
  characteraddress = (0x7C00 | (scan_code>>18)) ^ 0x40;
  value = hmap->shadow[characteraddress];
  return hmap->B_videoula.oddloadop(hmap, (value<<24) | (value<<8) | value);
}

HOSTMAP* videoreadpM30evenb(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t characteraddress,value;

  hmap->B_crtc.scan_code = scan_code | VIDEOREADODDFLAG;
  characteraddress = ((~scan_code>>15) & 0x4000) | 0x3C00 | (scan_code>>18);
  value = hmap->memory[characteraddress];
  return hmap->B_videoula.evenloadop(hmap, (value<<24) | (value<<8) | value);
}

HOSTMAP* videoreadpM30oddb(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t characteraddress,value;

  hmap->B_crtc.scan_code = scan_code & ~VIDEOREADODDFLAG;
  characteraddress = ((~scan_code>>15) & 0x4000) | 0x3C00 | (scan_code>>18);
  value = hmap->memory[characteraddress];
  return hmap->B_videoula.oddloadop(hmap, (value<<24) | (value<<8) | value);
}

VIDEOREADFOUR videoread0four = {
  videoreadM0even, videoreadS0even, videoreadM0odd, videoreadS0odd
};

VIDEOREADFOUR videoread10four = {
  videoreadM10even, videoreadS10even, videoreadM10odd, videoreadS10odd
};

VIDEOREADFOUR videoread11four = {
  videoreadM11even, videoreadS11even, videoreadM11odd, videoreadS11odd
};

VIDEOREADFOUR videoread12four = {
  videoreadM12even, videoreadS12even, videoreadM12odd, videoreadS12odd
};

VIDEOREADFOUR videoread13four = {
  videoreadM13even, videoreadS13even, videoreadM13odd, videoreadS13odd
};

VIDEOREADFOUR videoread2four = {
  videoreadM2even, videoreadS2even, videoreadM2odd, videoreadS2odd
};

VIDEOREADFOUR videoread2fourb = {
  videoreadM2evenb, videoreadM2evenb, videoreadM2oddb, videoreadM2oddb
};

VIDEOREADFOUR videoread30fourb = {
  videoreadM30evenb, videoreadM30evenb, videoreadM30oddb, videoreadM30oddb
};

VIDEOREADTWENTY videoread0twenty = {
  &videoread0four, &videoread10four, &videoread11four, &videoread12four, &videoread13four
};

VIDEOREADTWENTY videoread2twenty = {
  &videoread2four, &videoread2four, &videoread2four, &videoread2four, &videoread2four
};

VIDEOREADTWENTY videoread2twentyb = {
  &videoread2fourb, &videoread30fourb, &videoread30fourb, &videoread2fourb, &videoread30fourb
};

VIDEOREADFOUR videoreadp0four = {
  videoreadpM0even, videoreadpS0even, videoreadpM0odd, videoreadpS0odd
};

VIDEOREADFOUR videoreadp10four = {
  videoreadpM10even, videoreadpS10even, videoreadpM10odd, videoreadpS10odd
};

VIDEOREADFOUR videoreadp11four = {
  videoreadpM11even, videoreadpS11even, videoreadpM11odd, videoreadpS11odd
};

VIDEOREADFOUR videoreadp12four = {
  videoreadpM12even, videoreadpS12even, videoreadpM12odd, videoreadpS12odd
};

VIDEOREADFOUR videoreadp13four = {
  videoreadpM13even, videoreadpS13even, videoreadpM13odd, videoreadpS13odd
};

VIDEOREADFOUR videoreadp2four = {
  videoreadpM2even, videoreadpS2even, videoreadpM2odd, videoreadpS2odd
};

VIDEOREADFOUR videoreadp2fourb = {
  videoreadpM2evenb, videoreadpM2evenb, videoreadpM2oddb, videoreadpM2oddb
};

VIDEOREADFOUR videoreadp30fourb = {
  videoreadpM30evenb, videoreadpM30evenb, videoreadpM30oddb, videoreadpM30oddb
};

VIDEOREADTWENTY videoreadp0twenty = {
  &videoreadp0four, &videoreadp10four, &videoreadp11four, &videoreadp12four, &videoreadp13four
};

VIDEOREADTWENTY videoreadp2twenty = {
  &videoreadp2four, &videoreadp2four, &videoreadp2four, &videoreadp2four, &videoreadp2four
};

VIDEOREADTWENTY videoreadp2twentyb = {
  &videoreadp2fourb, &videoreadp30fourb, &videoreadp30fourb, &videoreadp2fourb, &videoreadp30fourb
};

VIDEOREADSET videoreadset = {
  &videoread0twenty, &videoread2twentyb, &videoread2twenty
};

VIDEOREADSET videoreadpset = {
  &videoreadp0twenty, &videoreadp2twentyb, &videoreadp2twenty
};
