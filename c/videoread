/*>videoread.c
 *
 * BeebIt - BBC Micro Model B Emulator
 *
 * Cycle-level video emulation
 *
 * (C) Copyright Crispian Daniels, 2024-2025
 *
 * Email: <convertedgames@3insdale.me.uk>
 */

#include "hostmap.h"
#include "beebit.h"
#include "video.h"

extern HOSTMAP* videoulaloadeven(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoulaloadevenR(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoulaloadodd(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoulaloadoddR(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoularate0shift(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoularate0shiftR(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoularate1shift(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoularate1shiftR(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoularate2shift(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoularate2shiftR(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoularate3shift(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoularate3shiftR(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoularate0pshift(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoularate0pshiftR(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoularate1pshift(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoularate1pshiftR(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoularate2pshift(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoularate2pshiftR(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoularate3pshift(HOSTMAP* hmap, uintptr_t value);
extern HOSTMAP* videoularate3pshiftR(HOSTMAP* hmap, uintptr_t value);

const VIDEOULALOADOP videoulaloadset[32] = {
  videoularate0shift, videoulaloadodd, videoularate0shiftR, videoulaloadoddR,
  videoularate1shift, videoulaloadodd, videoularate1shiftR, videoulaloadoddR,
  videoularate2shift, videoulaloadodd, videoularate2shiftR, videoulaloadoddR,
  videoularate3shift, videoulaloadodd, videoularate3shiftR, videoulaloadoddR,
  videoulaloadeven, videoulaloadodd, videoulaloadevenR, videoulaloadoddR,
  videoulaloadeven, videoulaloadodd, videoulaloadevenR, videoulaloadoddR,
  videoulaloadeven, videoulaloadodd, videoulaloadevenR, videoulaloadoddR,
  videoulaloadeven, videoulaloadodd, videoulaloadevenR, videoulaloadoddR
};
const VIDEOULALOADOP videoulaploadset[32] = {
  videoularate0pshift, videoulaloadodd, videoularate0pshiftR, videoulaloadoddR,
  videoularate1pshift, videoulaloadodd, videoularate1pshiftR, videoulaloadoddR,
  videoularate2pshift, videoulaloadodd, videoularate2pshiftR, videoulaloadoddR,
  videoularate3pshift, videoulaloadodd, videoularate3pshiftR, videoulaloadoddR,
  videoulaloadeven, videoulaloadodd, videoulaloadevenR, videoulaloadoddR,
  videoulaloadeven, videoulaloadodd, videoulaloadevenR, videoulaloadoddR,
  videoulaloadeven, videoulaloadodd, videoulaloadevenR, videoulaloadoddR,
  videoulaloadeven, videoulaloadodd, videoulaloadevenR, videoulaloadoddR
};

static inline HOSTMAP* teletextloadeven(HOSTMAP* hmap, uintptr_t value)
{
  uintptr_t queue = ((hmap->B_teletext.queue<<8)&0xFFFFFF00) | (value&127);
  if (hmap->peripheral_code&VIDEODISPLAYDISPLAY)
    queue |= 128;
  hmap->B_teletext.queue = queue;

  if (queue)
    return videoloadteletext(hmap, queue);
  else
    return hmap;
}

static inline HOSTMAP* teletextloadevenR(HOSTMAP* hmap, uintptr_t value)
{
  uintptr_t queue = ((hmap->B_teletext.queue<<8)&0xFFFFFF00);
  hmap->B_teletext.queue = queue;

  if (queue)
    return videoloadteletext(hmap, queue);
  else
    return hmap;
}

static inline HOSTMAP* teletextloadodd(HOSTMAP* hmap, uintptr_t value)
{
  uintptr_t queue = hmap->B_teletext.queue;

  if (!(hmap->peripheral_code&VIDEODISPLAYDISPLAY))
  {
    queue |= 64;
    hmap->B_teletext.queue = queue;
  }

  if (queue)
    return videoshiftteletext(hmap);
  else
    return hmap;
}

static inline HOSTMAP* teletextloadoddR(HOSTMAP* hmap, uintptr_t value)
{
  uintptr_t queue = hmap->B_teletext.queue & ~0xFF;
  hmap->B_teletext.queue = queue;

  if (queue)
    return videoshiftteletext(hmap);
  else
    return hmap;
}

HOSTMAP* videoulaloadeven(HOSTMAP* hmap, uintptr_t value)
{
  hmap->A_videoula.shiftregister = (uint32_t)value;
  return teletextloadeven(hmap, value);
}

HOSTMAP* videoulaloadevenR(HOSTMAP* hmap, uintptr_t value)
{
  hmap->A_videoula.shiftregister = (uint32_t)value;
  return teletextloadevenR(hmap, value);
}

HOSTMAP* videoulaloadodd(HOSTMAP* hmap, uintptr_t value)
{
  hmap->A_videoula.shiftregister = (uint32_t)value;
  return teletextloadodd(hmap, value);
}

HOSTMAP* videoulaloadoddR(HOSTMAP* hmap, uintptr_t value)
{
  hmap->A_videoula.shiftregister = (uint32_t)value;
  return teletextloadoddR(hmap, value);
}

HOSTMAP* videoularate0shift(HOSTMAP* hmap, uintptr_t value)
{
  hmap->A_videoula.shiftregister = (hmap->A_videoula.shiftregister<<1)|0x01;
  return teletextloadeven(hmap, value);
}

HOSTMAP* videoularate0shiftR(HOSTMAP* hmap, uintptr_t value)
{
  hmap->A_videoula.shiftregister = (hmap->A_videoula.shiftregister<<1)|0x01;
  return teletextloadevenR(hmap, value);
}

HOSTMAP* videoularate1shift(HOSTMAP* hmap, uintptr_t value)
{
  hmap->A_videoula.shiftregister = (hmap->A_videoula.shiftregister<<2)|0x03;
  return teletextloadeven(hmap, value);
}

HOSTMAP* videoularate1shiftR(HOSTMAP* hmap, uintptr_t value)
{
  hmap->A_videoula.shiftregister = (hmap->A_videoula.shiftregister<<2)|0x03;
  return teletextloadevenR(hmap, value);
}

HOSTMAP* videoularate2shift(HOSTMAP* hmap, uintptr_t value)
{
  hmap->A_videoula.shiftregister = (hmap->A_videoula.shiftregister<<4)|0x0F;
  return teletextloadeven(hmap, value);
}

HOSTMAP* videoularate2shiftR(HOSTMAP* hmap, uintptr_t value)
{
  hmap->A_videoula.shiftregister = (hmap->A_videoula.shiftregister<<4)|0x0F;
  return teletextloadevenR(hmap, value);
}

HOSTMAP* videoularate3shift(HOSTMAP* hmap, uintptr_t value)
{
  hmap->A_videoula.shiftregister = 0xFF;
  return teletextloadeven(hmap, value);
}

HOSTMAP* videoularate3shiftR(HOSTMAP* hmap, uintptr_t value)
{
  hmap->A_videoula.shiftregister = 0xFF;
  return teletextloadevenR(hmap, value);
}

HOSTMAP* videoularate0pshift(HOSTMAP* hmap, uintptr_t value)
{
  hmap->A_videoula.shiftregister = (hmap->A_videoula.shiftregister<<1)|0x01010101;
  return teletextloadeven(hmap, value);
}

HOSTMAP* videoularate0pshiftR(HOSTMAP* hmap, uintptr_t value)
{
  hmap->A_videoula.shiftregister = (hmap->A_videoula.shiftregister<<1)|0x01010101;
  return teletextloadevenR(hmap, value);
}

HOSTMAP* videoularate1pshift(HOSTMAP* hmap, uintptr_t value)
{
  hmap->A_videoula.shiftregister = (hmap->A_videoula.shiftregister<<2)|0x03030303;
  return teletextloadeven(hmap, value);
}

HOSTMAP* videoularate1pshiftR(HOSTMAP* hmap, uintptr_t value)
{
  hmap->A_videoula.shiftregister = (hmap->A_videoula.shiftregister<<2)|0x03030303;
  return teletextloadevenR(hmap, value);
}

HOSTMAP* videoularate2pshift(HOSTMAP* hmap, uintptr_t value)
{
  hmap->A_videoula.shiftregister = (hmap->A_videoula.shiftregister<<4)|0x0F0F0F0F;
  return teletextloadeven(hmap, value);
}

HOSTMAP* videoularate2pshiftR(HOSTMAP* hmap, uintptr_t value)
{
  hmap->A_videoula.shiftregister = (hmap->A_videoula.shiftregister<<4)|0x0F0F0F0F;
  return teletextloadevenR(hmap, value);
}

HOSTMAP* videoularate3pshift(HOSTMAP* hmap, uintptr_t value)
{
  hmap->A_videoula.shiftregister = 0xFFFFFFFF;
  return teletextloadeven(hmap, value);
}

HOSTMAP* videoularate3pshiftR(HOSTMAP* hmap, uintptr_t value)
{
  hmap->A_videoula.shiftregister = 0xFFFFFFFF;
  return teletextloadevenR(hmap, value);
}

extern HOSTMAP* videoreadM0even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadM0odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadS0even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadS0odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadM10even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadM10odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadS10even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadS10odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadM11even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadM11odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadS11even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadS11odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadM12even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadM12odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadS12even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadS12odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadM13even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadM13odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadS13even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadS13odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadM2evenb(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadM2oddb(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadM2even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadM2odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadS2even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadS2odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadM30evenb(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadM30oddb(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpM0even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpM0odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpS0even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpS0odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpM10even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpM10odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpS10even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpS10odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpM11even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpM11odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpS11even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpS11odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpM12even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpM12odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpS12even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpS12odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpM13even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpM13odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpS13even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpS13odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpM2evenb(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpM2oddb(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpM2even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpM2odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpS2even(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpS2odd(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpM30evenb(HOSTMAP* hmap, uintptr_t scan_code);
extern HOSTMAP* videoreadpM30oddb(HOSTMAP* hmap, uintptr_t scan_code);

HOSTMAP* videoreadM0even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->memory[scan_code>>15];

  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.evenRloadop(hmap, p[line]);
}

HOSTMAP* videoreadM0odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->memory[scan_code>>15];

  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.oddRloadop(hmap, p[line]);
}

HOSTMAP* videoreadS0even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->shadow[scan_code>>15];

  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.evenRloadop(hmap, p[line]);
}

HOSTMAP* videoreadS0odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->shadow[scan_code>>15];

  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.oddRloadop(hmap, p[line]);
}

HOSTMAP* videoreadM10even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->memory[((scan_code>>15)+0x4000)&0x7FFF];

  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.evenRloadop(hmap, p[line]);
}

HOSTMAP* videoreadM10odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->memory[((scan_code>>15)+0x4000)&0x7FFF];

  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.oddRloadop(hmap, p[line]);
}

HOSTMAP* videoreadS10even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->shadow[((scan_code>>15)+0x4000)&0x7FFF];

  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.evenRloadop(hmap, p[line]);
}

HOSTMAP* videoreadS10odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->shadow[((scan_code>>15)+0x4000)&0x7FFF];

  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.oddRloadop(hmap, p[line]);
}

HOSTMAP* videoreadM11even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->memory[((scan_code>>15)+0x6000)&0x7FFF];

  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.evenRloadop(hmap, p[line]);
}

HOSTMAP* videoreadM11odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->memory[((scan_code>>15)+0x6000)&0x7FFF];

  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.oddRloadop(hmap, p[line]);
}

HOSTMAP* videoreadS11even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->shadow[((scan_code>>15)+0x6000)&0x7FFF];

  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.evenRloadop(hmap, p[line]);
}

HOSTMAP* videoreadS11odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->shadow[((scan_code>>15)+0x6000)&0x7FFF];

  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.oddRloadop(hmap, p[line]);
}

HOSTMAP* videoreadM12even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->memory[((scan_code>>15)+0x3000)&0x7FFF];

  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.evenRloadop(hmap, p[line]);
}

HOSTMAP* videoreadM12odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->memory[((scan_code>>15)+0x3000)&0x7FFF];

  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.oddRloadop(hmap, p[line]);
}

HOSTMAP* videoreadS12even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->shadow[((scan_code>>15)+0x3000)&0x7FFF];

  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.evenRloadop(hmap, p[line]);
}

HOSTMAP* videoreadS12odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->shadow[((scan_code>>15)+0x3000)&0x7FFF];

  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.oddRloadop(hmap, p[line]);
}

HOSTMAP* videoreadM13even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->memory[((scan_code>>15)+0x5800)&0x7FFF];

  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.evenRloadop(hmap, p[line]);
}

HOSTMAP* videoreadM13odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->memory[((scan_code>>15)+0x5800)&0x7FFF];

  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.oddRloadop(hmap, p[line]);
}

HOSTMAP* videoreadS13even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->shadow[((scan_code>>15)+0x5800)&0x7FFF];

  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.evenRloadop(hmap, p[line]);
}

HOSTMAP* videoreadS13odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line;
  uint8_t* p = &hmap->shadow[((scan_code>>15)+0x5800)&0x7FFF];

  line = hmap->A_crtc.c9low;
  return hmap->B_videoula.oddRloadop(hmap, p[line]);
}

HOSTMAP* videoreadM2evenb(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t characteraddress,value;

  characteraddress = ((scan_code>>15) & 0x4000) | 0x3C00 | (scan_code>>18);
  value = hmap->memory[characteraddress];
  return hmap->B_videoula.evenloadop(hmap, value);
}

HOSTMAP* videoreadM2oddb(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t characteraddress,value;

  characteraddress = (((scan_code>>15) & 0x4000) | 0x3C00 | (scan_code>>18)) ^ 0x40;
  value = hmap->memory[characteraddress];
  return hmap->B_videoula.oddloadop(hmap, value);
}

HOSTMAP* videoreadM2even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t characteraddress,value;

  characteraddress = 0x7C00 | (scan_code>>18);
  value = hmap->memory[characteraddress];
  return hmap->B_videoula.evenloadop(hmap, value);
}

HOSTMAP* videoreadM2odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t characteraddress,value;

  characteraddress = (0x7C00 | (scan_code>>18)) ^ 0x40;
  value = hmap->memory[characteraddress];
  return hmap->B_videoula.oddloadop(hmap, value);
}

HOSTMAP* videoreadS2even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t characteraddress,value;

  characteraddress = 0x7C00 | (scan_code>>18);
  value = hmap->shadow[characteraddress];
  return hmap->B_videoula.evenloadop(hmap, value);
}

HOSTMAP* videoreadS2odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t characteraddress,value;

  characteraddress = (0x7C00 | (scan_code>>18)) ^ 0x40;
  value = hmap->shadow[characteraddress];
  return hmap->B_videoula.oddloadop(hmap, value);
}

HOSTMAP* videoreadM30evenb(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t characteraddress,value;

  characteraddress = ((~scan_code>>15) & 0x4000) | 0x3C00 | (scan_code>>18);
  value = hmap->memory[characteraddress];
  return hmap->B_videoula.evenloadop(hmap, value);
}

HOSTMAP* videoreadM30oddb(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t characteraddress,value;

  characteraddress = ((~scan_code>>15) & 0x4000) | 0x3C00 | (scan_code>>18);
  value = hmap->memory[characteraddress];
  return hmap->B_videoula.oddloadop(hmap, value);
}

HOSTMAP* videoreadpM0even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->memory[scan_code>>15];

  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.evenloadop(hmap, value);
}

HOSTMAP* videoreadpM0odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->memory[scan_code>>15];

  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.oddRloadop(hmap, value);
}

HOSTMAP* videoreadpS0even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->shadow[scan_code>>15];

  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.evenRloadop(hmap, value);
}

HOSTMAP* videoreadpS0odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->shadow[scan_code>>15];

  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.oddRloadop(hmap, value);
}

HOSTMAP* videoreadpM10even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->memory[((scan_code>>15)+0x4000)&0x7FFF];

  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.evenRloadop(hmap, value);
}

HOSTMAP* videoreadpM10odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->memory[((scan_code>>15)+0x4000)&0x7FFF];

  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.oddRloadop(hmap, value);
}

HOSTMAP* videoreadpS10even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->shadow[((scan_code>>15)+0x4000)&0x7FFF];

  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.evenRloadop(hmap, value);
}

HOSTMAP* videoreadpS10odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->shadow[((scan_code>>15)+0x4000)&0x7FFF];

  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.oddRloadop(hmap, value);
}

HOSTMAP* videoreadpM11even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->memory[((scan_code>>15)+0x6000)&0x7FFF];

  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.evenRloadop(hmap, value);
}

HOSTMAP* videoreadpM11odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->memory[((scan_code>>15)+0x6000)&0x7FFF];

  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.oddRloadop(hmap, value);
}

HOSTMAP* videoreadpS11even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->shadow[((scan_code>>15)+0x6000)&0x7FFF];

  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.evenRloadop(hmap, value);
}

HOSTMAP* videoreadpS11odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->shadow[((scan_code>>15)+0x6000)&0x7FFF];

  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.oddRloadop(hmap, value);
}

HOSTMAP* videoreadpM12even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->memory[((scan_code>>15)+0x3000)&0x7FFF];

  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.evenRloadop(hmap, value);
}

HOSTMAP* videoreadpM12odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->memory[((scan_code>>15)+0x3000)&0x7FFF];

  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.oddRloadop(hmap, value);
}

HOSTMAP* videoreadpS12even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->shadow[((scan_code>>15)+0x3000)&0x7FFF];

  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.evenRloadop(hmap, value);
}

HOSTMAP* videoreadpS12odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->shadow[((scan_code>>15)+0x3000)&0x7FFF];

  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.oddRloadop(hmap, value);
}

HOSTMAP* videoreadpM13even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->memory[((scan_code>>15)+0x5800)&0x7FFF];

  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.evenRloadop(hmap, value);
}

HOSTMAP* videoreadpM13odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->memory[((scan_code>>15)+0x5800)&0x7FFF];

  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.oddRloadop(hmap, value);
}

HOSTMAP* videoreadpS13even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->shadow[((scan_code>>15)+0x5800)&0x7FFF];

  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.evenRloadop(hmap, value);
}

HOSTMAP* videoreadpS13odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t line,value;
  uint8_t* p = &hmap->shadow[((scan_code>>15)+0x5800)&0x7FFF];

  line = hmap->A_crtc.c9low;
  value = (p[(line-1)&7]<<24) | (p[(line+1)&7]<<8) | p[line];
  return hmap->B_videoula.oddRloadop(hmap, value);
}

HOSTMAP* videoreadpM2evenb(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t characteraddress,value;

  characteraddress = ((scan_code>>15) & 0x4000) | 0x3C00 | (scan_code>>18);
  value = hmap->memory[characteraddress];
  return hmap->B_videoula.evenloadop(hmap, (value<<24) | (value<<8) | value);
}

HOSTMAP* videoreadpM2oddb(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t characteraddress,value;

  characteraddress = (((scan_code>>15) & 0x4000) | 0x3C00 | (scan_code>>18)) ^ 0x40;
  value = hmap->memory[characteraddress];
  return hmap->B_videoula.oddloadop(hmap, (value<<24) | (value<<8) | value);
}

HOSTMAP* videoreadpM2even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t characteraddress,value;

  characteraddress = 0x7C00 | (scan_code>>18);
  value = hmap->memory[characteraddress];
  return hmap->B_videoula.evenloadop(hmap, (value<<24) | (value<<8) | value);
}

HOSTMAP* videoreadpM2odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t characteraddress,value;

  characteraddress = (0x7C00 | (scan_code>>18)) ^ 0x40;
  value = hmap->memory[characteraddress];
  return hmap->B_videoula.oddloadop(hmap, (value<<24) | (value<<8) | value);
}

HOSTMAP* videoreadpS2even(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t characteraddress,value;

  characteraddress = 0x7C00 | (scan_code>>18);
  value = hmap->shadow[characteraddress];
  return hmap->B_videoula.evenloadop(hmap, (value<<24) | (value<<8) | value);
}

HOSTMAP* videoreadpS2odd(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t characteraddress,value;

  characteraddress = (0x7C00 | (scan_code>>18)) ^ 0x40;
  value = hmap->shadow[characteraddress];
  return hmap->B_videoula.oddloadop(hmap, (value<<24) | (value<<8) | value);
}

HOSTMAP* videoreadpM30evenb(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t characteraddress,value;

  characteraddress = ((~scan_code>>15) & 0x4000) | 0x3C00 | (scan_code>>18);
  value = hmap->memory[characteraddress];
  return hmap->B_videoula.evenloadop(hmap, (value<<24) | (value<<8) | value);
}

HOSTMAP* videoreadpM30oddb(HOSTMAP* hmap, uintptr_t scan_code)
{
  uintptr_t characteraddress,value;

  characteraddress = ((~scan_code>>15) & 0x4000) | 0x3C00 | (scan_code>>18);
  value = hmap->memory[characteraddress];
  return hmap->B_videoula.oddloadop(hmap, (value<<24) | (value<<8) | value);
}

VIDEOREADFOUR videoread0memory4even = {
  videoreadM0even, videoreadM0even,
  videoreadM0even, videoreadM0even
};

VIDEOREADFOUR videoread0memory4odd = {
  videoreadM0odd, videoreadM0odd,
  videoreadM0odd, videoreadM0odd
};

VIDEOREADFOUR videoread0shadow4even = {
  videoreadS0even, videoreadS0even,
  videoreadS0even, videoreadS0even
};

VIDEOREADFOUR videoread0shadow4odd = {
  videoreadS0odd, videoreadS0odd,
  videoreadS0odd, videoreadS0odd
};

VIDEOREADFOUR videoread1memory4even = {
  videoreadM10even, videoreadM11even,
  videoreadM12even, videoreadM13even
};

VIDEOREADFOUR videoread1memory4odd = {
  videoreadM10odd, videoreadM11odd,
  videoreadM12odd, videoreadM13odd
};

VIDEOREADFOUR videoread1shadow4even = {
  videoreadS10even, videoreadS11even,
  videoreadS12even, videoreadS13even
};

VIDEOREADFOUR videoread1shadow4odd = {
  videoreadS10odd, videoreadS11odd,
  videoreadS12odd, videoreadS13odd
};

VIDEOREADFOUR videoread2bmemory4even = {
  videoreadM2evenb, videoreadM2evenb,
  videoreadM2evenb, videoreadM2evenb
};

VIDEOREADFOUR videoread2bmemory4odd = {
  videoreadM2oddb, videoreadM2oddb,
  videoreadM2oddb, videoreadM2oddb
};

VIDEOREADFOUR videoread2memory4even = {
  videoreadM2even, videoreadM2even,
  videoreadM2even, videoreadM2even
};

VIDEOREADFOUR videoread2memory4odd = {
  videoreadM2odd, videoreadM2odd,
  videoreadM2odd, videoreadM2odd
};

VIDEOREADFOUR videoread2shadow4even = {
  videoreadS2even, videoreadS2even,
  videoreadS2even, videoreadS2even
};

VIDEOREADFOUR videoread2shadow4odd = {
  videoreadS2odd, videoreadS2odd,
  videoreadS2odd, videoreadS2odd
};

VIDEOREADFOUR videoread3bmemory4even = {
  videoreadM30evenb, videoreadM30evenb,
  videoreadM2evenb, videoreadM30evenb
};

VIDEOREADFOUR videoread3bmemory4odd = {
  videoreadM30oddb, videoreadM30oddb,
  videoreadM2oddb, videoreadM30oddb
};

VIDEOREADSIXTEEN videoreadmemoryb16even = {
  &videoread0memory4even,
  &videoread1memory4even,
  &videoread2bmemory4even,
  &videoread3bmemory4even
};

VIDEOREADSIXTEEN videoreadmemoryb16odd = {
  &videoread0memory4odd,
  &videoread1memory4odd,
  &videoread2bmemory4odd,
  &videoread3bmemory4odd
};

VIDEOREADSIXTEEN videoreadmemory16even = {
  &videoread0memory4even,
  &videoread1memory4even,
  &videoread2memory4even,
  &videoread2memory4even
};

VIDEOREADSIXTEEN videoreadmemory16odd = {
  &videoread0memory4odd,
  &videoread1memory4odd,
  &videoread2memory4odd,
  &videoread2memory4odd
};

VIDEOREADSIXTEEN videoreadshadow16even = {
  &videoread0shadow4even,
  &videoread1shadow4even,
  &videoread2shadow4even,
  &videoread2shadow4even
};

VIDEOREADSIXTEEN videoreadshadow16odd = {
  &videoread0shadow4odd,
  &videoread1shadow4odd,
  &videoread2shadow4odd,
  &videoread2shadow4odd
};

VIDEOREADFOUR videoreadp0memory4even = {
  videoreadpM0even, videoreadpM0even,
  videoreadpM0even, videoreadpM0even
};

VIDEOREADFOUR videoreadp0memory4odd = {
  videoreadpM0odd, videoreadpM0odd,
  videoreadpM0odd, videoreadpM0odd
};

VIDEOREADFOUR videoreadp0shadow4even = {
  videoreadpS0even, videoreadpS0even,
  videoreadpS0even, videoreadpS0even
};

VIDEOREADFOUR videoreadp0shadow4odd = {
  videoreadpS0odd, videoreadpS0odd,
  videoreadpS0odd, videoreadpS0odd
};

VIDEOREADFOUR videoreadp1memory4even = {
  videoreadpM10even, videoreadpM11even,
  videoreadpM12even, videoreadpM13even
};

VIDEOREADFOUR videoreadp1memory4odd = {
  videoreadpM10odd, videoreadpM11odd,
  videoreadpM12odd, videoreadpM13odd
};

VIDEOREADFOUR videoreadp1shadow4even = {
  videoreadpS10even, videoreadpS11even,
  videoreadpS12even, videoreadpS13even
};

VIDEOREADFOUR videoreadp1shadow4odd = {
  videoreadpS10odd, videoreadpS11odd,
  videoreadpS12odd, videoreadpS13odd
};

VIDEOREADFOUR videoreadp2bmemory4even = {
  videoreadpM2evenb, videoreadpM2evenb,
  videoreadpM2evenb, videoreadpM2evenb
};

VIDEOREADFOUR videoreadp2bmemory4odd = {
  videoreadpM2oddb, videoreadpM2oddb,
  videoreadpM2oddb, videoreadpM2oddb
};

VIDEOREADFOUR videoreadp2memory4even = {
  videoreadpM2even, videoreadpM2even,
  videoreadpM2even, videoreadpM2even
};

VIDEOREADFOUR videoreadp2memory4odd = {
  videoreadpM2odd, videoreadpM2odd,
  videoreadpM2odd, videoreadpM2odd
};

VIDEOREADFOUR videoreadp2shadow4even = {
  videoreadpS2even, videoreadpS2even,
  videoreadpS2even, videoreadpS2even
};

VIDEOREADFOUR videoreadp2shadow4odd = {
  videoreadpS2odd, videoreadpS2odd,
  videoreadpS2odd, videoreadpS2odd
};

VIDEOREADFOUR videoreadp3bmemory4even = {
  videoreadpM30evenb, videoreadpM30evenb,
  videoreadpM2evenb, videoreadpM30evenb
};

VIDEOREADFOUR videoreadp3bmemory4odd = {
  videoreadpM30oddb, videoreadpM30oddb,
  videoreadpM2oddb, videoreadpM30oddb
};

VIDEOREADSIXTEEN videoreadpmemoryb16even = {
  &videoreadp0memory4even,
  &videoreadp1memory4even,
  &videoreadp2bmemory4even,
  &videoreadp3bmemory4even
};

VIDEOREADSIXTEEN videoreadpmemoryb16odd = {
  &videoreadp0memory4odd,
  &videoreadp1memory4odd,
  &videoreadp2bmemory4odd,
  &videoreadp3bmemory4odd
};

VIDEOREADSIXTEEN videoreadpmemory16even = {
  &videoreadp0memory4even,
  &videoreadp1memory4even,
  &videoreadp2memory4even,
  &videoreadp2memory4even
};

VIDEOREADSIXTEEN videoreadpmemory16odd = {
  &videoreadp0memory4odd,
  &videoreadp1memory4odd,
  &videoreadp2memory4odd,
  &videoreadp2memory4odd
};

VIDEOREADSIXTEEN videoreadpshadow16even = {
  &videoreadp0shadow4even,
  &videoreadp1shadow4even,
  &videoreadp2shadow4even,
  &videoreadp2shadow4even
};

VIDEOREADSIXTEEN videoreadpshadow16odd = {
  &videoreadp0shadow4odd,
  &videoreadp1shadow4odd,
  &videoreadp2shadow4odd,
  &videoreadp2shadow4odd
};

VIDEOREADSET videoreadset = {
  &videoreadmemoryb16even, &videoreadmemory16even, &videoreadshadow16even,
  &videoreadmemoryb16odd, &videoreadmemory16odd, &videoreadshadow16odd
};

VIDEOREADSET videoreadpset = {
  &videoreadpmemoryb16even, &videoreadpmemory16even, &videoreadpshadow16even,
  &videoreadpmemoryb16odd, &videoreadpmemory16odd, &videoreadpshadow16odd
};
