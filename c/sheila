/*>sheila.c
 *
 * BeebIt - BBC Micro Model B Emulator
 *
 * (C) Copyright Michael J Foot, 1998-2024
 *
 * Email: <mjfoot.nz@gmail.com>
 *
 * Addressing optimization contributed by Crispian Daniels in 2024
 *
 * Email: <convertedgames@3insdale.me.uk>
 */

#include <stddef.h>
#include <stdio.h>
#include <string.h>
#include "hostmap.h"
#include "6502cpu.h"
#include "sheila.h"
#include "6522sysvia.h"
#include "6522usrvia.h"
#include "6845crtc.h"
#include "6850acia.h"
#include "8271fdc.h"
#include "adc.h"
#include "beebit.h"
/*#include "kernel.h"*/
#include "main.h"
#include "riscos.h"
/*#include "swis.h"*/
#include "tube.h"
#include "videoula.h"
#include "1770fdc.h"

/*extern _kernel_swi_regs regs;*/

/*sheila*/
/*char sheila_b[0x100];*/

void sheilareset(void)
{
  const int slow_mask = 0x0F00FF0F;
  int i,j;
  HOSTHIGHOP* readhigh = &hostmap.readhigh[0x200];
  HOSTHIGHOP* writehigh = &hostmap.writehigh[0x200];

  /*&FE00 - &FE07 (CRTC)*/
  for (i=0x00; i<0x08; i+=0x02)
  {
    readhigh[i] = crtc00read;
    readhigh[i+1] = crtc01read;
    writehigh[i] = crtc00write;
    writehigh[i+1] = crtc01write;
  }

  /*&FE08 - &FE0F (ACIA)*/
  for (i=0x08; i<0x10; i+=0x02)
  {
    readhigh[i] = acia00read;
    readhigh[i+1] = acia01read;
    writehigh[i] = acia00write;
    writehigh[i+1] = acia01write;
  }

  /*&FE10 - &FE17 (SERIALULA)*/
  for (i=0x10; i<0x18; i+=0x01)
  {
    readhigh[i] = serialularead;
    writehigh[i] = serialulawrite;
  }

  if (beebit_machinetype == MACHINE_MASTER128 || beebit_machinetype == MACHINE_COMPACT)
  {
    /*&FE18 - &FE1F (ADC)*/
    for (i=0x18; i<0x20; i+=0x04)
    {
      readhigh[i] = adc00read;
      readhigh[i+1] = adc01read;
      readhigh[i+2] = adc02read;
      readhigh[i+3] = adc02read;
      writehigh[i] = adcwrite;
      writehigh[i+1] = adcwrite;
      writehigh[i+2] = adcwrite;
      writehigh[i+3] = adcwrite;
    }
  }
  else
  {
    /*&FE18 - &FE1F (ECONET STATION NUMBER/INTOFF)*/
    for (i=0x18; i<0x20; i+=0x01)
    {
      readhigh[i] = hostconstantreadFE;
      writehigh[i] = hostnowrite;
    }
  }

  if (beebit_machinetype == MACHINE_MASTER128 || beebit_machinetype == MACHINE_COMPACT)
  {
    /*&FE20 - &FE23 (VIDEOULA)*/
    for (i=0x20; i<0x24; i+=0x02)
    {
      readhigh[i] = hostconstantread00;
      readhigh[i+1] = hostconstantread00;
      writehigh[i] = videoula00write;
      writehigh[i+1] = videoula01write;
    }
    /*&FE24 - &FE27 (FDC INTERFACE CONTROL REG)*/
    for (i=0x24; i<0x28; i+=0x01)
    {
      readhigh[i] = w1770controlread;
      writehigh[i] = w1770controlwrite_m;
    }
    /*&FE28 - &FE2F (FDC INTERFACE)*/
    for (i=0x28; i<0x30; i+=0x04)
    {
      readhigh[i] = w1770statusread;
      readhigh[i+1] = w1770trackread;
      readhigh[i+2] = w1770sectorread;
      readhigh[i+3] = w1770dataread;
      writehigh[i] = w1770commandwrite;
      writehigh[i+1] = w1770trackwrite;
      writehigh[i+2] = w1770sectorwrite;
      writehigh[i+3] = w1770datawrite;
    }
  }
  else
  {
    /*&FE20 - &FE2F (VIDEOULA/INTON)*/
    for (i=0x20; i<0x30; i+=0x02)
    {
      readhigh[i] = hostconstantreadFE;
      readhigh[i+1] = hostconstantreadFE;
      writehigh[i] = videoula00write;
      writehigh[i+1] = videoula01write;
    }
  }

  if (beebit_machinetype == MACHINE_MASTER128 || beebit_machinetype == MACHINE_COMPACT)
  {
    /*&FE30 - &FE33 (ROMSEL)*/
    for (i=0x30; i<0x34; i++)
    {
      readhigh[i] = romselread;
      writehigh[i] = romselwrite_m;
    }
    /*&FE34 - &FE37 (ACCCON)*/
    for (i=0x34; i<0x38; i++)
    {
      readhigh[i] = accconread;
      writehigh[i] = accconwrite_m;
    }
    /*&FE38 - &FE3B (INTOFF)*/
    for (i=0x38; i<0x3C; i++)
    {
      readhigh[i] = hostconstantread00;
      writehigh[i] = hostnowrite;
    }
    /*&FE3C - &FE3F (INTON)*/
    for (i=0x3C; i<0x40; i++)
    {
      readhigh[i] = hostconstantread00;
      writehigh[i] = hostnowrite;
    }
  }
  else if (beebit_machinetype == MACHINE_MODELBPLUS)
  {
    for (j=0x30; j<0x40; j+=0x08)
    {
      /*&FE30 - &FE33 (ROMSEL)*/
      for (i=0x00; i<0x04; i++)
      {
        readhigh[j+i] = romselread;
        writehigh[j+i] = romselwrite_bp;
      }
      /*&FE34 - &FE37 (ACCCON)*/
      for (i=0x04; i<0x08; i++)
      {
        readhigh[j+i] = accconread;
        writehigh[j+i] = accconwrite_bp;
      }
    }
  }
  else
  {
    /*&FE30 - &FE33 (ROMSEL)*/
    for (i=0x30; i<0x34; i++)
    {
      readhigh[i] = hostconstantreadFE;
      writehigh[i] = romselwrite_b;
    }
    /*&FE34 - &FE3F (ROMSEL in place of ACCCON, INTOFF and INTON)*/
    /*ignoring writes directed at Master*/
    for (i=0x34; i<0x40; i++)
    {
      readhigh[i] = hostconstantreadFE;
      writehigh[i] = hostnowrite;
    }
  }

  /*&FE40-&FE5F*/
  for (i=0x40; i<0x60; i+=0x10)
  {
    readhigh[i] = systemvia00read;
    readhigh[i+0x02] = systemvia02read;
    readhigh[i+0x03] = systemvia03read;
    readhigh[i+0x04] = systemvia04read;
    readhigh[i+0x05] = systemvia05read;
    readhigh[i+0x06] = systemvia06read;
    readhigh[i+0x07] = systemvia07read;
    readhigh[i+0x08] = systemvia08read;
    readhigh[i+0x09] = systemvia09read;
    readhigh[i+0x0A] = systemvia0Aread;
    readhigh[i+0x0B] = systemvia0Bread;
    readhigh[i+0x0C] = systemvia0Cread;
    readhigh[i+0x0D] = systemvia0Dread;
    readhigh[i+0x0E] = systemvia0Eread;
    writehigh[i+0x02] = systemvia02write;
    writehigh[i+0x03] = systemvia03write;
    writehigh[i+0x04] = systemvia04write;
    writehigh[i+0x05] = systemvia05write;
    writehigh[i+0x06] = systemvia06write;
    writehigh[i+0x07] = systemvia07write;
    writehigh[i+0x08] = systemvia08write;
    writehigh[i+0x09] = systemvia09write;
    writehigh[i+0x0A] = systemvia0Awrite;
    writehigh[i+0x0B] = systemvia0Bwrite;
    writehigh[i+0x0C] = systemvia0Cwrite;
    writehigh[i+0x0D] = systemvia0Dwrite;
    writehigh[i+0x0E] = systemvia0Ewrite;
    if (beebit_machinetype == MACHINE_MASTER128 || beebit_machinetype == MACHINE_COMPACT)
    {
      readhigh[i+0x01] = systemvia01read_m;
      readhigh[i+0x0F] = systemvia0Fread_m;
      writehigh[i] = systemvia00write_m;
      writehigh[i+0x01] = systemvia01write_m;
      writehigh[i+0x0F] = systemvia0Fwrite_m;
    }
    else
    {
      readhigh[i+0x01] = systemvia01read_b;
      readhigh[i+0x0F] = systemvia0Fread_b;
      writehigh[i] = systemvia00write_b;
      writehigh[i+0x01] = systemvia01write_b;
      writehigh[i+0x0F] = systemvia0Fwrite_b;
    }
  }

  /*&FE60-&FE7F*/
  for (i=0x60; i<0x80; i+=0x10)
  {
    readhigh[i] = uservia00read;
    readhigh[i+0x01] = uservia01read;
    readhigh[i+0x02] = uservia02read;
    readhigh[i+0x03] = uservia03read;
    readhigh[i+0x04] = uservia04read;
    readhigh[i+0x05] = uservia05read;
    readhigh[i+0x06] = uservia06read;
    readhigh[i+0x07] = uservia07read;
    readhigh[i+0x08] = uservia08read;
    readhigh[i+0x09] = uservia09read;
    readhigh[i+0x0A] = uservia0Aread;
    readhigh[i+0x0B] = uservia0Bread;
    readhigh[i+0x0C] = uservia0Cread;
    readhigh[i+0x0D] = uservia0Dread;
    readhigh[i+0x0E] = uservia0Eread;
    readhigh[i+0x0F] = uservia0Fread;
    writehigh[i] = uservia00write;
    writehigh[i+0x01] = uservia01write;
    writehigh[i+0x02] = uservia02write;
    writehigh[i+0x03] = uservia03write;
    writehigh[i+0x04] = uservia04write;
    writehigh[i+0x05] = uservia05write;
    writehigh[i+0x06] = uservia06write;
    writehigh[i+0x07] = uservia07write;
    writehigh[i+0x08] = uservia08write;
    writehigh[i+0x09] = uservia09write;
    writehigh[i+0x0A] = uservia0Awrite;
    writehigh[i+0x0B] = uservia0Bwrite;
    writehigh[i+0x0C] = uservia0Cwrite;
    writehigh[i+0x0D] = uservia0Dwrite;
    writehigh[i+0x0E] = uservia0Ewrite;
    writehigh[i+0x0F] = uservia0Fwrite;
  }

  if (beebit_machinetype == MACHINE_MODELBPLUS)
  {
    /*&FE80-&FE9F (8271 or 1770)*/
    for (j=0x80; j<0xA0; j+=0x08)
    {
      /*&FE80 - &FE83 (FDC INTERFACE CONTROL REG)*/
      for (i=0x00; i<0x04; i+=0x01)
      {
        readhigh[j+i] = w1770controlread;
        writehigh[j+i] = w1770controlwrite_bp;
      }
      /*&FE84 - &FE87 (FDC INTERFACE)*/
      readhigh[j+0x04] = w1770statusread;
      readhigh[j+0x05] = w1770trackread;
      readhigh[j+0x06] = w1770sectorread;
      readhigh[j+0x07] = w1770dataread;
      writehigh[j+0x04] = w1770commandwrite;
      writehigh[j+0x05] = w1770trackwrite;
      writehigh[j+0x06] = w1770sectorwrite;
      writehigh[j+0x07] = w1770datawrite;
    }
  }
  else if (beebit_machinetype == MACHINE_MODELB)
  {
    /*&FE80-&FE9F (8271 or 1770)*/
    for (j=0x80; j<0xA0; j+=0x08)
    {
      readhigh[j] = i8271statusread;
      readhigh[j+1] = i8271resultread;
      readhigh[j+2] = hostconstantreadFE;
      readhigh[j+3] = hostconstantreadFE;
      writehigh[j] = i8271commandwrite;
      writehigh[j+1] = i8271parameterwrite;
      writehigh[j+2] = i8271resetwrite;
      writehigh[j+3] = hostnowrite;

      for (i=0x04; i<0x08; i+=0x01)
      {
        readhigh[j+i] = i8271dataread;
        writehigh[j+i] = i8271datawrite;
      }
    }
  }
  else
  {
    for (i=0x80; i<0xA0; i+=0x01)
    {
      readhigh[i] = hostconstantread00;
      writehigh[i] = hostnowrite;
    }
  }

  /*&FEA0-&FEBF (ECONET)*/
  for (i=0xA0; i<0xC0; i+=0x01)
  {
    readhigh[i] = hostconstantreadFE;
    writehigh[i] = hostnowrite;
  }

  if (beebit_machinetype == MACHINE_MASTER128 || beebit_machinetype == MACHINE_COMPACT)
  {
    /*&FEC0-&FEDF (ECONET)*/
    for (i=0xC0; i<0xE0; i++)
    {
      readhigh[i] = hostconstantreadFF;
      writehigh[i] = hostnowrite;
    }
  }
  else
  {
    /*FEC0-&FEDF (ADC)*/
    for (i=0xC0; i<0xE0; i+=0x04)
    {
      readhigh[i] = adc00read;
      readhigh[i+1] = adc01read;
      readhigh[i+2] = adc02read;
      readhigh[i+3] = adc02read;
      writehigh[i] = adcwrite;
      writehigh[i+1] = adcwrite;
      writehigh[i+2] = adcwrite;
      writehigh[i+3] = adcwrite;
    }
  }

  /*FEE0-&FEFF (TUBE)*/
  if (beebit_machinetype == MACHINE_MASTER128 || beebit_machinetype == MACHINE_COMPACT)
  {
    for (i=0xE0; i<0x100; i+=0x01)
    {
      readhigh[i] = hostconstantreadFF;
      writehigh[i] = hostnowrite;
    }
  }
  else
  {
    for (i=0xE0; i<0x100; i+=0x01)
    {
      readhigh[i] = hostconstantreadFE;
      writehigh[i] = hostnowrite;
    }
  }

  memcpy(&hostmap.stretchedreadhigh[0x200], readhigh, sizeof(R6502BUSOP)<<8);
  memcpy(&hostmap.stretchedwritehigh[0x200], writehigh, sizeof(R6502BUSOP)<<8);

  for (i=0; i<0x100; i++)
  {
    if (slow_mask & (1<<(i>>3)))
    {
      readhigh[i] = h6502startreadstretch;
      writehigh[i] = h6502startwritestretch;
    }
  }
}

HOSTMAP* hostconstantread00(HOSTMAP* hmap, uintptr_t address_code)
{
  hmap->m = 0x00;
  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* hostconstantreadFE(HOSTMAP* hmap, uintptr_t address_code)
{
  hmap->m = 0xFE;
  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* hostconstantreadFF(HOSTMAP* hmap, uintptr_t address_code)
{
  hmap->m = 0xFF;
  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* romselread(HOSTMAP* hmap, uintptr_t address_code)
{
  hmap->m = hmap->romsel;
  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* accconread(HOSTMAP* hmap, uintptr_t address_code)
{
  hmap->m = hmap->acccon;
  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* hostnowrite(HOSTMAP* hmap, uintptr_t address_code)
{
  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* romselwrite_b(HOSTMAP* hmap, uintptr_t address_code)
{
  R6502CPUMAP* cmap = (R6502CPUMAP*)hmap;
  int nrom = (hmap->m & 0x0F);
  cmap->busops[0x0B].op = cmap->busops[0x0A].op
      = cmap->busops[0x09].op = cmap->busops[0x08].op = hmap->read8000s[nrom];
  cmap->busops[0x1B].op = cmap->busops[0x1A].op
      = cmap->busops[0x19].op = cmap->busops[0x18].op = hmap->write8000s[nrom];
  hmap->romsel = hmap->m;
  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* romselwrite_bp(HOSTMAP* hmap, uintptr_t address_code)
{
  R6502CPUMAP* cmap = (R6502CPUMAP*)hmap;
  int nrom = (hmap->m & 0x0F);
  if (hmap->m & 0x80)
  {
    /*ROMSEL b7 (RAM) (&8000-&AFFF)*/
    cmap->busops[0x0A].op = cmap->busops[0x09].op
        = cmap->busops[0x08].op = hmap->paging.read8000_ram;
    cmap->busops[0x1A].op = cmap->busops[0x19].op
        = cmap->busops[0x18].op = hmap->paging.write8000_ram;
    if (hmap->acccon & 0x80)
    {
      /*ACCCON b7 (VDUSEL) (&3000-&7FFF)*/
      cmap->busops[0x07].op = cmap->busops[0x06].op
      = cmap->busops[0x05].op = cmap->busops[0x04].op
      = cmap->busops[0x03].op = hmap->paging.read3000_ramram;
      cmap->busops[0x17].op = cmap->busops[0x16].op
      = cmap->busops[0x15].op = cmap->busops[0x14].op
      = cmap->busops[0x13].op = hmap->paging.write3000_ramram;
    }
  }
  else
  {
    cmap->busops[0x0A].op = cmap->busops[0x09].op
        = cmap->busops[0x08].op = hmap->read8000s[nrom];
    cmap->busops[0x1A].op = cmap->busops[0x19].op
        = cmap->busops[0x18].op = hmap->write8000s[nrom];
    if (hmap->acccon & 0x80)
    {
      /*ACCCON b7 (VDUSEL) (&3000-&7FFF)*/
      cmap->busops[0x07].op = cmap->busops[0x06].op
      = cmap->busops[0x05].op = cmap->busops[0x04].op
      = cmap->busops[0x03].op = hmap->paging.read3000_ram;
      cmap->busops[0x17].op = cmap->busops[0x16].op
      = cmap->busops[0x15].op = cmap->busops[0x14].op
      = cmap->busops[0x13].op = hmap->paging.write3000_ram;
    }
  }
  cmap->busops[0x0B].op = hmap->read8000s[nrom];
  cmap->busops[0x1B].op = hmap->write8000s[nrom];
  hmap->romsel = hmap->m;
  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* romselwrite_m(HOSTMAP* hmap, uintptr_t address_code)
{
  R6502CPUMAP* cmap = (R6502CPUMAP*)hmap;
  int nrom = (hmap->m & 0x0F);
  if (hmap->m & 0x80)
  {
    /*ROMSEL b7 (RAM) (&8000-&8FFF)*/
    cmap->busops[0x08].op = hmap->paging.read8000_ram;
    cmap->busops[0x18].op = hmap->paging.write8000_ram;
  }
  else
  {
    cmap->busops[0x08].op = hmap->read8000s[nrom];
    cmap->busops[0x18].op = hmap->write8000s[nrom];
  }
  cmap->busops[0x0B].op = cmap->busops[0x0A].op
      = cmap->busops[0x09].op = hmap->read8000s[nrom];
  cmap->busops[0x1B].op = cmap->busops[0x1A].op
      = cmap->busops[0x19].op = hmap->write8000s[nrom];
  hmap->romsel = hmap->m;
  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* accconwrite_bp(HOSTMAP* hmap, uintptr_t address_code)
{
  R6502CPUMAP* cmap = (R6502CPUMAP*)hmap;
  if (hmap->m & 0x80)
  {
    /*ACCCON b7 (VDUSEL) (&3000-&7FFF)*/
    if (hmap->romsel & 0x80)
    {
      /*ROMSEL b7 (RAM) (&8000-&AFFF)*/
      cmap->busops[0x07].op = cmap->busops[0x06].op
      = cmap->busops[0x05].op = cmap->busops[0x04].op
      = cmap->busops[0x03].op = hmap->paging.read3000_ramram;
      cmap->busops[0x17].op = cmap->busops[0x16].op
      = cmap->busops[0x15].op = cmap->busops[0x14].op
      = cmap->busops[0x13].op = hmap->paging.write3000_ramram;
    }
    else
    {
      cmap->busops[0x07].op = cmap->busops[0x06].op
      = cmap->busops[0x05].op = cmap->busops[0x04].op
      = cmap->busops[0x03].op = hmap->paging.read3000_ram;
      cmap->busops[0x17].op = cmap->busops[0x16].op
      = cmap->busops[0x15].op = cmap->busops[0x14].op
      = cmap->busops[0x13].op = hmap->paging.write3000_ram;
    }
  }
  else
  {
    cmap->busops[0x07].op = cmap->busops[0x06].op
        = cmap->busops[0x05].op = cmap->busops[0x04].op
        = cmap->busops[0x03].op = hmap->paging.read3000;
    cmap->busops[0x17].op = cmap->busops[0x16].op
        = cmap->busops[0x15].op = cmap->busops[0x14].op
        = cmap->busops[0x13].op = hmap->paging.write3000;
  }
  hmap->acccon = hmap->m;
  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* accconwrite_m(HOSTMAP* hmap, uintptr_t address_code)
{
  R6502CPUMAP* cmap = (R6502CPUMAP*)hmap;
  switch (hmap->m & 0x06)
  {
    case 0x00:
      /*RAM*/
      cmap->busops[0x07].op = cmap->busops[0x06].op
          = cmap->busops[0x05].op = cmap->busops[0x04].op
          = cmap->busops[0x03].op = hmap->paging.read3000;
      cmap->busops[0x17].op = cmap->busops[0x16].op
          = cmap->busops[0x15].op = cmap->busops[0x14].op
          = cmap->busops[0x13].op = hmap->paging.write3000;
      break;
    case 0x02:
      /*ACCCON b1 (E)*/
      cmap->busops[0x07].op = cmap->busops[0x06].op
          = cmap->busops[0x05].op = cmap->busops[0x04].op
          = cmap->busops[0x03].op = hmap->paging.read3000_e;
      cmap->busops[0x17].op = cmap->busops[0x16].op
          = cmap->busops[0x15].op = cmap->busops[0x14].op
          = cmap->busops[0x13].op = hmap->paging.write3000_e;
      break;
    case 0x04:
    case 0x06:
      /*ACCCON b2 (X)*/
      cmap->busops[0x07].op = cmap->busops[0x06].op
          = cmap->busops[0x05].op = cmap->busops[0x04].op
          = cmap->busops[0x03].op = hmap->paging.read3000_x;
      cmap->busops[0x17].op = cmap->busops[0x16].op
          = cmap->busops[0x15].op = cmap->busops[0x14].op
          = cmap->busops[0x13].op = hmap->paging.write3000_x;
      break;
  }
  if (hmap->m & 0x08)
  {
    /*ACCCON b3 (Y)*/
    /*&C000-&DFFF*/
    cmap->busops[0x0D].op = cmap->busops[0x0C].op = hmap->paging.readC000_y;
    cmap->busops[0x1D].op = cmap->busops[0x1C].op = hmap->paging.writeC000_y;
  }
  else
  {
    /*&C000-&DFFF*/
    cmap->busops[0x0D].op = cmap->busops[0x0C].op = cmap->busops[0x0E].op;
    cmap->busops[0x1D].op = cmap->busops[0x1C].op = cmap->busops[0x1E].op;
  }

  if (hmap->m & 0x80)
  {
    /*IRR*/
    r6502startinterrupt(cmap);
    hmap->m &= 0x7F;
  }
  hmap->acccon = hmap->m;
  R6502_JUMP_FROM_HIGH_OP(hmap)
}
