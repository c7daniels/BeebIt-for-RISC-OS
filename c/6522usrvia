/*>6522usrvia.c
 *
 * BeebIt - BBC Micro Model B Emulator
 *
 * Rockwell 6522 Versatile Interface Adapter (VIA) [1MHz]
 *
 * (C) Copyright Michael J Foot, 1998-2024
 *
 * Email: <mjfoot.nz@gmail.com>
 *
 * Addressing optimization contributed by Crispian Daniels in 2024
 *
 * Email: <convertedgames@3insdale.me.uk>
 */

/* 0xffff * 2 = 0x1fffe +2 = 0x20000 */

/*ACR bits*/
/*b7 = output enable*/
/*b6 = free-run enable*/
/*b5 = timer 2 control (0=timed interrupt,1=countdown with pulses)*/
/*b1 = PB latching enabled*/
/*b0 = PA latching enabled*/

#include <stddef.h>
#include <stdio.h>
#include "hostmap.h"
#include "6502cpu.h"
#include "6522usrvia.h"
#include "beebit.h"
#include "main.h"
#include "kernel.h"
#include "keyboard.h"
#include "swis.h"
#include "riscos.h"

/*User VIA*/
extern _kernel_swi_regs regs;

static inline void userviasetirq(HOSTMAP *hmap)
{
  R6502CPUMAP* cmap = (R6502CPUMAP*)hmap;

  if (hmap->A_usrvia.ifr & hmap->A_usrvia.ier & 0x7F)
  {
    hmap->A_usrvia.ifr |= 0x80;
    cmap->irq |= IRQ_6522USRVIA;
  }
  else
  {
    hmap->A_usrvia.ifr &= 0x7F;
    cmap->irq &= IRQ_NOT6522USRVIA;
  }
}

void userviaamxmouse(void)
{
  HOSTMAP* hmap = &hostmap;

  if ((hmap->A_usrvia.ifr & 0x18) == 0)
  {
    if ((hmap->amx.targetx != hmap->amx.currentx) || (hmap->amx.targety != hmap->amx.currenty))
    {
      if (hmap->amx.targetx != hmap->amx.currentx)
      {
        hmap->A_usrvia.ifr |= 0x10;
        if (hmap->amx.targetx < hmap->amx.currentx)
        {
          hmap->A_usrvia.irb &= ~0x01;
          hmap->A_usrvia.portb &= ~0x01;
          hmap->amx.currentx--;
        }
        else
        {
          hmap->A_usrvia.irb |= 0x01;
          hmap->A_usrvia.portb |= 0x01;
          hmap->amx.currentx++;
        }
      }

      if (hmap->amx.targety != hmap->amx.currenty)
      {
        hmap->A_usrvia.ifr |= 0x08;
        if (hmap->amx.targety > hmap->amx.currenty)
        {
          hmap->A_usrvia.irb |= 0x04;
          hmap->A_usrvia.portb |= 0x04;
          hmap->amx.currenty++;
        }
        else
        {
          hmap->A_usrvia.irb &= ~0x04;
          hmap->A_usrvia.portb &= ~0x04;
          hmap->amx.currenty--;
        }
      }
      userviasetirq(hmap);
    }
  }
}

static intptr_t userviapickcyclestogo(void)
{
  HOSTMAP* hmap = &hostmap;
  intptr_t cyclestogo;

  // the interrupt flag is set after the counter has passed through zero
  if (!(hmap->A_usrvia.acr & 0x20))
  {
    if (hmap->B_usrvia.t1doubled < hmap->B_usrvia.t2doubled)
    {
      cyclestogo = hmap->B_usrvia.t1doubled + 2;
    }
    else
    {
      cyclestogo = hmap->B_usrvia.t2doubled + 2;
    }
  }
  else
  {
    cyclestogo = hmap->B_usrvia.t1doubled + 2;
  }

  if (hmap->amx.timer > 0 && hmap->amx.timer < cyclestogo)
  {
    cyclestogo = hmap->amx.timer;
  }

  if (hmap->A_usrvia.aftert1)
  {
    cyclestogo = 1;
  }

  return cyclestogo;
}

void userviastartreset(int lfull)
{
  HOSTMAP* hmap = &hostmap;
  intptr_t expiryoffset;

  if (lfull)
  {
    hmap->B_usrvia.t1doubled = 0;
    hmap->B_usrvia.t2doubled = 0;
    hmap->A_usrvia.sr = 0;
  }
  else
  {
    HOSTMAP_GET_PERIPHERAL_CYCLE_COUNT(expiryoffset, hmap, usrvia)

    hmap->B_usrvia.t1doubled -= expiryoffset;

    if (!(hmap->A_usrvia.acr & 0x20))
    {
      hmap->B_usrvia.t2doubled -= expiryoffset;
    }
  }

  hmap->A_usrvia.ier = 0x80;
  hmap->A_usrvia.ifr = 0x00;
  hmap->A_usrvia.ddra = 0; /*input*/
  hmap->A_usrvia.ddrb = 0; /*input*/
  hmap->A_usrvia.t1ll = 0xFF;
  hmap->A_usrvia.t1lh = 0xFF;
  hmap->A_usrvia.t2ll = 0xFF;
  hmap->A_usrvia.acr = 0;
  hmap->A_usrvia.pcr = 0;
  hmap->A_usrvia.ora = 0xFF;
  hmap->A_usrvia.ira = 0xFF;
  hmap->A_usrvia.orb = 0xFF;
  hmap->A_usrvia.irb = 0xFF;
  hmap->A_usrvia.porta = 0xFF;
  hmap->A_usrvia.portb = 0xFF;

  hmap->A_usrvia.aftert1 = FALSE;
  hmap->A_usrvia.t1setint = FALSE;
  hmap->A_usrvia.t2setint = FALSE;
  userviasetirq(hmap);
  hmap->amx.timer = 0;
  hmap->amx.buttons = 0;

  hmap->cycles.usrvia_original = 0;
  hmap->cycles.usrvia_togo = 0;
}

void userviafinishreset(void)
{
  HOSTMAP* hmap = &hostmap;
  intptr_t expiryoffset;
  HOSTMAP_GET_1MHZ_PERIPHERAL_TOGO_FOR_SNAPSHOT_OFFSET(expiryoffset, hmap, usrvia)

  hmap->B_usrvia.t1doubled += expiryoffset;
  hmap->B_usrvia.t2doubled += expiryoffset;

  hmap->cycles.usrvia_togo = userviapickcyclestogo();
  hmap->cycles.usrvia_original = hmap->cycles.usrvia_togo;

  HOSTMAP_LIMIT_CYCLES_TO_GO(hmap, hmap->cycles.usrvia_togo)
}

void userviabeforesnapshot(void)
{
  HOSTMAP* hmap = &hostmap;
  intptr_t expiryoffset;
  HOSTMAP_GET_1MHZ_PERIPHERAL_TOGO_FOR_SNAPSHOT_OFFSET(expiryoffset, hmap, usrvia)

  hmap->B_usrvia.t1doubled -= expiryoffset;
  if (!(hmap->A_usrvia.acr & 0x20))
  {
    /*one-shot mode*/
    hmap->B_usrvia.t2doubled -= expiryoffset;
  }
}

void userviaaftersnapshot(void)
{
  HOSTMAP* hmap = &hostmap;
  intptr_t expiryoffset;
  HOSTMAP_GET_1MHZ_PERIPHERAL_TOGO_FOR_SNAPSHOT_OFFSET(expiryoffset, hmap, usrvia)

  hmap->B_usrvia.t1doubled += expiryoffset;
  HOSTMAP_LIMIT_PERIPHERAL_CYCLES_TO_GO(hmap, usrvia, hmap->B_usrvia.t1doubled + 2)
  if (!(hmap->A_usrvia.acr & 0x20))
  {
    /*one-shot mode*/
    hmap->B_usrvia.t2doubled += expiryoffset;
    HOSTMAP_LIMIT_PERIPHERAL_CYCLES_TO_GO(hmap, usrvia, hmap->B_usrvia.t2doubled + 2)
  }

  userviasetirq(hmap);
}

HOSTMAP* userviaatzerocycles(HOSTMAP* hmap)
{
  /*we are dealing with a 1MHz device here*/
  hmap->B_usrvia.t1doubled -= hmap->cycles.usrvia_original;

  if (hmap->B_usrvia.t1doubled == -2)
  {
    switch (hmap->A_usrvia.acr & 0xC0)
    {
      case 0x00:
        /*output disabled and one-shot mode*/
        /*timed interrupt each time T1 is loaded*/
        /*ELITE uses this one*/
        if (hmap->A_usrvia.t1setint)
        {
          /*T1 interrupt flag set*/
          hmap->A_usrvia.ifr |= 0x40;
          hmap->A_usrvia.t1setint = FALSE;
        }
        break;
      case 0x40:
        /*output disabled and free-run mode*/
        /*continuous interrupts*/
        /*REVS, SKIRMISH AND RIG ATTACK USE THIS ONE!*/
         if (hmap->A_usrvia.t1setint)
          /*T1 interrupt flag set*/
          hmap->A_usrvia.ifr |= 0x40;
        break;
      case 0x80:
        /*output enabled and one-shot mode*/
        /*timed interrupt each time T1 is loaded*/
        if (hmap->A_usrvia.t1setint)
        {
          /*PB7 goes high*/
          hmap->A_usrvia.portb |= 0x80;
          /*T1 interrupt flag set*/
          hmap->A_usrvia.ifr |= 0x40;
          hmap->A_usrvia.t1setint = FALSE;
        }
        break;
      case 0xC0:
        /*output enabled and free-run mode*/
        /*continuous interrupts*/
        hmap->A_usrvia.portb ^= 0x80;
        if (hmap->A_usrvia.t1setint)
          /*T1 interrupt flag set*/
          hmap->A_usrvia.ifr |= 0x40;
        break;
    }

    hmap->B_usrvia.t1doubled += 0x20000;
    hmap->A_usrvia.aftert1 = TRUE;
  }
  else if (hmap->A_usrvia.aftert1)
  {
    if (hmap->A_usrvia.acr & 0x40)
    {
      hmap->B_usrvia.t1doubled = ((hmap->A_usrvia.t1lh<<9) | (hmap->A_usrvia.t1ll<<1)) + 1;
    }
    hmap->A_usrvia.aftert1 = 0;
  }

  if (!(hmap->A_usrvia.acr & 0x20))
  {
    hmap->B_usrvia.t2doubled -= hmap->cycles.usrvia_original;

    if (hmap->B_usrvia.t2doubled == -2)
    {
      if (hmap->A_usrvia.t2setint)
      {
        /*on completion of the timing interval,
          T2 interrupt flag is set (IFR b5)*/
        hmap->A_usrvia.ifr |= 0x20;
        hmap->A_usrvia.t2setint=FALSE;
      }

      hmap->B_usrvia.t2doubled += 0x20000;
    }
  }

  if (hmap->amx.timer > 0)
  {
    hmap->amx.timer -= hmap->cycles.usrvia_original;

    if (hmap->amx.timer == 0)
    {
      if (beebit_mouseemulation == MOUSE_AMXMOUSE)
        userviaamxmouse();
    }
  }

  hmap->cycles.usrvia_togo = hmap->cycles.usrvia_original = userviapickcyclestogo();

  userviasetirq(hmap);

  return hmap;
}

HOSTMAP* uservia00read(HOSTMAP* hmap, uintptr_t address_code)
{
  intptr_t expiryoffset;
  unsigned int nresult;

  /*input/output reg b*/
  /*PCR & 0x20 = CB2 input*/
  /*PCR & 0x40 = CB2 active edge input*/
  /*independant mode*/
  if (((hmap->A_usrvia.pcr & 0xE0) == 0x20) OR ((hmap->A_usrvia.pcr & 0xE0) == 0x60))
  {
    /*clear b4 (CB1)*/
    hmap->A_usrvia.ifr &= 0xEF;
  }
  else
  {
    /*clear b4,b3 (CB1,CB2)*/
    hmap->A_usrvia.ifr &= 0xE7;
  }
  /*userviasetirq(hmap);*/
  /*reads output register bit in orb. pin level has no effect*/
  nresult = (hmap->A_usrvia.orb & hmap->A_usrvia.ddrb);

  if (hmap->A_usrvia.acr & 0x02)
  {
    /*input latching enabled*/
    /*read input level on irb*/
    nresult |= (hmap->A_usrvia.irb & ~hmap->A_usrvia.ddrb);
  }
  else
  {
    /*input latching disabled*/
    /*read input level on PB pin*/
    nresult |= (hmap->A_usrvia.portb & ~hmap->A_usrvia.ddrb);
  }

  if (beebit_mouseemulation == MOUSE_AMXMOUSE)
  {
    /*AMX mouse stuff*/
    _kernel_swi(OS_Mouse,&regs,&regs);
    hmap->amx.targetx = regs.r[0];
    hmap->amx.targety = regs.r[1];
    hmap->amx.buttons = ((regs.r[2] & 0x04) >> 2);
    hmap->amx.buttons |= (regs.r[2] & 0x02);
    hmap->amx.buttons |= ((regs.r[2] & 0x01) << 2);

    nresult &= 0x1F;
    nresult |= (hmap->amx.buttons ^ 7) << 5;
    hmap->A_usrvia.ifr &= 0xE7;

    userviasetirq(hmap);

    if ((hmap->amx.targetx != hmap->amx.currentx) OR (hmap->amx.targety != hmap->amx.currenty))
    {
      /*set trigger*/
      HOSTMAP_GET_1MHZ_PERIPHERAL_TOGO_FROM_WRITE_OFFSET(expiryoffset, hmap, usrvia)
      hmap->amx.timer = (500<<1) + expiryoffset;
      HOSTMAP_LIMIT_PERIPHERAL_CYCLES_TO_GO(hmap, usrvia, hmap->amx.timer)
    }
    else
    {
      /*clear trigger*/
      hmap->amx.timer = 0;
    }
  }
  hmap->m = nresult;

  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* uservia01read(HOSTMAP* hmap, uintptr_t address_code)
{
  /*input/output reg a*/
  /*hmap->A_usrvia.pcr & 0x02 = CA2 input*/
  /*hmap->A_usrvia.pcr & 0x04 = CA2 active edge input*/
  /*independant mode*/
  if (((hmap->A_usrvia.pcr & 0x0E) == 0x02) OR ((hmap->A_usrvia.pcr & 0x0E) == 0x06))
  {
    /*independant interrupt*/
    /*clear b2 (CA1)*/
    hmap->A_usrvia.ifr &= 0xFD;
  }
  else
  {
    /*clear b2,b1 (CA1,CA2)*/
    hmap->A_usrvia.ifr &= 0xFC;
  }
  userviasetirq(hmap);
  if (hmap->A_usrvia.acr & 0x01)
  {
    /*input latching enabled*/
    hmap->m = hmap->A_usrvia.ira;
  }
  else
  {
    /*input latching disabled*/
    hmap->m = hmap->A_usrvia.porta;
  }

  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* uservia02read(HOSTMAP* hmap, uintptr_t address_code)
{
  hmap->m = hmap->A_usrvia.ddrb;

  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* uservia03read(HOSTMAP* hmap, uintptr_t address_code)
{
  hmap->m = hmap->A_usrvia.ddra;

  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* uservia04read(HOSTMAP* hmap, uintptr_t address_code)
{
  intptr_t cyclecount;

  /*T1 low order counter*/
  /*T1 interrupt flag is cleared (IFR b6)*/
  hmap->A_usrvia.ifr &= 0xBF;
  userviasetirq(hmap);
  HOSTMAP_GET_PERIPHERAL_CYCLE_COUNT(cyclecount, hmap, usrvia)
  hmap->m = ((hmap->B_usrvia.t1doubled - cyclecount)>>1)&0xFF;

  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* uservia05read(HOSTMAP* hmap, uintptr_t address_code)
{
  intptr_t cyclecount;

  /*T1 high order counter*/
  HOSTMAP_GET_PERIPHERAL_CYCLE_COUNT(cyclecount, hmap, usrvia)
  hmap->m = ((hmap->B_usrvia.t1doubled - cyclecount)>>9)&0xFF;

  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* uservia06read(HOSTMAP* hmap, uintptr_t address_code)
{
  /*T1 low order latch*/
  hmap->m = hmap->A_usrvia.t1ll;

  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* uservia07read(HOSTMAP* hmap, uintptr_t address_code)
{
  /*T1 high order latch*/
  hmap->m = hmap->A_usrvia.t1lh;

  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* uservia08read(HOSTMAP* hmap, uintptr_t address_code)
{
  intptr_t cyclecount;

  /*T2 low order counter*/
  /*T2 interrupt flag is cleared (IFR b5)*/
  hmap->A_usrvia.ifr &= 0xDF;
  userviasetirq(hmap);
  if (!(hmap->A_usrvia.acr & 0x20))
  {
    HOSTMAP_GET_PERIPHERAL_CYCLE_COUNT(cyclecount, hmap, usrvia)
    hmap->m = ((hmap->B_usrvia.t2doubled - cyclecount)>>1)&0xFF;
  }
  else
  {
    hmap->m = (hmap->B_usrvia.t2doubled>>1)&0xFF;
  }

  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* uservia09read(HOSTMAP* hmap, uintptr_t address_code)
{
  intptr_t cyclecount;

  /*T2 high order counter*/
  if (!(hmap->A_usrvia.acr & 0x20))
  {
    HOSTMAP_GET_PERIPHERAL_CYCLE_COUNT(cyclecount, hmap, usrvia)
    hmap->m = ((hmap->B_usrvia.t2doubled - cyclecount)>>9)&0xFF;
  }
  else
  {
    hmap->m = (hmap->B_usrvia.t2doubled>>9)&0xFF;
  }

  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* uservia0Aread(HOSTMAP* hmap, uintptr_t address_code)
{
  /*shift register*/
  /*SR interrupt flag is cleared (IFR b2)*/
  hmap->A_usrvia.ifr &= 0xFB;
  userviasetirq(hmap);
  hmap->m = hmap->A_usrvia.sr;

  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* uservia0Bread(HOSTMAP* hmap, uintptr_t address_code)
{
  /*auxilary control reg*/
  hmap->m = hmap->A_usrvia.acr;

  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* uservia0Cread(HOSTMAP* hmap, uintptr_t address_code)
{
  /*peripheral control reg*/
  hmap->m = hmap->A_usrvia.pcr;

  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* uservia0Dread(HOSTMAP* hmap, uintptr_t address_code)
{
  /*interrupt flag reg*/
  /*b7 of this register will be read as a logic 1*/
  /*when an interrupt exists within the chip*/
  userviasetirq(hmap);
  hmap->m = hmap->A_usrvia.ifr;

  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* uservia0Eread(HOSTMAP* hmap, uintptr_t address_code)
{
  /*interrupt enable reg*/
  hmap->m = (hmap->A_usrvia.ier | 0x80);

  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* uservia0Fread(HOSTMAP* hmap, uintptr_t address_code)
{
  /*output reg a*/
  if (hmap->A_usrvia.acr & 0x01)
  {
    /*latching enabled*/
    hmap->m = hmap->A_usrvia.ira;
  }
  else
  {
    /*latching disabled*/
    hmap->m = hmap->A_usrvia.porta;
  }

  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* uservia00write(HOSTMAP* hmap, uintptr_t address_code)
{
  /*input/output reg b*/
  hmap->A_usrvia.orb = hmap->m;
  hmap->A_usrvia.portb = (hmap->A_usrvia.orb & hmap->A_usrvia.ddrb) | (hmap->A_usrvia.portb & ~hmap->A_usrvia.ddrb);
  /*PCR & 0x20 = CB2 input*/
  /*PCR & 0x40 = CB2 active edge input*/
  /*independant mode*/
  if (((hmap->A_usrvia.pcr & 0xE0) == 0x20) OR ((hmap->A_usrvia.pcr & 0xE0) == 0x60))
  {
    /*clear b4 (CB1)*/
    hmap->A_usrvia.ifr &= 0xEF;
  }
  else
  {
    /*clear b4,b3 (CB1,CB2)*/
    hmap->A_usrvia.ifr &= 0xE7;
  }
  userviasetirq(hmap);

  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* uservia01write(HOSTMAP* hmap, uintptr_t address_code)
{
  /*input/output reg a*/
  /*VDU 21 writes &0D (%1101) only*/
  /*VDU 2 writes &OD then character*/
  hmap->A_usrvia.ora = hmap->m;
  hmap->A_usrvia.porta = (hmap->A_usrvia.ora & hmap->A_usrvia.ddra) | (hmap->A_usrvia.porta & ~hmap->A_usrvia.ddra);
  /*PCR & 0x02 = CA2 input*/
  /*PCR & 0x04 = CA2 active edge input*/
  if (((hmap->A_usrvia.pcr & 0x0E) == 0x02) OR ((hmap->A_usrvia.pcr & 0x0E) == 0x06))
  {
    /*clear b2 (CA1)*/
    hmap->A_usrvia.ifr &= 0xFD;
  }
  else
  {
    /*clear b2,b1 (CA1,CA2)*/
    hmap->A_usrvia.ifr &= 0xFC;
  }
  if (beebit_printer)
  {
    regs.r[0] = hmap->A_usrvia.porta;
    _kernel_swi(OS_PrintChar,&regs,&regs);
  }
  /*clear b2 (CA1)*/
  hmap->A_usrvia.ifr |= 0x02; /*CA1*/
  userviasetirq(hmap);

  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* uservia02write(HOSTMAP* hmap, uintptr_t address_code)
{
  hmap->A_usrvia.ddrb = hmap->m;

  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* uservia03write(HOSTMAP* hmap, uintptr_t address_code)
{
  hmap->A_usrvia.ddra = hmap->m;

  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* uservia04write(HOSTMAP* hmap, uintptr_t address_code)
{
  /*T1 low order latch*/
  hmap->A_usrvia.t1ll = hmap->m;

  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* uservia05write(HOSTMAP* hmap, uintptr_t address_code)
{
  intptr_t expiryoffset;

  /*T1 high order counter*/
  hmap->A_usrvia.t1lh = hmap->m;
  /*clear T1 interrupt flag (b6)*/
  hmap->A_usrvia.ifr &= 0xBF;
  userviasetirq(hmap);
  if ((hmap->A_usrvia.acr & 0xC0) == 0x80)
  {
    /*output enabled (b7=1) and free-run disabled (b6=0)*/
    /*one-shot mode*/
    /*PB7 goes low, but goes high when timer 1 times out*/
    /*hmap->A_usrvia.orb &= 0x7F;
    hmap->A_usrvia.irb &= 0x7F;*/
    hmap->A_usrvia.portb &= 0x7F;
  }
  hmap->A_usrvia.t1setint = TRUE;
  hmap->B_usrvia.t1doubled = (hmap->A_usrvia.t1lh<<9) | (hmap->A_usrvia.t1ll<<1);
  HOSTMAP_GET_1MHZ_PERIPHERAL_TOGO_FROM_WRITE_OFFSET(expiryoffset, hmap, usrvia)
  hmap->B_usrvia.t1doubled += expiryoffset;
  // the interrupt flag is set after the counter has passed through zero
  HOSTMAP_LIMIT_PERIPHERAL_CYCLES_TO_GO(hmap, usrvia, hmap->B_usrvia.t1doubled + 2)
  hmap->A_usrvia.aftert1 = 0;

  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* uservia06write(HOSTMAP* hmap, uintptr_t address_code)
{
  /*T1 low order latch*/
  hmap->A_usrvia.t1ll = hmap->m;

  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* uservia07write(HOSTMAP* hmap, uintptr_t address_code)
{
  /*T1 high order latch*/
  hmap->A_usrvia.t1lh = hmap->m;

  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* uservia08write(HOSTMAP* hmap, uintptr_t address_code)
{
  /*T2 low order latch*/
  hmap->A_usrvia.t2ll = hmap->m;

  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* uservia09write(HOSTMAP* hmap, uintptr_t address_code)
{
  intptr_t expiryoffset;

  /*T2 high order counter*/
  /*clear T2 interrupt flag (bit 5)*/
  hmap->A_usrvia.ifr &= 0xDF;
  userviasetirq(hmap);
  /*provide a single interrupt*/
  hmap->A_usrvia.t2setint = TRUE;
  if (!(hmap->A_usrvia.acr & 0x20))
  {
    /*one-shot mode*/
    hmap->B_usrvia.t2doubled = (hmap->m<<9) | (hmap->A_usrvia.t2ll<<1);
    HOSTMAP_GET_1MHZ_PERIPHERAL_TOGO_FROM_WRITE_OFFSET(expiryoffset, hmap, usrvia)
    hmap->B_usrvia.t2doubled += expiryoffset;
    // the interrupt flag is set after the counter has passed through zero
    HOSTMAP_LIMIT_PERIPHERAL_CYCLES_TO_GO(hmap, usrvia, hmap->B_usrvia.t2doubled + 2)
  }
  else
  {
    /*pulse counting mode*/
    hmap->B_usrvia.t2doubled = (hmap->m<<9) | (hmap->A_usrvia.t2ll<<1);
  }

  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* uservia0Awrite(HOSTMAP* hmap, uintptr_t address_code)
{
  /*shift reg*/
  hmap->A_usrvia.sr = hmap->m;
  hmap->A_usrvia.ifr &= 0xFB;
  userviasetirq(hmap);

  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* uservia0Bwrite(HOSTMAP* hmap, uintptr_t address_code)
{
  intptr_t expiryoffset;

  /*auxiliary control reg*/
  if ((hmap->A_usrvia.acr ^ hmap->m) & 0x20)
  {
    HOSTMAP_GET_1MHZ_PERIPHERAL_TOGO_FROM_WRITE_OFFSET(expiryoffset, hmap, usrvia)
    if (!(hmap->m & 0x20))
    {
      /*one-shot mode*/
      hmap->B_usrvia.t2doubled += expiryoffset;
      HOSTMAP_LIMIT_PERIPHERAL_CYCLES_TO_GO(hmap, usrvia, hmap->B_usrvia.t2doubled + 2)
    }
    else
    {
      /*pulse counting mode*/
      hmap->B_usrvia.t2doubled -= expiryoffset;
    }
  }
  hmap->A_usrvia.acr = hmap->m;

  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* uservia0Cwrite(HOSTMAP* hmap, uintptr_t address_code)
{
  /*peripheral control reg*/
  hmap->A_usrvia.pcr = hmap->m;
  /*CA1 active edge*/
  if (hmap->A_usrvia.pcr & 0x01)
  {
    /*set b2 (CA1)*/
    hmap->A_usrvia.ifr |= 0x02;
  }
  /*CA2 active edge*/
  if ((hmap->A_usrvia.pcr & 0x0E) == 0x04)
  {
    /*set b1 (CA2)*/
    hmap->A_usrvia.ifr |= 0x01;
  }
  /*CB1 active edge*/
  if (hmap->A_usrvia.pcr & 0x10)
  {
    /*set b5 (CB1)*/
    hmap->A_usrvia.ifr |= 0x10;
  }
  /*CB2 active edge*/
  if ((hmap->A_usrvia.pcr & 0xE0) == 0x40)
  {
    /*set b4 (CB2)*/
    hmap->A_usrvia.ifr |= 0x08;
  }

  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* uservia0Dwrite(HOSTMAP* hmap, uintptr_t address_code)
{
  /*interrupt flag reg*/
  hmap->m &= 0x7F; /*not really needed*/
  hmap->A_usrvia.ifr &= (~hmap->m);
  userviasetirq(hmap);

  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* uservia0Ewrite(HOSTMAP* hmap, uintptr_t address_code)
{
  /*interrupt enable reg*/
  if (hmap->m & 0x80)
    hmap->A_usrvia.ier |= hmap->m;
  else
    hmap->A_usrvia.ier &= (~hmap->m);
  hmap->A_usrvia.ier &= 0x7F;
  userviasetirq(hmap);

  R6502_JUMP_FROM_HIGH_OP(hmap)
}

HOSTMAP* uservia0Fwrite(HOSTMAP* hmap, uintptr_t address_code)
{
  /*output reg a*/
  hmap->A_usrvia.ora = hmap->m;
  hmap->A_usrvia.porta = (hmap->A_usrvia.ora & hmap->A_usrvia.ddra) +(hmap->A_usrvia.porta & ~hmap->A_usrvia.ddra);

  R6502_JUMP_FROM_HIGH_OP(hmap)
}
