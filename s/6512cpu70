;>6512cpu70.s
;
; BeebIt - BBC Micro Model B Emulator
;
; (C) Copyright Michael J Foot, 1998-2005
;
; Email: <mjfoot@paradise.net.nz>
;
; r12=pointer to variable
; r11=pointer to variable
; r10=pointer to variable
; r9=PC
; r8=PS
; r7=Y
; r6=X
; r5=A

  GET h.6502cpus

  GET h.6502cpui

; Use the GET directive to include register definitions as if typed here

  GET h.RegNames

; Use the GET directive to include a list of SWI names as if typed here

  GET h.SWInames

; Area name C$$code advisable as wanted to link with C output

  AREA |C$$code|, CODE, READONLY

; Import global symbols

  IMPORT |memory|
  IMPORT |r6502_sp|
  IMPORT |r6502_pc|
  IMPORT |r6502_ps|
  IMPORT |r6502_a|
  IMPORT |r6502_x|
  IMPORT |r6502_y|
  ;IMPORT |r6502_n|
  ;IMPORT |r6502_v|
  ;IMPORT |r6502_b|
  ;IMPORT |r6502_d|
  ;IMPORT |r6502_i|
  ;IMPORT |r6502_z|
  ;IMPORT |r6502_c|
  IMPORT |r6502_cyclestogo|
  IMPORT |r6502read|
  IMPORT |r6502write|

  IMPORT |adcbcd|
  IMPORT |r6512loadregs|
  IMPORT |r6512saveregs|
  IMPORT |r6512opcodes|

; Export global symbols

  EXPORT |r6512opcode70|
  EXPORT |r6512opcode71|
  EXPORT |r6512opcode72|
  EXPORT |r6512opcode73|
  EXPORT |r6512opcode74|
  EXPORT |r6512opcode75|
  EXPORT |r6512opcode76|
  EXPORT |r6512opcode77|
  EXPORT |r6512opcode78|
  EXPORT |r6512opcode79|
  EXPORT |r6512opcode7A|
  EXPORT |r6512opcode7B|
  EXPORT |r6512opcode7C|
  EXPORT |r6512opcode7D|
  EXPORT |r6512opcode7E|
  EXPORT |r6512opcode7F|

|r6512opcode70|
  ;BVS
  ;if condition succeeds
  ;  if page boundary crossed
  ;    4 cycles
  ;  else
  ;    3 cycles
  ;else
  ;  2 cycles
  ;STMFD sp!,{r0-r12,lr}
  ;LDR r10,=r6502_ps
  ;LDRB rps,[r10] ;load ps
  ;LDR r11,=r6502_pc
  ;LDR rpc,[r11]
  ANDS r0,rps,#VFLAG
  ;if (r6502_ps & VFLAG)
  BNE r6512opcode70_2
  ;else
  ADD rpc,rpc,#1 ;r6502_pc++
  ;ANDS r0,rpc,#&10000
  ;MOVNE r0,#&FF00
  ;ORRNE r0,r0,#&00FF
  ;ANDNE rpc,rpc,r0
  ;STR rpc,[r11] ;r6502_pc
  ;LDR r10,=r6502_cyclestogo
  ;LDR r4,[r10] ;r6502_cyclestogo
  ;SUB r4,r4,#2
  ;STR r4,[r10] ;r6502_cyclestogo
  CPU_CYCLES 2
  ;B r6512opcode70end
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

r6512opcode70_2
  ;LDR r12,=memory ;pointer to memory block
  VALUEOFIMMEDIATE_BP r0
  MOV r1,rpc,LSR#8 ;r1=(pc>>8)
  AND r1,r1,#&FF
  ANDS r2,r0,#&80 ;r2=(n & 0x80)
  MOVNE r3,#&100
  SUBNE r0,r3,r0 ;r0=(&100-r0)
  SUBNE rpc,rpc,r0 ;rpc=(rpc-r0)
  ADDEQ rpc,rpc,r0 ;rpc=(rpc+r0)

  ;ANDS r0,rpc,#&10000
  ;MOVNE r0,#&FF00
  ;ORRNE r0,r0,#&00FF
  ;ANDNE rpc,rpc,r0

  MOV r2,rpc,LSR#8 ;r2=(pc>>8)
  AND r2,r2,#&FF
  ;LDR r10,=r6502_cyclestogo
  ;LDR r3,[r10] ;r6502_cyclestogo
  CMP r1,r2 ;if (n1 != (r6502_pc >> 8))
  ;SUBNE r3,r3,#4 ;r3=(r3-4)
  ;SUBEQ r3,r3,#3 ;r3=(r3-3)
  SUBNE rcycles,rcycles,#4 ;r3=(r3-4)
  SUBEQ rcycles,rcycles,#3 ;r3=(r3-3)
  ;STR r3,[r10] ;r6502_cyclestogo
r6512opcode70end
  ;STR rpc,[r11] ;r6502_pc
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode71|
  ;ADC
  ;STMFD sp!,{r0-r12,lr}
  ;VALUEOFPOSTINDEXEDY
  ADDRESSOFPOSTINDEXEDY_BP ;r0 ;3+ cycles
  READMEM ;1 cycle
  ;BL r6502readbp; 1 cycle
  ;LDR r12,=r6502_ps ;pointer to r6502_ps
  ;LDRB rps,[r12] ;load r6502_ps
  ANDS r1,rps,#DFLAG
  BNE r6512opcode71_2
  ;digital
  R6502ADC ;1 cycle
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE
r6512opcode71_2
  ;BCD
  ;STMFD sp!,{lr}
  STR lr,[sp, #-4]!
  BL r6512saveregs
  BL adcbcd ;1 cycle
  BL r6512loadregs
  ;LDMFD sp!,{lr}
  LDR lr, [sp], #4
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode72|
  ;ADC
  ;STMFD sp!,{lr}
  R6502NOP
  ;LDMFD sp!,{pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode73|
  ;RRA
  ;STMFD sp!,{r0-r12,lr}
  ADDRESSOFPOSTINDEXEDY_BP ;r0 ;3+ cycles
  MOV r2,r0 ;store address
  READMEM ;1 cycle
  R6502ROR r0 ;2 cycles
  MOV r1,r0 ;value
  MOV r0,r2 ;address
  WRITEMEM ;1 cycle

  ANDS r1,rps,#DFLAG
  BNE r6512opcode73_2
  ;digital
  R6502ADC ;1 cycle
  CPU_CYCLES 5
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE
r6512opcode73_2
  ;BCD
  ;STMFD sp!,{lr}
  STR lr,[sp, #-4]!
  BL r6512saveregs
  BL adcbcd ;1 cycle
  BL r6512loadregs
  ;LDMFD sp!,{lr}
  LDR lr, [sp], #4
  CPU_CYCLES 5
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode74|
  ;SKB
  ;STMFD sp!,{r0-r2,rpc,r11,lr}
  ;STMFD sp!,{r0-r2,rpc,r11,lr}
  R6502SKB
  CPU_CYCLES 3
  ;LDMFD sp!,{r0-r2,rpc,r11,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode75|
  ;ADC
  ;STMFD sp!,{r0-r12,lr}
  VALUEOFZEROPAGEX_BP
  ;LDR r12,=r6502_ps ;pointer to r6502_ps
  ;LDRB rps,[r12] ;load r6502_ps
  ANDS r1,rps,#DFLAG
  BNE r6512opcode75_2
  ;digital
  R6502ADC
  CPU_CYCLES 4
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE
r6512opcode75_2
  ;BCD
  ;STMFD sp!,{lr}
  STR lr,[sp, #-4]!
  BL r6512saveregs
  BL adcbcd
  BL r6512loadregs
  ;LDMFD sp!,{lr}
  LDR lr, [sp], #4
  CPU_CYCLES 4
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode76|
  ;STMFD sp!,{r0-r4,rps-r12,lr}
  VALUEOFZEROPAGEX_BP
  R6502ROR r0
  STRB r0,[r11]
  CPU_CYCLES 6
  ;LDMFD sp!,{r0-r4,rps-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode77|
  ;RRA
  ;STMFD sp!,{r0-r12,lr}
  VALUEOFZEROPAGEX_BP
  R6502ROR r0
  STRB r0,[r11]

  ANDS r1,rps,#DFLAG
  BNE r6512opcode77_2
  ;digital
  R6502ADC
  CPU_CYCLES 6
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE
r6512opcode77_2
  ;BCD
  ;STMFD sp!,{lr}
  STR lr,[sp, #-4]!
  BL r6512saveregs
  BL adcbcd
  BL r6512loadregs
  ;LDMFD sp!,{lr}
  LDR lr, [sp], #4
  CPU_CYCLES 6
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode78|
  ;SEI
  ;STMFD sp!,{r2,rps,r11,lr}
  ;LDR r11,=r6502_ps
  ;LDRB rps,[r11]
  ORR rps,rps,#IFLAG
  ;STRB rps,[r11]
  CPU_CYCLES 2
  ;MOV pc,lr
  ;LDMFD sp!,{r2,rps,r11,pc}
  R6512NEXTOPCODE

|r6512opcode79|
  ;ADC
  ;STMFD sp!,{r0-r12,lr}
  ;VALUEOFABSOLUTEYPLUS
  ADDRESSOFABSOLUTEYPLUS_BP ;r0 ;2+ cycles
  READMEM ;1 cycle
  ;BL r6502readbp; 1 cycle
  ;LDR r12,=r6502_ps ;pointer to r6502_ps
  ;LDRB rps,[r12] ;load r6502_ps
  ANDS r1,rps,#DFLAG
  BNE r6512opcode79_2
  ;digital
  R6502ADC ;1 cycle
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE
r6512opcode79_2
  ;BCD
  ;STMFD sp!,{lr}
  STR lr,[sp, #-4]!
  BL r6512saveregs
  BL adcbcd ;1 cycle
  BL r6512loadregs
  ;LDMFD sp!,{lr}
  LDR lr, [sp], #4
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode7A|
  ;NOP
  R6502NOP
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode7B|
  ;RRA
  ;STMFD sp!,{r0-r12,lr}
  ADDRESSOFABSOLUTEY_BP ;r0 ;3 cycles
  MOV r2,r0 ;store address
  READMEM ;1 cycle
  R6502ROR r0
  MOV r1,r0 ;value
  MOV r0,r2 ;address
  WRITEMEM ;1 cycle

  ANDS r1,rps,#DFLAG
  BNE r6512opcode7B_2
  ;digital
  R6502ADC ;2 cycles
  CPU_CYCLES 4
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE
r6512opcode7B_2
  ;BCD
  ;STMFD sp!,{lr}
  STR lr,[sp, #-4]!
  BL r6512saveregs
  BL adcbcd ;2 cycles
  BL r6512loadregs
  ;LDMFD sp!,{lr}
  LDR lr, [sp], #4
  CPU_CYCLES 4
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode7C|
  ;SKW
  ;STMFD sp!,{r0-r2,rpc,r11,lr}
  R6502SKW
  CPU_CYCLES 4
  ;LDMFD sp!,{r0-r2,rpc,r11,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode7D|
  ;ADC
  ;STMFD sp!,{r0-r12,lr}
  ;VALUEOFABSOLUTEXPLUS
  ADDRESSOFABSOLUTEXPLUS_BP ;r0 ;2+ cycles
  READMEM ;1 cycle
  ;BL r6502readbp; 1 cycle
  ;LDR r12,=r6502_ps ;pointer to r6502_ps
  ;LDRB rps,[r12] ;load r6502_ps
  ANDS r1,rps,#DFLAG
  BNE r6512opcode7D_2
  ;digital
  R6502ADC ;1 cycle
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE
r6512opcode7D_2
  ;BCD
  ;STMFD sp!,{lr}
  STR lr,[sp, #-4]!
  BL r6512saveregs
  BL adcbcd ;1 cycle
  BL r6512loadregs
  ;LDMFD sp!,{lr}
  LDR lr, [sp], #4
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode7E|
  ;STMFD sp!,{r0-r4,rps-r12,lr}
  ;VALUEOFABSOLUTE
  ADDRESSOFABSOLUTEX_BP ;r0 ;3 cycles
  MOV r2,r0 ;store address
  READMEM ;1 cycle
  R6502ROR r0 ;2 cycles
  MOV r1,r0 ;value
  MOV r0,r2 ;address
  WRITEMEM ;1 cycle
  CPU_CYCLES 4
  ;LDMFD sp!,{r0-r4,rps-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode7F|
  ;RRA
  ;STMFD sp!,{r0-r12,lr}
  ADDRESSOFABSOLUTEX_BP ;r0 ;3 cycles
  MOV r2,r0 ;store address
  READMEM ;1 cycle
  R6502ROR r0
  MOV r1,r0 ;value
  MOV r0,r2 ;address
  WRITEMEM ;1 cycle
  ANDS r1,rps,#DFLAG
  BNE r6512opcode7F_2
  ;digital
  R6502ADC ;2 cycles
  CPU_CYCLES 4
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE
r6512opcode7F_2
  ;BCD
  ;STMFD sp!,{lr}
  STR lr,[sp, #-4]!
  BL r6512saveregs
  BL adcbcd ;2 cycles
  BL r6512loadregs
  ;LDMFD sp!,{lr}
  LDR lr, [sp], #4
  CPU_CYCLES 4
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

;Data Area

;  AREA    |C$$data|, DATA

  END
