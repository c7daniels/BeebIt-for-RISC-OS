;>hostmaps.s
;
; BeebIt - BBC Micro Model B Emulator
;
; (C) Copyright Michael J Foot, 1998-2024
;
; Email: <mjfoot.nz@gmail.com>
;
; Fast ROM paging contributed by Crispian Daniels in 2024
;
; Email: <convertedgames@3insdale.me.uk>
;

  GET h.6502zmaps

  GET h.hostmaps

  GET h.6502cmaps

  GET h.6502cpus

; Use the GET directive to include register definitions as if typed here

  GET h.RegNames

; Use the GET directive to include a list of SWI names as if typed here

  GET h.SWInames

; Area name C$$code advisable as wanted to link with C output

  AREA    |C$$code|, CODE, READONLY

; Import global symbols

  IMPORT |r6502startinterrupt|
  IMPORT |systemviaatzerocycles|
  IMPORT |userviaatzerocycles|
  IMPORT |i8271poll|
  IMPORT |w1770poll|
  IMPORT |adcpoll|
  IMPORT |aciapoll|
  IMPORT |videoatzerocycles|

; Export global symbols

  EXPORT |hostmap|

  EXPORT |h6502yieldflag|

  EXPORT |h6502read0000|
  EXPORT |h6502read3000|
  EXPORT |h6502read8000_0|
  EXPORT |h6502read8000_1|
  EXPORT |h6502read8000_2|
  EXPORT |h6502read8000_3|
  EXPORT |h6502read8000_4|
  EXPORT |h6502read8000_5|
  EXPORT |h6502read8000_6|
  EXPORT |h6502read8000_7|
  EXPORT |h6502read8000_8|
  EXPORT |h6502read8000_9|
  EXPORT |h6502read8000_A|
  EXPORT |h6502read8000_B|
  EXPORT |h6502read8000_C|
  EXPORT |h6502read8000_D|
  EXPORT |h6502read8000_E|
  EXPORT |h6502read8000_F|
  EXPORT |h6502readC000|
  EXPORT |h6502readF000|

  EXPORT |h6502readbp3000_ram|
  EXPORT |h6502readbp3000_ramram|
  EXPORT |h6502readbp8000_ram|

  EXPORT |h6502readm3000_x|
  EXPORT |h6502readm3000_e|
  EXPORT |h6502readm8000_ram|
  EXPORT |h6502readmC000_y|

  EXPORT |h6502write0000|
  EXPORT |h6502write3000|
  EXPORT |h6502write8000_0|
  EXPORT |h6502write8000_1|
  EXPORT |h6502write8000_2|
  EXPORT |h6502write8000_3|
  EXPORT |h6502write8000_4|
  EXPORT |h6502write8000_5|
  EXPORT |h6502write8000_6|
  EXPORT |h6502write8000_7|
  EXPORT |h6502write8000_8|
  EXPORT |h6502write8000_9|
  EXPORT |h6502write8000_A|
  EXPORT |h6502write8000_B|
  EXPORT |h6502write8000_C|
  EXPORT |h6502write8000_D|
  EXPORT |h6502write8000_E|
  EXPORT |h6502write8000_F|
  EXPORT |h6502writeC000|
  EXPORT |h6502writeF000|

  EXPORT |h6502writebp3000_ram|
  EXPORT |h6502writebp3000_ramram|
  EXPORT |h6502writebp8000_ram|

  EXPORT |h6502writem3000_x|
  EXPORT |h6502writem3000_e|
  EXPORT |h6502writem8000_ram|
  EXPORT |h6502writemC000_y|

  EXPORT |h6502startreadstretch|
  EXPORT |h6502startwritestretch|
  EXPORT |h6502readfred|
  EXPORT |h6502readjim|
  EXPORT |h6502readmFC00|
  EXPORT |h6502readmFD00|
  EXPORT |h6502readFF00|
  EXPORT |h6502writefred|
  EXPORT |h6502writejim|
  EXPORT |h6502writemFC00|
  EXPORT |h6502writemFD00|
  EXPORT |h6502writeFF00|

  EXPORT |h6502midstretchstep|
  EXPORT |h6502stretchedreadstep|
  EXPORT |h6502stretchedwritestep|

  EXPORT |h6502getplacementinregisters|
  EXPORT |h6502cyclestogobridgeread|
  EXPORT |h6502cyclestogobridgewrite|

  EXPORT |hostmapadvancetimers|
  EXPORT |hostmapexecute|

  ASSERT :INDEX:HOST_M_SHIFT == :INDEX:R6502ZONE_M_SHIFT
  ASSERT :INDEX:HOST_M == :INDEX:R6502ZONE_M

  ASSERT :INDEX:HOST_AC == :INDEX:R6502ZONE_AC
  ASSERT :INDEX:HOST_BC == :INDEX:R6502ZONE_BC
  ASSERT :INDEX:HOST_CC == :INDEX:R6502ZONE_CC
  ASSERT :INDEX:HOST_DC == :INDEX:R6502ZONE_DC
  ASSERT :INDEX:HOST_EC == :INDEX:R6502ZONE_EC

h6502yieldflag
  MOV r2,#&FF
  STRB r2,[r0,#:INDEX:HOST_YIELD]
  IF PlaceCyclesToGoInRegister
  SUBS r2,r9,#1
  MOVLE pc,lr
  LDR r3,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_ORIGINAL]
  SUB r3,r3,r2
  MOV r9,#1
  ELSE
  LDR r2,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_TOGO]
  SUBS r2,r2,#1
  MOVLE pc,lr
  LDR r3,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_ORIGINAL]
  SUB r3,r3,r2
  MOV r2,#1
  STR r2,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_TOGO]
  ENDIF
  STR r3,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_ORIGINAL]
  MOV pc,lr

h6502read0000
h6502read3000
h6502readC000
h6502readFF00
  ADD r3,r0,#:INDEX:HOST_MEMORY
  LDRB r2,[r3,r1,LSR #16]
  STRB r2,[r0,#:INDEX:HOST_M]
  R6502_JUMP_FROM_BUS_OP

h6502read8000_0
  ADD r3,r0,#:INDEX:HOST_ROMS-&8000
  LDRB r2,[r3,r1,LSR #16]
  STRB r2,[r0,#:INDEX:HOST_M]
  R6502_JUMP_FROM_BUS_OP

h6502read8000_1
  ADD r3,r0,#:INDEX:HOST_ROMS-&4000
  LDRB r2,[r3,r1,LSR #16]
  STRB r2,[r0,#:INDEX:HOST_M]
  R6502_JUMP_FROM_BUS_OP

h6502read8000_2
  ADD r3,r0,#:INDEX:HOST_ROMS
  LDRB r2,[r3,r1,LSR #16]
  STRB r2,[r0,#:INDEX:HOST_M]
  R6502_JUMP_FROM_BUS_OP

h6502read8000_3
  ADD r3,r0,#:INDEX:HOST_ROMS+&4000
  LDRB r2,[r3,r1,LSR #16]
  STRB r2,[r0,#:INDEX:HOST_M]
  R6502_JUMP_FROM_BUS_OP

h6502read8000_4
  ADD r3,r0,#:INDEX:HOST_ROMS+&8000
  LDRB r2,[r3,r1,LSR #16]
  STRB r2,[r0,#:INDEX:HOST_M]
  R6502_JUMP_FROM_BUS_OP

h6502read8000_5
  ADD r3,r0,#:INDEX:HOST_ROMS+&C000
  LDRB r2,[r3,r1,LSR #16]
  STRB r2,[r0,#:INDEX:HOST_M]
  R6502_JUMP_FROM_BUS_OP

h6502read8000_6
  ADD r3,r0,#:INDEX:HOST_ROMS+&10000
  LDRB r2,[r3,r1,LSR #16]
  STRB r2,[r0,#:INDEX:HOST_M]
  R6502_JUMP_FROM_BUS_OP

h6502read8000_7
  ADD r3,r0,#:INDEX:HOST_ROMS+&14000
  LDRB r2,[r3,r1,LSR #16]
  STRB r2,[r0,#:INDEX:HOST_M]
  R6502_JUMP_FROM_BUS_OP

h6502read8000_8
  ADD r3,r0,#:INDEX:HOST_ROMS+&18000
  LDRB r2,[r3,r1,LSR #16]
  STRB r2,[r0,#:INDEX:HOST_M]
  R6502_JUMP_FROM_BUS_OP

h6502read8000_9
  ADD r3,r0,#:INDEX:HOST_ROMS+&1C000
  LDRB r2,[r3,r1,LSR #16]
  STRB r2,[r0,#:INDEX:HOST_M]
  R6502_JUMP_FROM_BUS_OP

h6502read8000_A
  ADD r3,r0,#:INDEX:HOST_ROMS+&20000
  LDRB r2,[r3,r1,LSR #16]
  STRB r2,[r0,#:INDEX:HOST_M]
  R6502_JUMP_FROM_BUS_OP

h6502read8000_B
  ADD r3,r0,#:INDEX:HOST_ROMS+&24000
  LDRB r2,[r3,r1,LSR #16]
  STRB r2,[r0,#:INDEX:HOST_M]
  R6502_JUMP_FROM_BUS_OP

h6502read8000_C
  ADD r3,r0,#:INDEX:HOST_ROMS+&28000
  LDRB r2,[r3,r1,LSR #16]
  STRB r2,[r0,#:INDEX:HOST_M]
  R6502_JUMP_FROM_BUS_OP

h6502read8000_D
  ADD r3,r0,#:INDEX:HOST_ROMS+&2C000
  LDRB r2,[r3,r1,LSR #16]
  STRB r2,[r0,#:INDEX:HOST_M]
  R6502_JUMP_FROM_BUS_OP

h6502read8000_E
  ADD r3,r0,#:INDEX:HOST_ROMS+&30000
  LDRB r2,[r3,r1,LSR #16]
  STRB r2,[r0,#:INDEX:HOST_M]
  R6502_JUMP_FROM_BUS_OP

h6502read8000_F
  ADD r3,r0,#:INDEX:HOST_ROMS+&34000
  LDRB r2,[r3,r1,LSR #16]
  STRB r2,[r0,#:INDEX:HOST_M]
  R6502_JUMP_FROM_BUS_OP

h6502readF000
  CMP r1,#&FC000000
  SUBHS r3,r0,#(&FC00:SHL:2)-:INDEX:HOST_READHIGH
  LDRHS pc,[r3,r1,LSR #14]
  ADD r3,r0,#:INDEX:HOST_MEMORY
  LDRB r2,[r3,r1,LSR #16]
  STRB r2,[r0,#:INDEX:HOST_M]
  R6502_JUMP_FROM_BUS_OP

h6502readbp3000_ram
  LDR r2,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  ADD r2,r2,#&20000000
  CMP r2,#&E0000000
  BLO h6502read3000
  ADD r3,r0,#:INDEX:HOST_SHADOW
  LDRB r2,[r3,r1,LSR #16]
  STRB r2,[r0,#:INDEX:HOST_M]
  R6502_JUMP_FROM_BUS_OP

h6502readbp3000_ramram
  LDR r2,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  ADD r2,r2,#&50000000
  CMP r2,#&F0000000
  BHS h6502readbp3000_ramram2
  ADD r2,r2,#&D0000000
  CMP r2,#&E0000000
  BLO h6502read3000
h6502readbp3000_ramram2
  ADD r3,r0,#:INDEX:HOST_SHADOW
  LDRB r2,[r3,r1,LSR #16]
  STRB r2,[r0,#:INDEX:HOST_M]
  R6502_JUMP_FROM_BUS_OP

h6502readbp8000_ram
h6502readm8000_ram
  ADD r3,r0,#:INDEX:HOST_SHADOW-&8000
  LDRB r2,[r3,r1,LSR #16]
  STRB r2,[r0,#:INDEX:HOST_M]
  R6502_JUMP_FROM_BUS_OP

h6502readm3000_e
  LDR r2,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  ADD r2,r2,#&20000000
  CMP r2,#&E0000000
  BLO h6502read3000
h6502readm3000_x
  ADD r3,r0,#:INDEX:HOST_SHADOW
  LDRB r2,[r3,r1,LSR #16]
  STRB r2,[r0,#:INDEX:HOST_M]
  R6502_JUMP_FROM_BUS_OP

h6502readmC000_y
  ADD r3,r0,#:INDEX:HOST_SHADOW-&B000
  LDRB r2,[r3,r1,LSR #16]
  STRB r2,[r0,#:INDEX:HOST_M]
  R6502_JUMP_FROM_BUS_OP

h6502write0000
h6502write3000
  ADD r3,r0,#:INDEX:HOST_MEMORY
  LDRB r2,[r0,#:INDEX:HOST_M]
  STRB r2,[r3,r1,LSR #16]
  R6502_JUMP_FROM_BUS_OP

h6502write8000_0
  LDRB r2,[r0,#:INDEX:HOST_ROMWRITABLE]
  ADD r3,r0,#:INDEX:HOST_ROMS-&8000
  TST r2,r2
  LDRNEB r2,[r0,#:INDEX:HOST_M]
  STRNEB r2,[r3,r1,LSR #16]
  R6502_JUMP_FROM_BUS_OP

h6502write8000_1
  LDRB r2,[r0,#:INDEX:HOST_ROMWRITABLE+1]
  ADD r3,r0,#:INDEX:HOST_ROMS-&4000
  TST r2,r2
  LDRNEB r2,[r0,#:INDEX:HOST_M]
  STRNEB r2,[r3,r1,LSR #16]
  R6502_JUMP_FROM_BUS_OP

h6502write8000_2
  LDRB r2,[r0,#:INDEX:HOST_ROMWRITABLE+2]
  ADD r3,r0,#:INDEX:HOST_ROMS
  TST r2,r2
  LDRNEB r2,[r0,#:INDEX:HOST_M]
  STRNEB r2,[r3,r1,LSR #16]
  R6502_JUMP_FROM_BUS_OP

h6502write8000_3
  LDRB r2,[r0,#:INDEX:HOST_ROMWRITABLE+3]
  ADD r3,r0,#:INDEX:HOST_ROMS+&4000
  TST r2,r2
  LDRNEB r2,[r0,#:INDEX:HOST_M]
  STRNEB r2,[r3,r1,LSR #16]
  R6502_JUMP_FROM_BUS_OP

h6502write8000_4
  LDRB r2,[r0,#:INDEX:HOST_ROMWRITABLE+4]
  ADD r3,r0,#:INDEX:HOST_ROMS+&8000
  TST r2,r2
  LDRNEB r2,[r0,#:INDEX:HOST_M]
  STRNEB r2,[r3,r1,LSR #16]
  R6502_JUMP_FROM_BUS_OP

h6502write8000_5
  LDRB r2,[r0,#:INDEX:HOST_ROMWRITABLE+5]
  ADD r3,r0,#:INDEX:HOST_ROMS+&C000
  TST r2,r2
  LDRNEB r2,[r0,#:INDEX:HOST_M]
  STRNEB r2,[r3,r1,LSR #16]
  R6502_JUMP_FROM_BUS_OP

h6502write8000_6
  LDRB r2,[r0,#:INDEX:HOST_ROMWRITABLE+6]
  ADD r3,r0,#:INDEX:HOST_ROMS+&10000
  TST r2,r2
  LDRNEB r2,[r0,#:INDEX:HOST_M]
  STRNEB r2,[r3,r1,LSR #16]
  R6502_JUMP_FROM_BUS_OP

h6502write8000_7
  LDRB r2,[r0,#:INDEX:HOST_ROMWRITABLE+7]
  ADD r3,r0,#:INDEX:HOST_ROMS+&14000
  TST r2,r2
  LDRNEB r2,[r0,#:INDEX:HOST_M]
  STRNEB r2,[r3,r1,LSR #16]
  R6502_JUMP_FROM_BUS_OP

h6502write8000_8
  LDRB r2,[r0,#:INDEX:HOST_ROMWRITABLE+8]
  ADD r3,r0,#:INDEX:HOST_ROMS+&18000
  TST r2,r2
  LDRNEB r2,[r0,#:INDEX:HOST_M]
  STRNEB r2,[r3,r1,LSR #16]
  R6502_JUMP_FROM_BUS_OP

h6502write8000_9
  LDRB r2,[r0,#:INDEX:HOST_ROMWRITABLE+9]
  ADD r3,r0,#:INDEX:HOST_ROMS+&1C000
  TST r2,r2
  LDRNEB r2,[r0,#:INDEX:HOST_M]
  STRNEB r2,[r3,r1,LSR #16]
  R6502_JUMP_FROM_BUS_OP

h6502write8000_A
  LDRB r2,[r0,#:INDEX:HOST_ROMWRITABLE+10]
  ADD r3,r0,#:INDEX:HOST_ROMS+&20000
  TST r2,r2
  LDRNEB r2,[r0,#:INDEX:HOST_M]
  STRNEB r2,[r3,r1,LSR #16]
  R6502_JUMP_FROM_BUS_OP

h6502write8000_B
  LDRB r2,[r0,#:INDEX:HOST_ROMWRITABLE+11]
  ADD r3,r0,#:INDEX:HOST_ROMS+&24000
  TST r2,r2
  LDRNEB r2,[r0,#:INDEX:HOST_M]
  STRNEB r2,[r3,r1,LSR #16]
  R6502_JUMP_FROM_BUS_OP

h6502write8000_C
  LDRB r2,[r0,#:INDEX:HOST_ROMWRITABLE+12]
  ADD r3,r0,#:INDEX:HOST_ROMS+&28000
  TST r2,r2
  LDRNEB r2,[r0,#:INDEX:HOST_M]
  STRNEB r2,[r3,r1,LSR #16]
  R6502_JUMP_FROM_BUS_OP

h6502write8000_D
  LDRB r2,[r0,#:INDEX:HOST_ROMWRITABLE+13]
  ADD r3,r0,#:INDEX:HOST_ROMS+&2C000
  TST r2,r2
  LDRNEB r2,[r0,#:INDEX:HOST_M]
  STRNEB r2,[r3,r1,LSR #16]
  R6502_JUMP_FROM_BUS_OP

h6502write8000_E
  LDRB r2,[r0,#:INDEX:HOST_ROMWRITABLE+14]
  ADD r3,r0,#:INDEX:HOST_ROMS+&30000
  TST r2,r2
  LDRNEB r2,[r0,#:INDEX:HOST_M]
  STRNEB r2,[r3,r1,LSR #16]
  R6502_JUMP_FROM_BUS_OP

h6502write8000_F
  LDRB r2,[r0,#:INDEX:HOST_ROMWRITABLE+15]
  ADD r3,r0,#:INDEX:HOST_ROMS+&34000
  TST r2,r2
  LDRNEB r2,[r0,#:INDEX:HOST_M]
  STRNEB r2,[r3,r1,LSR #16]
  R6502_JUMP_FROM_BUS_OP

h6502writeC000
h6502writeFF00
  R6502_JUMP_FROM_BUS_OP

h6502writeF000
  CMP r1,#&FC000000
  SUBHS r3,r0,#(&FC00:SHL:2)-:INDEX:HOST_WRITEHIGH
  LDRHS pc,[r3,r1,LSR #14]
  R6502_JUMP_FROM_BUS_OP

h6502writebp3000_ram
  LDR r2,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  ADD r2,r2,#&20000000
  CMP r2,#&E0000000
  BLO h6502write3000
  ADD r3,r0,#:INDEX:HOST_SHADOW
  LDRB r2,[r0,#:INDEX:HOST_M]
  STRB r2,[r3,r1,LSR #16]
  R6502_JUMP_FROM_BUS_OP

h6502writebp3000_ramram
  LDR r2,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  ADD r2,r2,#&50000000
  CMP r2,#&F0000000
  BHS h6502writebp3000_ramram2
  ADD r2,r2,#&D0000000
  CMP r2,#&E0000000
  BLO h6502write3000
h6502writebp3000_ramram2
  ADD r3,r0,#:INDEX:HOST_SHADOW
  LDRB r2,[r0,#:INDEX:HOST_M]
  STRB r2,[r3,r1,LSR #16]
  R6502_JUMP_FROM_BUS_OP

h6502writebp8000_ram
h6502writem8000_ram
  ADD r3,r0,#:INDEX:HOST_SHADOW-&8000
  LDRB r2,[r0,#:INDEX:HOST_M]
  STRB r2,[r3,r1,LSR #16]
  R6502_JUMP_FROM_BUS_OP

h6502writem3000_e
  LDR r2,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  ADD r2,r2,#&20000000
  CMP r2,#&E0000000
  BLO h6502write3000
h6502writem3000_x
  ADD r3,r0,#:INDEX:HOST_SHADOW
  LDRB r2,[r0,#:INDEX:HOST_M]
  STRB r2,[r3,r1,LSR #16]
  R6502_JUMP_FROM_BUS_OP

h6502writemC000_y
  ADD r3,r0,#:INDEX:HOST_SHADOW-&B000
  LDRB r2,[r0,#:INDEX:HOST_M]
  STRB r2,[r3,r1,LSR #16]
  R6502_JUMP_FROM_BUS_OP

h6502startreadstretch
  LDR r3,[r0,#:INDEX:R6502_CPU_STATE]
  STR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  LDR r1,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_ODD]
  STR r3,[r0,#:INDEX:R6502_STRETCHED_CPU_STATE]
  LDR r3,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_ORIGINAL]
  IF PlaceCyclesToGoInRegister
  EOR r1,r1,r9
  ELSE
  LDR r2,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_TOGO]
  EOR r1,r1,r2
  ENDIF
  ADD r2,r0,#:INDEX:R6502_SEQUENCES
  LDR r2,[r2,#R6502_READ_STRETCH_SEQUENCE:SHL:2]
  EOR r1,r1,r3
  TST r1,#1
  ADDEQ r2,r2,#1:SHL:2
  STR r2,[r0,#:INDEX:R6502_CPU_STATE]
  R6502_JUMP_FROM_BUS_OP

h6502startwritestretch
  LDR r3,[r0,#:INDEX:R6502_CPU_STATE]
  STR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  LDR r1,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_ODD]
  STR r3,[r0,#:INDEX:R6502_STRETCHED_CPU_STATE]
  LDR r3,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_ORIGINAL]
  IF PlaceCyclesToGoInRegister
  EOR r1,r1,r9
  ELSE
  LDR r2,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_TOGO]
  EOR r1,r1,r2
  ENDIF
  ADD r2,r0,#:INDEX:R6502_SEQUENCES
  LDR r2,[r2,#R6502_WRITE_STRETCH_SEQUENCE:SHL:2]
  EOR r1,r1,r3
  TST r1,#1
  ADDEQ r2,r2,#1:SHL:2
  STR r2,[r0,#:INDEX:R6502_CPU_STATE]
  R6502_JUMP_FROM_BUS_OP

h6502readfred
h6502readjim
  MOV r1,#&FE
  STRB r1,[r0,#:INDEX:HOST_M]
  R6502_JUMP_FROM_BUS_OP

h6502readmFC00
h6502readmFD00
  LDRB r3,[r0,#:INDEX:HOST_ACCCON]
  TST r3,#&60
  BEQ h6502startreadstretch
  TST r3,#&40
  BNE h6502readC000
  MOV r2,#0
  STRB r2,[r0,#:INDEX:HOST_M]
  R6502_JUMP_FROM_BUS_OP

h6502writefred
h6502writejim
  R6502_JUMP_FROM_BUS_OP

h6502writemFC00
h6502writemFD00
  LDRB r3,[r0,#:INDEX:HOST_ACCCON]
  TST r3,#&60
  BEQ h6502startwritestretch
  R6502_JUMP_FROM_BUS_OP

|h6502midstretchstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  R6502_JUMP_WITHOUT_BUS_OP

|h6502stretchedreadstep|
  LDR r2,[r0,#:INDEX:R6502_STRETCHED_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  SUB r3,r0,#(&FC00:SHL:2)-:INDEX:HOST_STRETCHEDREADHIGH
  STR r2,[r0,#:INDEX:R6502_CPU_STATE]
  LDR pc,[r3,r1,LSR #14]

|h6502stretchedwritestep|
  LDR r2,[r0,#:INDEX:R6502_STRETCHED_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  SUB r3,r0,#(&FC00:SHL:2)-:INDEX:HOST_STRETCHEDWRITEHIGH
  STR r2,[r0,#:INDEX:R6502_CPU_STATE]
  LDR pc,[r3,r1,LSR #14]

|h6502getplacementinregisters|
  IF PlaceCyclesToGoInRegister
  MOV r0,#CYCLES_TO_GO_IN_REGISTER_FLAG
  ELSE
  MOV r0,#0
  ENDIF
  MOV pc,lr

|h6502cyclestogobridgeread|
  IF PlaceCyclesToGoInRegister
  STR r9,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_TOGO]
  STR lr,[sp, #-4]!
  ADD lr,pc,#8-4
  ENDIF
  SUB r3,r0,#(&FC00:SHL:2)-:INDEX:HOST_BRIDGEDREADHIGH
  LDR pc,[r3,r1,LSR #14]
  IF PlaceCyclesToGoInRegister
  LDR r9,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_TOGO]
  LDR pc, [sp], #4
  ENDIF

|h6502cyclestogobridgewrite|
  IF PlaceCyclesToGoInRegister
  STR r9,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_TOGO]
  STR lr,[sp, #-4]!
  ADD lr,pc,#8-4
  ENDIF
  SUB r3,r0,#(&FC00:SHL:2)-:INDEX:HOST_BRIDGEDWRITEHIGH
  LDR pc,[r3,r1,LSR #14]
  IF PlaceCyclesToGoInRegister
  LDR r9,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_TOGO]
  LDR pc, [sp], #4
  ENDIF

|hostmapadvancetimers|
  IF PlaceCyclesToGoInRegister
  STR r9,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_TOGO]
  STMFD sp!,{r4,lr}
  ELSE
  STMFD sp!,{r4,r9,lr}
  ENDIF

  MOV r1,#0
  LDR r4,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_ORIGINAL]
  STR r1,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_ORIGINAL]
  TST r4,#1
  LDRNE r2,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_ODD]
  EORNE r2,r2,#1
  STRNE r2,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_ODD]
  LDR r2,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_MONOTONIC]
  ADD r2,r2,r4
  STR r2,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_MONOTONIC]
  MOV r9,#0x10000

  LDR r1,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_SYSVIATOGO]
  SUBS r1,r1,r4
  BMI advancetimers2
  STR r1,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_SYSVIATOGO]
  ADDNE pc,pc,#8-4
  BL systemviaatzerocycles
  LDR r1,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_SYSVIATOGO]
  SUB r2,r1,#1
  CMP r2,r9
  MOVLO r9,r1

advancetimers2
  LDR r1,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_USRVIATOGO]
  SUBS r1,r1,r4
  BMI advancetimers3
  STR r1,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_USRVIATOGO]
  ADDNE pc,pc,#8-4
  BL userviaatzerocycles
  LDR r1,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_USRVIATOGO]
  SUB r2,r1,#1
  CMP r2,r9
  MOVLO r9,r1

advancetimers3
  LDR r1,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_I8271TOGO]
  SUBS r1,r1,r4
  BMI advancetimers4
  STR r1,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_I8271TOGO]
  ADDNE pc,pc,#8-4
  BL i8271poll
  LDR r1,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_I8271TOGO]
  SUB r2,r1,#1
  CMP r2,r9
  MOVLO r9,r1

advancetimers4
  LDR r1,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_W1770TOGO]
  SUBS r1,r1,r4
  BMI advancetimers5
  STR r1,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_W1770TOGO]
  ADDNE pc,pc,#8-4
  BL w1770poll
  LDR r1,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_W1770TOGO]
  SUB r2,r1,#1
  CMP r2,r9
  MOVLO r9,r1

advancetimers5
  LDR r1,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_ADCTOGO]
  SUBS r1,r1,r4
  BMI advancetimers6
  STR r1,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_ADCTOGO]
  ADDNE pc,pc,#8-4
  BL adcpoll
  LDR r1,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_ADCTOGO]
  SUB r2,r1,#1
  CMP r2,r9
  MOVLO r9,r1

advancetimers6
  LDR r1,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_M6850TOGO]
  SUBS r1,r1,r4
  BMI advancetimers7
  STR r1,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_M6850TOGO]
  ADDNE pc,pc,#8-4
  BL aciapoll
  LDR r1,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_M6850TOGO]
  SUB r2,r1,#1
  CMP r2,r9
  MOVLO r9,r1

advancetimers7
  LDR r1,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_VIDEOTOGO]
  SUBS r1,r1,r4
  BMI advancetimers8
  STR r1,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_VIDEOTOGO]
  ADDNE pc,pc,#8-4
  BL videoatzerocycles
  LDR r1,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_VIDEOTOGO]
  SUB r2,r1,#1
  CMP r2,r9
  MOVLO r9,r1

advancetimers8
  STR r9,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_ORIGINAL]
  IF PlaceCyclesToGoInRegister
  LDMFD sp!,{r4,lr}
  ELSE
  STR r9,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_TOGO]
  LDMFD sp!,{r4,r9,lr}
  ENDIF

  LDRB r3,[r0,#:INDEX:R6502_PS]
  TST r3,#IFLAG
  MOVNE pc,lr
  LDRB r2,[r0,#:INDEX:R6502_IRQ]
  TST r2,r2
  MOVEQ pc,lr
  BNE r6502startinterrupt
  MOV pc,lr

|hostmapexecute|
  IF PlaceCyclesToGoInRegister
  STMFD sp!,{r9,lr}
  ELSE
  STR lr,[sp, #-4]!
  ENDIF
  LDR r0,=hostmap
  IF PlaceCyclesToGoInRegister
  LDR r9,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_TOGO]
  ENDIF
  MOV r2,#0
  STRB r2,[r0,#:INDEX:HOST_YIELD]
hostmapexecute1
  LDR r1,[r0,#:INDEX:R6502_CPU_STATE]
  MOV lr,pc
  LDR pc, [r1], #4
  IF PlaceCyclesToGoInRegister
  SUBS r9,r9,#1
  ELSE
  LDR r2,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_TOGO]
  SUBS r2,r2,#1
  STR r2,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_TOGO]
  ENDIF
  BNE hostmapexecute1
  BL hostmapadvancetimers
  LDRB r2,[r0,#:INDEX:HOST_YIELD]
  TST r2,r2
  BEQ hostmapexecute1
  IF PlaceCyclesToGoInRegister
  STR r9,[r0,#:INDEX:HOST_CYCLES+:INDEX:HOSTCYCLES_TOGO]
  ENDIF
  IF PlaceCyclesToGoInRegister
  LDMFD sp!,{r9,pc}
  ELSE
  LDR pc, [sp], #4
  ENDIF

;Data Area

  AREA    |C$$bss|, NOINIT

|hostmap|
  % SIZEOF_HOSTMAP

  END
