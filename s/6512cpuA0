;>6512cpuA0.s
;
; BeebIt - BBC Micro Model B Emulator
;
; (C) Copyright Michael J Foot, 1998-2005
;
; Email: <mjfoot@paradise.net.nz>
;
; r12=pointer to variable
; r11=pointer to variable
; r10=pointer to variable
; r9=PC
; r8=PS
; r7=Y
; r6=X
; r5=A

  GET h.6502cpus

  GET h.6502cpui

; Use the GET directive to include register definitions as if typed here

  GET h.RegNames

; Use the GET directive to include a list of SWI names as if typed here

  GET h.SWInames

; Area name C$$code advisable as wanted to link with C output

  AREA |C$$code|, CODE, READONLY

; Import global symbols

  IMPORT |memory|
  IMPORT |shadow|
  IMPORT |r6502_sp|
  IMPORT |r6502_pc|
  IMPORT |r6502_ps|
  IMPORT |r6502_a|
  IMPORT |r6502_x|
  IMPORT |r6502_y|
  ;IMPORT |r6502_n|
  ;IMPORT |r6502_v|
  ;IMPORT |r6502_b|
  ;IMPORT |r6502_d|
  ;IMPORT |r6502_i|
  ;IMPORT |r6502_z|
  ;IMPORT |r6502_c|
  IMPORT |r6502_cyclestogo|
  IMPORT |r6502read|
  IMPORT |r6502write|
  IMPORT |r6502readbp|
  IMPORT |r6502writebp|
  IMPORT |r6512loadregs|
  IMPORT |r6512saveregs|
  IMPORT |r6512opcodes|

  ;IMPORT |sheilaread|
  ;IMPORT |sheilawrite|

; Export global symbols

  EXPORT |r6512opcodeA0|
  ;EXPORT |r6512opcodeA0_ram|
  EXPORT |r6512opcodeA1|
  EXPORT |r6512opcodeA2|
  EXPORT |r6512opcodeA3|
  EXPORT |r6512opcodeA4|
  EXPORT |r6512opcodeA5|
  ;EXPORT |r6512opcodeA5_ram|
  EXPORT |r6512opcodeA6|
  EXPORT |r6512opcodeA7|
  EXPORT |r6512opcodeA8|
  EXPORT |r6512opcodeA9|
  ;EXPORT |r6512opcodeA9_ram|
  EXPORT |r6512opcodeAA|
  EXPORT |r6512opcodeAB|
  EXPORT |r6512opcodeAC|
  EXPORT |r6512opcodeAD|
  EXPORT |r6512opcodeAE|
  EXPORT |r6512opcodeAF|


;|r6512opcodeA0|
  ;LDY
  ;STMFD sp!,{r0-r2,rps-r12,lr}
;  VALUEOFIMMEDIATE ry
  ;R6502LDY
;  SETNFLAG ry
;  SETZFLAG ry
;  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r2,rps-r12,pc}
  ;MOV pc,lr
;  R6512NEXTOPCODE

|r6512opcodeA0|
  ;LDY
  ;STMFD sp!,{r0-r2,rps-r12,lr}
  VALUEOFIMMEDIATE_BP ry
  ;R6502LDY
  SETNFLAG ry
  SETZFLAG ry
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r2,rps-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcodeA1|
  ;LDA
  ;STMFD sp!,{r0-r2,rps-r12,lr}
  ;VALUEOFPREINDEXED
  ADDRESSOFPREINDEXED_BP ;r0 ;4 cycles
  READMEMBP ;1 cycle
  ;BL r6502readbp; 1 cycle
  R6502LDA ;1 cycle
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r2,rps-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcodeA2|
  ;LDX
  ;STMFD sp!,{r0-r2,rps-r12,lr}
  VALUEOFIMMEDIATE_BP rx
  ;R6502LDX
  SETNFLAG rx
  SETZFLAG rx
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r2,rps-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcodeA3|
  ;LAX
  ;STMFD sp!,{r0-r2,rpc-r12,lr}
  ADDRESSOFPREINDEXED_BP ;r0 ;4 cycles
  READMEMBP ;1 cycle
  ;BL r6502readbp; 1 cycle
  ;LDR r11,=r6502_a
  ;STRB r0,[r11] ;ra=r0
  MOV ra,r0 ;1 cycle
  ;LDR r11,=r6502_x
  ;STRB r0,[r11] ;rx=ra
  MOV rx,r0
  SETNFLAG r0
  SETZFLAG r0
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r2,rpc-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcodeA4|
  ;LDY
  ;STMFD sp!,{r0-r2,rps-r12,lr}
  ;VALUEOFZEROPAGE
  ADDRESSOFZEROPAGE_BP r0
  ;R6502LDY
  LDRB ry,[r12,r0] ;r0
  SETNFLAG ry
  SETZFLAG ry
  CPU_CYCLES 3
  ;LDMFD sp!,{r0-r2,rps-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcodeA5_old|
  ;LDA
  ;STMFD sp!,{r0-r2,rps-r12,lr}
  ;VALUEOFZEROPAGE
  ADDRESSOFZEROPAGE_BP r0
  ;R6502LDA
  LDRB ra,[r12,r0] ;r0
  SETNFLAG ra
  SETZFLAG ra
  CPU_CYCLES 3
  ;LDMFD sp!,{r0-r2,rps-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

;bufferdd
;  DCD 0
;  DCD 0
;  DCD 0
;  DCD 0

|r6512opcodeA5|
  ;LDA
  ;STMFD sp!,{r0-r2,rps-r12,lr}
  ;VALUEOFZEROPAGE
  ADDRESSOFZEROPAGE_BP r0
  ;R6502LDA
  LDRB ra,[r12,r0] ;r0
  SETNFLAG ra
  SETZFLAG ra
  CPU_CYCLES 3
  ;LDMFD sp!,{r0-r2,rps-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

  ;STMFD sp!,{r0}
  ;SWI OS_WriteI+32
  ;LDR r1,=bufferdd
  ;MOV r2,#16
  ;SWI OS_ConvertHex4 ;BinaryToDecimal
  ;SWI OS_Write0
  ;LDMFD sp!,{r0}

  ;R6502LDA
  ;LDRB ra,[r12,r0] ;r0

  ;ADD r11,r12,r0 ;r11=memory+r0 (offset)

  ;STMFD sp!,{r0}
  ;SWI OS_WriteI+32
  ;LDR r1,=bufferdd
  ;MOV r2,#16
  ;SWI OS_ConvertHex4 ;BinaryToDecimal
  ;SWI OS_Write0
  ;LDMFD sp!,{r0}

  ;LDRB ra,[r11] ;r0

  ;STMFD sp!,{ra}
  ;SWI OS_WriteI+32
  ;MOV r0,ra
  ;LDR r1,=bufferdd
  ;MOV r2,#16
  ;SWI OS_ConvertHex4 ;BinaryToDecimal
  ;SWI OS_Write0
  ;LDMFD sp!,{ra}

  ;SETNFLAG ra
  ;SETZFLAG ra
  ;CPU_CYCLES 3
  ;LDMFD sp!,{r0-r2,rps-r12,pc}
  ;MOV pc,lr
  ;R6512NEXTOPCODE

|r6512opcodeA6|
  ;LDX
  ;STMFD sp!,{r0-r2,rps-r12,lr}
  ;VALUEOFZEROPAGE
  ADDRESSOFZEROPAGE_BP r0
  ;R6502LDX
  LDRB rx,[r12,r0] ;r0
  SETNFLAG rx
  SETZFLAG rx
  CPU_CYCLES 3
  ;LDMFD sp!,{r0-r2,rps-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcodeA7|
  ;LAX
  ;STMFD sp!,{r0-r2,rpc-r12,lr}
  ADDRESSOFZEROPAGE_BP r0
  LDRB ra,[r12,r0] ;r0=ra
  ;LDR r11,=r6502_a
  ;STRB r0,[r11] ;ra=r0
  ;MOV ra,r0
  ;LDR r11,=r6502_x
  ;STRB r0,[r11] ;rx=ra
  MOV rx,ra
  SETNFLAG ra
  SETZFLAG ra
  CPU_CYCLES 3
  ;LDMFD sp!,{r0-r2,rpc-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcodeA8|
  ;TAY
  ;STMFD sp!,{r0-r2,rps,r12,lr}
  ;LDR r12,=r6502_a
  ;LDRB r0,[r12]
  ;LDR r12,=r6502_y
  ;STRB r0,[r12]
  MOVS ry,ra
  ;LDR r12,=r6502_ps
  ;LDRB rps,[r12] ;load ps
  SETZFLAG0 ;ry
  SETNFLAG ry
  ;STRB rps,[r12]
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r2,rps,r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

;|r6512opcodeA9|
  ;STMFD sp!,{r0-r2,rps-r12,lr}
;  VALUEOFIMMEDIATE ra
  ;R6502LDA
;  SETNFLAG ra
;  SETZFLAG ra
;  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r2,rps-r12,pc}
  ;MOV pc,lr
;  R6512NEXTOPCODE

|r6512opcodeA9|
  ;STMFD sp!,{r0-r2,rps-r12,lr}
  ;VALUEOFIMMEDIATE ra
  VALUEOFIMMEDIATE_BP ra
  ;R6502LDA
  SETNFLAG ra
  SETZFLAG ra
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r2,rps-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcodeAA|
  ;TAX
  ;STMFD sp!,{r0-r2,rps,r12,lr}
  ;LDR r12,=r6502_a
  ;LDRB r0,[r12]
  ;LDR r12,=r6502_x
  ;STRB r0,[r12]
  MOVS rx,ra
  ;LDR r12,=r6502_ps
  ;LDRB rps,[r12] ;load ps
  SETZFLAG0 ;rx
  SETNFLAG rx
  ;STRB rps,[r12]
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r2,rps,r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcodeAB|
  ;OAL
  ;STMFD sp!,{lr}
  VALUEOFIMMEDIATE_BP r0
  ORR r1,ra,#&EE
  AND ra,r1,r0
  MOV rx,ra
  CPU_CYCLES 2
  ;LDMFD sp!,{pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcodeAC|
  ;LDY
  ;STMFD sp!,{r0-r2,rps-r12,lr}
  ;VALUEOFABSOLUTE
  ADDRESSOFABSOLUTE_BP ;r0 ;2 cycles
  READMEMBP ;1 cycle
  ;BL r6502readbp; 1 cycle
  R6502LDY ;1 cycle
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r2,rps-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcodeAD|
  ;STMFD sp!,{r0-r2,rps-r12,lr}
  ;VALUEOFABSOLUTE ;2 cycles
  ADDRESSOFABSOLUTE_BP ;r0 ;2 cycles
  READMEMBP ;1 cycle
  ;BL r6502readbp; 1 cycle
  R6502LDA ;1 cycle
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r2,rps-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcodeAE|
  ;LDX
  ;STMFD sp!,{r0-r2,rps-r12,lr}
  ;VALUEOFABSOLUTE
  ADDRESSOFABSOLUTE_BP ;r0 ;2 cycles
  READMEMBP ;1 cycle
  ;BL r6502readbp; 1 cycle
  R6502LDX ;1 cycle
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r2,rps-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcodeAF|
  ;LAX
  ;STMFD sp!,{r0-r2,rpc-r12,lr}
  ;VALUEOFABSOLUTE
  ADDRESSOFABSOLUTE_BP ;r0 ;2 cycles
  READMEMBP ;1 cycle
  ;BL r6502readbp; 1 cycle
  ;LDR r11,=r6502_a
  ;STRB r0,[r11] ;ra=r0
  MOV ra,r0
  ;LDR r11,=r6502_x
  ;STRB r0,[r11] ;rx=ra
  MOV rx,r0 ;1 cycle
  SETNFLAG r0
  SETZFLAG r0
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r2,rpc-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

;Data Area

;  AREA    |C$$data|, DATA

  END
