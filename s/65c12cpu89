;>65c12cpu89.s
;
; BeebIt - BBC Micro Model B Emulator
;
; Cycle-level CPU emulation
;
; (C) Copyright Crispian Daniels, 2024
;
; Email: <convertedgames@3insdale.me.uk>
;

  GET h.6502zmaps

  GET h.6502cmaps

  GET h.6502cpus

; Use the GET directive to include register definitions as if typed here

  GET h.RegNames

; Area name C$$code advisable as wanted to link with C output

  AREA |C$$code|, CODE, READONLY

; Import global symbols

; Export global symbols

  EXPORT |r65c12brastep|
  EXPORT |r65c12branchtakenstep|
  EXPORT |r65c12bitimmediatestep|
  EXPORT |r65c12loadabstostzstep|
  EXPORT |r65c12fixindexedtostzstep|

|r65c12brastep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  ADD r1,r1,#2:SHL:16
  LDRB r3,[r0,#:INDEX:R6502_M]
  STRB r3,[r0,#:INDEX:R6502_LATCH+2]
  R6502_JUMP_TO_READ_OP

|r65c12branchtakenstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  ADD r1,r1,#2:SHL:16
  LDR r2,[r0,#:INDEX:R6502_LATCH]
  TST r2,#1:SHL:23
  SUBNE r2,r2,#1:SHL:24
  BIC r3,r1,#&FF000000
  ADD r2,r2,r3
  AND r1,r1,#&FF000000
  BIC r3,r2,#&FF000000
  ORR r1,r1,r3
  ANDS r2,r2,#&FF000000
  LDREQ pc,[r0,#:INDEX:R6502_TRANSITION1ACTION]
  ADD r2,r1,r2
  STR r2,[r0,#:INDEX:R6502_ADDRESS_FIX_CODE]
  R6502_JUMP_TO_READ_OP

|r65c12bitimmediatestep|
  LDRB r1,[r0,#:INDEX:R6502_A]
  LDRB r2,[r0,#:INDEX:R6502_M]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  TST r1,r2
  BICNE r3,r3,#ZFLAG
  ORREQ r3,r3,#ZFLAG
  STRB r3,[r0,#:INDEX:R6502_PS]
  R6502_IMMEDIATE_NEXT_INSTRUCTION

|r65c12loadabstostzstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDRB r1,[r0,#:INDEX:R6502_M]
  LDR r2,[r0,#:INDEX:R6502_LATCH]
  ORR r1,r2,r1,LSL #24
  ORR r1,r1,#BUS_BASEFLAG
  MOV r2,#0
  STRB r2,[r0,#:INDEX:R6502_M]
  R6502_JUMP_TO_WRITE_OP

|r65c12fixindexedtostzstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_FIX_CODE]
  MOV r2,#0
  STRB r2,[r0,#:INDEX:R6502_M]
  R6502_JUMP_TO_WRITE_OP

;Data Area

;  AREA    |C$$data|, DATA

  END
