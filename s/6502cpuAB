;>6502cpuAB.s
;
; BeebIt - BBC Micro Model B Emulator
;
; Cycle-level CPU emulation
;
; (C) Copyright Crispian Daniels, 2024
;
; Email: <convertedgames@3insdale.me.uk>
;

  GET h.6502zmaps

  GET h.6502cmaps

  GET h.6502cpus

; Use the GET directive to include register definitions as if typed here

  GET h.RegNames

; Area name C$$code advisable as wanted to link with C output

  AREA |C$$code|, CODE, READONLY

; Import global symbols

; Export global symbols

  EXPORT |r6502ldyimmediatestep|
  EXPORT |r6502ldystep|
  EXPORT |r6502ldaimmediatestep|
  EXPORT |r6502ldastep|
  EXPORT |r6502ldximmediatestep|
  EXPORT |r6502ldxstep|
  EXPORT |r6502laxstep|
  EXPORT |r6502taystep|
  EXPORT |r6502taxstep|
  EXPORT |r6502oalimmediatestep|
  EXPORT |r6502loadzpgystep|
  EXPORT |r6502bcsstep|
  EXPORT |r6502clvstep|
  EXPORT |r6502tsxstep|
  EXPORT |r6502lasstep|

|r6502ldyimmediatestep|
  LDRB r2,[r0,#:INDEX:R6502_M]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  MOVS r1,r2,LSL #24
  BIC r3,r3,#NFLAG|ZFLAG
  STRB r2,[r0,#:INDEX:R6502_Y]
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  STRB r3,[r0,#:INDEX:R6502_PS]
  R6502_IMMEDIATE_NEXT_INSTRUCTION

|r6502ldystep|
  LDRB r2,[r0,#:INDEX:R6502_M]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  MOVS r1,r2,LSL #24
  BIC r3,r3,#NFLAG|ZFLAG
  STRB r2,[r0,#:INDEX:R6502_Y]
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  STRB r3,[r0,#:INDEX:R6502_PS]
  R6502_ADDRESSED_NEXT_INSTRUCTION

|r6502ldaimmediatestep|
  LDRB r2,[r0,#:INDEX:R6502_M]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  MOVS r1,r2,LSL #24
  BIC r3,r3,#NFLAG|ZFLAG
  STRB r2,[r0,#:INDEX:R6502_A]
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  STRB r3,[r0,#:INDEX:R6502_PS]
  R6502_IMMEDIATE_NEXT_INSTRUCTION

|r6502ldastep|
  LDRB r2,[r0,#:INDEX:R6502_M]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  MOVS r1,r2,LSL #24
  BIC r3,r3,#NFLAG|ZFLAG
  STRB r2,[r0,#:INDEX:R6502_A]
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  STRB r3,[r0,#:INDEX:R6502_PS]
  R6502_ADDRESSED_NEXT_INSTRUCTION

|r6502ldximmediatestep|
  LDRB r2,[r0,#:INDEX:R6502_M]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  MOVS r1,r2,LSL #24
  BIC r3,r3,#NFLAG|ZFLAG
  STRB r2,[r0,#:INDEX:R6502_X]
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  STRB r3,[r0,#:INDEX:R6502_PS]
  R6502_IMMEDIATE_NEXT_INSTRUCTION

|r6502ldxstep|
  LDRB r2,[r0,#:INDEX:R6502_M]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  MOVS r1,r2,LSL #24
  BIC r3,r3,#NFLAG|ZFLAG
  STRB r2,[r0,#:INDEX:R6502_X]
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  STRB r3,[r0,#:INDEX:R6502_PS]
  R6502_ADDRESSED_NEXT_INSTRUCTION

|r6502laxstep|
  LDRB r2,[r0,#:INDEX:R6502_M]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  MOVS r1,r2,LSL #24
  BIC r3,r3,#NFLAG|ZFLAG
  STRB r2,[r0,#:INDEX:R6502_A]
  STRB r2,[r0,#:INDEX:R6502_X]
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  STRB r3,[r0,#:INDEX:R6502_PS]
  R6502_ADDRESSED_NEXT_INSTRUCTION

|r6502taystep|
  LDRB r1,[r0,#:INDEX:R6502_A]
  STRB r1,[r0,#:INDEX:R6502_Y]
  LDRB r2,[r0,#:INDEX:R6502_PS]
  MOVS r3,r1,LSL #24
  BIC r2,r2,#NFLAG|ZFLAG
  ORRMI r2,r2,#NFLAG
  ORREQ r2,r2,#ZFLAG
  STRB r2,[r0,#:INDEX:R6502_PS]
  R6502_IMPLIED_NEXT_INSTRUCTION

|r6502taxstep|
  LDRB r1,[r0,#:INDEX:R6502_A]
  STRB r1,[r0,#:INDEX:R6502_X]
  LDRB r2,[r0,#:INDEX:R6502_PS]
  MOVS r3,r1,LSL #24
  BIC r2,r2,#NFLAG|ZFLAG
  ORRMI r2,r2,#NFLAG
  ORREQ r2,r2,#ZFLAG
  STRB r2,[r0,#:INDEX:R6502_PS]
  R6502_IMPLIED_NEXT_INSTRUCTION

|r6502oalimmediatestep|
  LDR r1,[r0,#:INDEX:R6502_A_SHIFT]
  LDR r2,[r0,#:INDEX:R6502_M_SHIFT]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  ORR r1,r1,#&EE000000
  ANDS r2,r1,r2
  BIC r3,r3,#NFLAG|ZFLAG
  STR r2,[r0,#:INDEX:R6502_A_SHIFT]
  STR r2,[r0,#:INDEX:R6502_X_SHIFT]
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  STRB r3,[r0,#:INDEX:R6502_PS]
  R6502_IMMEDIATE_NEXT_INSTRUCTION

|r6502loadzpgystep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  LDRB r2,[r0,#:INDEX:R6502_Y]
  ADD r1,r1,r2,LSL #24
  R6502_JUMP_TO_ZPG_READ_OP

|r6502bcsstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  LDRB r2,[r0,#:INDEX:R6502_PS]
  TST r2,#CFLAG
  ADD r1,r1,#2:SHL:16
  LDREQ pc,[r0,#:INDEX:R6502_TRANSITION1ACTION]
  LDRB r3,[r0,#:INDEX:R6502_M]
  STRB r3,[r0,#:INDEX:R6502_LATCH+2]
  R6502_JUMP_TO_READ_OP

|r6502clvstep|
  LDRB r2,[r0,#:INDEX:R6502_PS]
  BIC r2,r2,#VFLAG
  STRB r2,[r0,#:INDEX:R6502_PS]
  R6502_IMPLIED_NEXT_INSTRUCTION

|r6502tsxstep|
  LDRB r1,[r0,#:INDEX:R6502_SP_CODE+3]
  STRB r1,[r0,#:INDEX:R6502_X]
  LDRB r2,[r0,#:INDEX:R6502_PS]
  MOVS r3,r1,LSL #24
  BIC r2,r2,#NFLAG|ZFLAG
  ORRMI r2,r2,#NFLAG
  ORREQ r2,r2,#ZFLAG
  STRB r2,[r0,#:INDEX:R6502_PS]
  R6502_IMPLIED_NEXT_INSTRUCTION

|r6502lasstep|
  LDR r1,[r0,#:INDEX:R6502_SP_CODE]
  LDR r2,[r0,#:INDEX:R6502_M_SHIFT]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  ANDS r2,r1,r2
  STR r2,[r0,#:INDEX:R6502_SP_CODE]
  BIC r3,r3,#NFLAG|ZFLAG
  STR r2,[r0,#:INDEX:R6502_A_SHIFT]
  STR r2,[r0,#:INDEX:R6502_X_SHIFT]
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  STRB r3,[r0,#:INDEX:R6502_PS]
  R6502_ADDRESSED_NEXT_INSTRUCTION

;Data Area

;  AREA    |C$$data|, DATA

  END
