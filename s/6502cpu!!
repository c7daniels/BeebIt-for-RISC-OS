;>6502cpu!!.s
;
; BeebIt - BBC Micro Model B Emulator
;
; Cycle-level CPU emulation
;
; (C) Copyright Crispian Daniels, 2024-2025
;
; Email: <convertedgames@3insdale.me.uk>
;

  GET h.6502zmaps

  GET h.6502cmaps

  GET h.6502cpus

; Use the GET directive to include register definitions as if typed here

  GET h.RegNames

; Area name C$$code advisable as wanted to link with C output

  AREA |C$$code|, CODE, READONLY

; Import global symbols

; Export global symbols

  EXPORT |r6502yield|
  EXPORT |r6502fetch|
  EXPORT |r6502interruptfetch|
  EXPORT |r6502fetchthentestirq|
  EXPORT |r6502enterreset|
  EXPORT |r6502decodestep|
  EXPORT |r6502interruptdecodestep|
  EXPORT |r6502waitstep|
  EXPORT |r6502waitonresetstep|
  EXPORT |r6502resetstep|
  EXPORT |r6502notpushedtonotpushstep|
  EXPORT |r6502breadcrumbnotpushedtoresetlostep|
  EXPORT |r6502pushedtopushpwithoutbstep|
  EXPORT |r6502startyield|
  EXPORT |r6502startinterrupt|

  ASSERT :INDEX:R6502ZONE_AC == &0
  ASSERT :INDEX:R6502ZONE_BC == &104
  ASSERT :INDEX:R6502ZONE_CC == &400
  ASSERT :INDEX:R6502ZONE_DC == &1000
  ASSERT :INDEX:R6502ZONE_EC == &1C00
  ASSERT SIZEOF_R6502ZONEMAP == &4000

  ASSERT :INDEX:R6502_M_SHIFT == :INDEX:R6502ZONE_M_SHIFT
  ASSERT :INDEX:R6502_M == :INDEX:R6502ZONE_M

  ASSERT :INDEX:R6502_AP == :INDEX:R6502ZONE_AP
  ASSERT :INDEX:R6502_BP == :INDEX:R6502ZONE_BP
  ASSERT :INDEX:R6502_CP == :INDEX:R6502ZONE_CP
  ASSERT :INDEX:R6502_DP == :INDEX:R6502ZONE_DP
  ASSERT SIZEOF_R6502MAP == SIZEOF_R6502ZONEMAP

  ASSERT :INDEX:R6502_BUSOPS == (BUS_BASEFLAG-BUS_WRITEFLAG):SHL:8

|r6502yield|
  STR r1,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  LDR r3,[r0,#:INDEX:R6502_FETCHACTION]
  STR r3,[r0,#:INDEX:R6502_TRANSITION1ACTION]
  STR r3,[r0,#:INDEX:R6502_TRANSITION2ACTION]
  ADD r2,r0,#:INDEX:R6502_SEQUENCES
  LDR r2,[r2,#R6502_DECODE_SEQUENCE:SHL:2]
  STR r2,[r0,#:INDEX:R6502_CPU_STATE]
  STR lr,[sp, #-4]!
  MOV lr,pc
  LDR pc,[r0,#:INDEX:R6502_YIELDFLAGACTION]
  LDR lr, [sp], #4
  R6502_JUMP_TO_READ_OP

|r6502fetch|
  STR r1,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  ADD r2,r0,#:INDEX:R6502_SEQUENCES
  LDR r2,[r2,#R6502_DECODE_SEQUENCE:SHL:2]
  STR r2,[r0,#:INDEX:R6502_CPU_STATE]
  R6502_JUMP_TO_READ_OP

|r6502interruptfetch|
  STR r1,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  ADD r2,r0,#:INDEX:R6502_SEQUENCES
  LDR r2,[r2,#R6502_INTERRUPT_DECODE_SEQUENCE:SHL:2]
  STR r2,[r0,#:INDEX:R6502_CPU_STATE]
  MOV r2,#0
  STR r2,[r0,#:INDEX:R6502_TIMESINTERRUPTMISSED]
  R6502_JUMP_TO_READ_OP

|r6502fetchthentestirq|
  STR r1,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  ADD r2,r0,#:INDEX:R6502_SEQUENCES
  LDR r2,[r2,#R6502_DECODE_SEQUENCE:SHL:2]
  STR r2,[r0,#:INDEX:R6502_CPU_STATE]
  LDRB r2,[r0,#:INDEX:R6502_IRQ]
  TST r2,r2
  LDRNE r3,[r0,#:INDEX:R6502_INTERRUPTFETCHACTION]
  LDREQ r3,[r0,#:INDEX:R6502_TRANSITION2ACTION]
  STR r3,[r0,#:INDEX:R6502_TRANSITION1ACTION]
  LDR r2,[r0,#:INDEX:R6502_LBREAK]
  TST r2,r2
  LDRNE r3,[r0,#:INDEX:R6502_RESETACTION]
  STRNE r3,[r0,#:INDEX:R6502_TRANSITION1ACTION]
  R6502_JUMP_TO_READ_OP

|r6502enterreset|
  STR r1,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  ADD r2,r0,#:INDEX:R6502_SEQUENCES
  LDR r2,[r2,#R6502_RESET_SEQUENCE:SHL:2]
  STR r2,[r0,#:INDEX:R6502_CPU_STATE]
  MOV r2,#0
  STR r2,[r0,#:INDEX:R6502_TIMESINTERRUPTMISSED]
  R6502_JUMP_TO_READ_OP

|r6502decodestep|
  LDRB r2,[r0,#:INDEX:R6502_M]
  ADD r1,r0,#:INDEX:R6502_SEQUENCES
  LDR r1,[r1,r2,LSL #2]
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  ADD r1,r1,#1:SHL:16
  R6502_JUMP_TO_READ_OP

|r6502interruptdecodestep|
  ADD r1,r0,#:INDEX:R6502_SEQUENCES
  LDR r1,[r1,#R6502_INTERRUPT_SEQUENCE:SHL:2]
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  R6502_JUMP_TO_READ_OP

|r6502waitstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_LAST_PC_CODE]
  R6502_JUMP_TO_READ_OP

|r6502waitonresetstep|
  LDR r2,[r0,#:INDEX:R6502_LBREAK]
  TST r2,r2
  LDRB r2,[r0,#:INDEX:R6502_NMIS]
  BNE r6502waitonresetcontinuing
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  TST r2,#NMIS_OLDRESET
  STR lr,[sp, #-4]!
  BNE r6502waitonresetstep2
  ORR r2,r2,#NMIS_OLDRESET
  STRB r2,[r0,#:INDEX:R6502_NMIS]
  MOV lr,pc
  LDR pc,[r0,#:INDEX:R6502_RESETSTARTINGACTION]
  LDRB r2,[r0,#:INDEX:R6502_NMIS]
r6502waitonresetstep2
  BIC r2,r2,#NMIS_OLDRESET
  STRB r2,[r0,#:INDEX:R6502_NMIS]
  MOV lr,pc
  LDR pc,[r0,#:INDEX:R6502_RESETCONTINUINGACTION]
  LDR lr, [sp], #4
  LDR r1,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  ADD r1,r1,#1:SHL:16
  R6502_JUMP_TO_READ_OP

r6502waitonresetcontinuing
  TST r2,#NMIS_OLDRESET
  BNE r6502waitonresetcontinuing2
  STR lr,[sp, #-4]!
  ORR r2,r2,#NMIS_OLDRESET
  STRB r2,[r0,#:INDEX:R6502_NMIS]
  MOV lr,pc
  LDR pc,[r0,#:INDEX:R6502_RESETSTARTINGACTION]
  LDR lr, [sp], #4
r6502waitonresetcontinuing2
  R6502_JUMP_WITHOUT_BUS_OP

|r6502resetstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_SP_CODE]
  R6502_JUMP_TO_STACK_READ_OP

|r6502notpushedtonotpushstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r2,[r0,#:INDEX:R6502_SP_CODE]
  SUB r1,r2,#1:SHL:24
  STR r1,[r0,#:INDEX:R6502_SP_CODE]
  R6502_JUMP_TO_STACK_READ_OP

|r6502breadcrumbnotpushedtoresetlostep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r2,[r0,#:INDEX:R6502_SP_CODE]
  SUB r2,r2,#1:SHL:24
  STR r2,[r0,#:INDEX:R6502_SP_CODE]
  LDRB r2,[r0,#:INDEX:R6502_PS]
  ORR r2,r2,#IFLAG
  STRB r2,[r0,#:INDEX:R6502_PS]
  LDR r3,[r0,#:INDEX:R6502_TRANSITION2ACTION]
  STR r3,[r0,#:INDEX:R6502_TRANSITION1ACTION]
  LDR r2,[r0,#:INDEX:R6502_LBREAK]
  TST r2,r2
  LDRNE r3,[r0,#:INDEX:R6502_RESETACTION]
  STRNE r3,[r0,#:INDEX:R6502_TRANSITION1ACTION]
  MOV r1,#BUS_BASEFLAG
  SUB r1,r1,#4:SHL:16
  STR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  R6502_JUMP_TO_READ_OP

|r6502pushedtopushpwithoutbstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r2,[r0,#:INDEX:R6502_SP_CODE]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  SUB r1,r2,#1:SHL:24
  BIC r3,r3,#BFLAG
  STR r1,[r0,#:INDEX:R6502_SP_CODE]
  STRB r3,[r0,#:INDEX:R6502_M]
  R6502_JUMP_TO_STACK_WRITE_OP

|r6502startyield|
  LDR r1,[r0,#:INDEX:R6502_TRANSITION1ACTION]
  LDR r2,[r0,#:INDEX:R6502_FETCHACTION]
  LDR r3,[r0,#:INDEX:R6502_YIELDACTION]
  CMP r1,r2
  STR r3,[r0,#:INDEX:R6502_TRANSITION2ACTION]
  MOVNE pc,lr
  STR r3,[r0,#:INDEX:R6502_TRANSITION1ACTION]
  LDR r1,[r0,#:INDEX:R6502_LBREAK]
  TST r1,r1
  LDRNE r3,[r0,#:INDEX:R6502_RESETACTION]
  STRNE r3,[r0,#:INDEX:R6502_TRANSITION1ACTION]
  MOV pc,lr

|r6502startinterrupt|
  LDR r1,[r0,#:INDEX:R6502_TRANSITION1ACTION]
  LDR r3,[r0,#:INDEX:R6502_FETCHACTION]
  CMP r1,r3
  LDRNE r3,[r0,#:INDEX:R6502_YIELDACTION]
  CMPNE r1,r3
  MOVNE pc,lr
  LDR r3,[r0,#:INDEX:R6502_INTERRUPTFETCHACTION]
  STR r3,[r0,#:INDEX:R6502_TRANSITION1ACTION]
  LDR r1,[r0,#:INDEX:R6502_LBREAK]
  TST r1,r1
  LDRNE r3,[r0,#:INDEX:R6502_RESETACTION]
  STRNE r3,[r0,#:INDEX:R6502_TRANSITION1ACTION]
  MOV pc,lr

;Data Area

;  AREA    |C$$data|, DATA

  END
