;>6502cpu45.s
;
; BeebIt - BBC Micro Model B Emulator
;
; Cycle-level CPU emulation
;
; (C) Copyright Crispian Daniels, 2024
;
; Email: <convertedgames@3insdale.me.uk>
;

  GET h.6502zmaps

  GET h.6502cmaps

  GET h.6502cpus

; Use the GET directive to include register definitions as if typed here

  GET h.RegNames

; Area name C$$code advisable as wanted to link with C output

  AREA |C$$code|, CODE, READONLY

; Import global symbols

; Export global symbols

  EXPORT |r6502loadpchtoincrementstep|
  EXPORT |r6502pulledptopullstep|
  EXPORT |r6502pulledpclstep|
  EXPORT |r6502eorimmediatestep|
  EXPORT |r6502eorstep|
  EXPORT |r6502lsrastep|
  EXPORT |r6502lsrzpgstep|
  EXPORT |r6502lsrstep|
  EXPORT |r6502lsezpgstep|
  EXPORT |r6502lsestep|
  EXPORT |r6502topushastep|
  EXPORT |r6502alrimmediatestep|
  EXPORT |r6502bvcstep|
  EXPORT |r6502clistep|

|r6502loadpchtoincrementstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDRB r1,[r0,#:INDEX:R6502_M]
  LDR r2,[r0,#:INDEX:R6502_LATCH]
  ORR r1,r2,r1,LSL #24
  ORR r1,r1,#BUS_BASEFLAG
  STR r1,[r0,#:INDEX:R6502_LAST_PC_CODE]
  R6502_JUMP_TO_READ_OP

|r6502pulledptopullstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r2,[r0,#:INDEX:R6502_SP_CODE]
  ADD r1,r2,#1:SHL:24
  STR r1,[r0,#:INDEX:R6502_SP_CODE]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  LDRB r2,[r0,#:INDEX:R6502_M]
  ANDS r3,r3,#IFLAG
  ORR r2,r2,#UFLAG|BFLAG
  STRB r2,[r0,#:INDEX:R6502_PS]
  BEQ r6502pulledptopullstep2
  TST r2,#IFLAG
  BNE r6502pulledptopullstepdone
  LDRB r2,[r0,#:INDEX:R6502_IRQ]
  TST r2,r2
  BEQ r6502pulledptopullstepdone
  LDR r2,[r0,#:INDEX:R6502_TRANSITION1ACTION]
  LDR r3,[r0,#:INDEX:R6502_FETCHACTION]
  CMP r2,r3
  LDRNE r3,[r0,#:INDEX:R6502_YIELDACTION]
  CMPNE r2,r3
  BNE r6502pulledptopullstepdone
  LDR r3,[r0,#:INDEX:R6502_INTERRUPTFETCHACTION]
  STR r3,[r0,#:INDEX:R6502_TRANSITION1ACTION]
  LDR r2,[r0,#:INDEX:R6502_LBREAK]
  TST r2,r2
  LDRNE r3,[r0,#:INDEX:R6502_RESETACTION]
  STRNE r3,[r0,#:INDEX:R6502_TRANSITION1ACTION]
r6502pulledptopullstepdone
  R6502_JUMP_TO_STACK_READ_OP
r6502pulledptopullstep2
  TST r2,#IFLAG
  BEQ r6502pulledptopullstepdone
  LDR r2,[r0,#:INDEX:R6502_TRANSITION1ACTION]
  LDR r3,[r0,#:INDEX:R6502_INTERRUPTFETCHACTION]
  CMP r2,r3
  BNE r6502pulledptopullstepdone
  LDRB r2,[r0,#:INDEX:R6502_NMIS]
  BIC r2,r2,r2,LSR #4
  TST r2,#NMIS_NMI
  BNE r6502pulledptopullstepdone
  LDR r3,[r0,#:INDEX:R6502_TRANSITION2ACTION]
  STR r3,[r0,#:INDEX:R6502_TRANSITION1ACTION]
  LDR r2,[r0,#:INDEX:R6502_LBREAK]
  TST r2,r2
  LDRNE r3,[r0,#:INDEX:R6502_RESETACTION]
  STRNE r3,[r0,#:INDEX:R6502_TRANSITION1ACTION]
  R6502_JUMP_TO_STACK_READ_OP

|r6502pulledpclstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r2,[r0,#:INDEX:R6502_SP_CODE]
  ADD r1,r2,#1:SHL:24
  STR r1,[r0,#:INDEX:R6502_SP_CODE]
  LDRB r2,[r0,#:INDEX:R6502_M]
  STRB r2,[r0,#:INDEX:R6502_LATCH+2]
  R6502_JUMP_TO_STACK_READ_OP

|r6502eorimmediatestep|
  LDR r1,[r0,#:INDEX:R6502_A_SHIFT]
  LDR r2,[r0,#:INDEX:R6502_M_SHIFT]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  EORS r1,r1,r2
  BIC r3,r3,#NFLAG|ZFLAG
  STR r1,[r0,#:INDEX:R6502_A_SHIFT]
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  STRB r3,[r0,#:INDEX:R6502_PS]
  R6502_IMMEDIATE_NEXT_INSTRUCTION

|r6502eorstep|
  LDR r1,[r0,#:INDEX:R6502_A_SHIFT]
  LDR r2,[r0,#:INDEX:R6502_M_SHIFT]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  EORS r1,r1,r2
  BIC r3,r3,#NFLAG|ZFLAG
  STR r1,[r0,#:INDEX:R6502_A_SHIFT]
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  STRB r3,[r0,#:INDEX:R6502_PS]
  R6502_ADDRESSED_NEXT_INSTRUCTION

|r6502lsrastep|
  LDRB r2,[r0,#:INDEX:R6502_A]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  MOVS r2,r2,LSR #1
  BIC r3,r3,#NFLAG|ZFLAG|CFLAG
  ORREQ r3,r3,#ZFLAG
  ORRCS r3,r3,#CFLAG
  STRB r2,[r0,#:INDEX:R6502_A]
  STRB r3,[r0,#:INDEX:R6502_PS]
  R6502_IMPLIED_NEXT_INSTRUCTION

|r6502lsrzpgstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDRB r2,[r0,#:INDEX:R6502_M]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  MOVS r2,r2,LSR #1
  BIC r3,r3,#NFLAG|ZFLAG|CFLAG
  ORREQ r3,r3,#ZFLAG
  ORRCS r3,r3,#CFLAG
  STRB r2,[r0,#:INDEX:R6502_M]
  STRB r3,[r0,#:INDEX:R6502_PS]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  R6502_JUMP_TO_ZPG_WRITE_OP

|r6502lsrstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDRB r2,[r0,#:INDEX:R6502_M]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  MOVS r2,r2,LSR #1
  BIC r3,r3,#NFLAG|ZFLAG|CFLAG
  ORREQ r3,r3,#ZFLAG
  ORRCS r3,r3,#CFLAG
  STRB r2,[r0,#:INDEX:R6502_M]
  STRB r3,[r0,#:INDEX:R6502_PS]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  R6502_JUMP_TO_WRITE_OP

|r6502lsezpgstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_A_SHIFT]
  LDRB r2,[r0,#:INDEX:R6502_M]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  MOVS r2,r2,LSR #1
  BIC r3,r3,#NFLAG|ZFLAG|CFLAG
  ORRCS r3,r3,#CFLAG
  EORS r1,r1,r2,LSL #24
  STRB r2,[r0,#:INDEX:R6502_M]
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  STR r1,[r0,#:INDEX:R6502_A_SHIFT]
  STRB r3,[r0,#:INDEX:R6502_PS]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  R6502_JUMP_TO_ZPG_WRITE_OP

|r6502lsestep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_A_SHIFT]
  LDRB r2,[r0,#:INDEX:R6502_M]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  MOVS r2,r2,LSR #1
  BIC r3,r3,#NFLAG|ZFLAG|CFLAG
  ORRCS r3,r3,#CFLAG
  EORS r1,r1,r2,LSL #24
  STRB r2,[r0,#:INDEX:R6502_M]
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  STR r1,[r0,#:INDEX:R6502_A_SHIFT]
  STRB r3,[r0,#:INDEX:R6502_PS]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  R6502_JUMP_TO_WRITE_OP

|r6502topushastep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_SP_CODE]
  LDRB r2,[r0,#:INDEX:R6502_A]
  STRB r2,[r0,#:INDEX:R6502_M]
  R6502_JUMP_TO_STACK_WRITE_OP

|r6502alrimmediatestep|
  LDRB r1,[r0,#:INDEX:R6502_A]
  LDRB r2,[r0,#:INDEX:R6502_M]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  AND r2,r2,r1
  MOVS r1,r2,LSR #1
  BIC r3,r3,#NFLAG|ZFLAG|CFLAG
  STRB r1,[r0,#:INDEX:R6502_A]
  ORREQ r3,r3,#ZFLAG
  ORRCS r3,r3,#CFLAG
  STRB r3,[r0,#:INDEX:R6502_PS]
  R6502_IMMEDIATE_NEXT_INSTRUCTION

|r6502bvcstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  LDRB r2,[r0,#:INDEX:R6502_PS]
  TST r2,#VFLAG
  ADD r1,r1,#2:SHL:16
  LDRNE pc,[r0,#:INDEX:R6502_TRANSITION1ACTION]
  LDRB r3,[r0,#:INDEX:R6502_M]
  STRB r3,[r0,#:INDEX:R6502_LATCH+2]
  R6502_JUMP_TO_READ_OP

|r6502clistep|
  LDRB r2,[r0,#:INDEX:R6502_PS]
  TST r2,#IFLAG
  LDR r1,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  ADD r1,r1,#1:SHL:16
  LDR r3,[r0,#:INDEX:R6502_TRANSITION1ACTION]
  MOVEQ pc,r3
  BIC r2,r2,#IFLAG
  STRB r2,[r0,#:INDEX:R6502_PS]
  LDR r2,[r0,#:INDEX:R6502_FETCHACTION]
  CMP r2,r3
  LDRNE r2,[r0,#:INDEX:R6502_YIELDACTION]
  CMPNE r2,r3
  MOVNE pc,r3
  LDR r3,[r0,#:INDEX:R6502_FETCHTHENTESTIRQACTION]
  STR r3,[r0,#:INDEX:R6502_TRANSITION1ACTION]
  LDR r2,[r0,#:INDEX:R6502_LBREAK]
  TST r2,r2
  LDRNE r3,[r0,#:INDEX:R6502_RESETACTION]
  STRNE r3,[r0,#:INDEX:R6502_TRANSITION1ACTION]
  MOV pc,r3

;Data Area

;  AREA    |C$$data|, DATA

  END
