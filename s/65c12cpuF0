;>65c12cpuF0.s
;
; BeebIt - BBC Micro Model B Emulator
;
; (C) Copyright Michael J Foot, 1998-2005
;
; Email: <mjfoot@paradise.net.nz>
;
; r12=pointer to variable
; r11=pointer to variable
; r10=pointer to variable
; r9=PC
; r8=PS
; r7=Y
; r6=X
; r5=A

  GET h.6502cpus

  GET h.6502cpui

; Use the GET directive to include register definitions as if typed here

  GET h.RegNames

; Use the GET directive to include a list of SWI names as if typed here

  GET h.SWInames

; Area name C$$code advisable as wanted to link with C output

  AREA |C$$code|, CODE, READONLY

; Import global symbols

  IMPORT |memory|
  IMPORT |r6502_sp|
  IMPORT |r6502_pc|
  IMPORT |r6502_ps|
  IMPORT |r6502_a|
  IMPORT |r6502_x|
  IMPORT |r6502_y|
  IMPORT |r6502_cyclestogo|
  ;IMPORT |r6502read|
  IMPORT |r6502readm|
  ;IMPORT |r6502write|
  IMPORT |r6502writem|
  IMPORT |sbcbcd|
  IMPORT |r65c12loadregs|
  IMPORT |r65c12saveregs|
  IMPORT |r65c12opcodes|

; Export global symbols

  EXPORT |r65c12opcodeF0|
  EXPORT |r65c12opcodeF1|
  EXPORT |r65c12opcodeF2|
  EXPORT |r65c12opcodeF3|
  EXPORT |r65c12opcodeF4|
  EXPORT |r65c12opcodeF5|
  EXPORT |r65c12opcodeF6|
  EXPORT |r65c12opcodeF7|
  EXPORT |r65c12opcodeF8|
  EXPORT |r65c12opcodeF9|
  EXPORT |r65c12opcodeFA|
  EXPORT |r65c12opcodeFB|
  EXPORT |r65c12opcodeFC|
  EXPORT |r65c12opcodeFD|
  EXPORT |r65c12opcodeFE|
  EXPORT |r65c12opcodeFF|

|r65c12opcodeF0|
  ;BEQ
  ;if condition succeeds
  ;  if page boundary crossed
  ;    4 cycles
  ;  else
  ;    3 cycles
  ;else
  ;  2 cycles
  ;STMFD sp!,{r0-r12,lr}
  ;LDR r10,=r6502_ps
  ;LDRB rps,[r10] ;load ps
  ;LDR r11,=r6502_pc
  ;LDR rpc,[r11]
  ANDS r0,rps,#ZFLAG
  ;if (r6502_ps & ZFLAG)
  BNE r65c12opcodeF0_2
  ;else
  ADD rpc,rpc,#1 ;r6502_pc++
  ;ANDS r0,rpc,#&10000
  ;MOVNE r0,#&FF00
  ;ORRNE r0,r0,#&00FF
  ;ANDNE rpc,rpc,r0
  ;STR rpc,[r11] ;r6502_pc
  ;LDR r10,=r6502_cyclestogo
  ;LDR r4,[r10] ;r6502_cyclestogo
  ;SUB r4,r4,#2
  ;STR r4,[r10] ;r6502_cyclestogo
  CPU_CYCLES 2
  ;B r65c12opcodeF0end
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R65C12NEXTOPCODE

r65c12opcodeF0_2
  ;LDR r12,=memory ;pointer to memory block
  VALUEOFIMMEDIATE_M r0
  MOV r1,rpc,LSR#8 ;r1=(pc>>8)
  AND r1,r1,#&FF
  ANDS r2,r0,#&80 ;r2=(n & 0x80)
  MOVNE r3,#&100
  SUBNE r0,r3,r0 ;r0=(&100-r0)
  SUBNE rpc,rpc,r0 ;rpc=(rpc-r0)
  ADDEQ rpc,rpc,r0 ;rpc=(rpc+r0)

  ;ANDS r0,rpc,#&10000
  ;MOVNE r0,#&FF00
  ;ORRNE r0,r0,#&00FF
  ;ANDNE rpc,rpc,r0

  MOV r2,rpc,LSR#8 ;r2=(pc>>8)
  AND r2,r2,#&FF
  ;LDR r10,=r6502_cyclestogo
  ;LDR r3,[r10] ;r6502_cyclestogo
  CMP r1,r2 ;if (n1 != (r6502_pc >> 8))
  ;SUBNE r3,r3,#4 ;r3=(r3-4)
  ;SUBEQ r3,r3,#3 ;r3=(r3-3)
  SUBNE rcycles,rcycles,#4 ;r3=(r3-4)
  SUBEQ rcycles,rcycles,#3 ;r3=(r3-3)
  ;STR r3,[r10] ;r6502_cyclestogo
;r65c12opcodeF0end
  ;STR rpc,[r11] ;r6502_pc
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R65C12NEXTOPCODE

|r65c12opcodeF1|
  ;SBC
  ;STMFD sp!,{r0-r12,lr}
  ;VALUEOFPOSTINDEXEDY
  ADDRESSOFPOSTINDEXEDY_M ;r0 ;3+ cycles
  READMEMM ;1 cycle
  ;LDR r12,=r6502_ps ;pointer to r6502_ps
  ;LDRB rps,[r12] ;load r6502_ps
  ANDS r1,rps,#DFLAG
  BNE r65c12opcodeF1_2
  ;digital
  R6502SBC ;1 cycle
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R65C12NEXTOPCODE
r65c12opcodeF1_2
  ;BCD
  ;STMFD sp!,{lr}
  STR lr,[sp, #-4]!
  BL r65c12saveregs
  BL sbcbcd ;1 cycle
  BL r65c12loadregs
  ;LDMFD sp!,{lr}
  LDR lr, [sp], #4

  CPU_CYCLES 3 ;+1
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R65C12NEXTOPCODE

|r65c12opcodeF2|
  ;SBC
  ;STMFD sp!,{lr}
  ADDRESSOFINDZEROPAGE_M
  ;LDR r12,=r6502_ps ;pointer to r6502_ps
  ;LDRB rps,[r12] ;load r6502_ps
  ANDS r1,rps,#DFLAG
  BNE r65c12opcodeF2_2
  ;digital
  R6502SBC
  CPU_CYCLES 5
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R65C12NEXTOPCODE
r65c12opcodeF2_2
  ;BCD
  ;STMFD sp!,{lr}
  STR lr,[sp, #-4]!
  BL r65c12saveregs
  BL sbcbcd
  BL r65c12loadregs
  ;LDMFD sp!,{lr}
  LDR lr, [sp], #4
  CPU_CYCLES 6 ;+1
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R65C12NEXTOPCODE

|r65c12opcodeF3|
  ;STMFD sp!,{lr}
  R6502NOP
  ;LDMFD sp!,{pc}
  ;MOV pc,lr
  R65C12NEXTOPCODE

|r65c12opcodeF4|
  ;SKB
  ;STMFD sp!,{r0-r2,rpc,r11,lr}
  R6502SKB
  CPU_CYCLES 3
  ;LDMFD sp!,{r0-r2,rpc,r11,pc}
  ;MOV pc,lr
  R65C12NEXTOPCODE

|r65c12opcodeF5|
  ;SBC
  ;STMFD sp!,{r0-r12,lr}
  VALUEOFZEROPAGEX_M ;;;
  ;LDR r12,=r6502_ps ;pointer to r6502_ps
  ;LDRB rps,[r12] ;load r6502_ps
  ANDS r1,rps,#DFLAG
  BNE r65c12opcodeF5_2
  ;digital
  R6502SBC
  CPU_CYCLES 4
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R65C12NEXTOPCODE
r65c12opcodeF5_2
  ;BCD
  ;STMFD sp!,{lr}
  STR lr,[sp, #-4]!
  BL r65c12saveregs
  BL sbcbcd
  BL r65c12loadregs
  ;LDMFD sp!,{lr}
  LDR lr, [sp], #4
  CPU_CYCLES 5 ;+1
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R65C12NEXTOPCODE

|r65c12opcodeF6|
  ;STMFD sp!,{r0-r2,rps-r12,lr}
  VALUEOFZEROPAGEX_M ;;;
  R6502INC r0
  STRB r0,[r11]
  CPU_CYCLES 6
  ;LDMFD sp!,{r0-r2,rps-r12,pc}
  ;MOV pc,lr
  R65C12NEXTOPCODE

|r65c12opcodeF7|
  ;STMFD sp!,{lr}
  R6502NOP
  ;LDMFD sp!,{pc}
  ;MOV pc,lr
  R65C12NEXTOPCODE

|r65c12opcodeF8|
  ;SED
  ;STMFD sp!,{r2,rps,r11,lr}
  ;LDR r11,=r6502_ps
  ;LDRB rps,[r11]
  ORR rps,rps,#DFLAG
  ;STRB rps,[r11]
  CPU_CYCLES 2
  ;MOV pc,lr
  ;LDMFD sp!,{r2,rps,r12,pc}
  R65C12NEXTOPCODE

|r65c12opcodeF9|
  ;SBC
  ;STMFD sp!,{r0-r12,lr}
  ;VALUEOFABSOLUTEYPLUS
  ADDRESSOFABSOLUTEYPLUS_M ;r0 ;2+ cycles
  READMEMM ;1 cycle
  ;LDR r12,=r6502_ps ;pointer to r6502_ps
  ;LDRB rps,[r12] ;load r6502_ps
  ANDS r1,rps,#DFLAG
  BNE r65c12opcodeF9_2
  ;digital
  R6502SBC ;1 cycle
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R65C12NEXTOPCODE
r65c12opcodeF9_2
  ;BCD
  ;STMFD sp!,{lr}
  STR lr,[sp, #-4]!
  BL r65c12saveregs
  BL sbcbcd ;1 cycle
  BL r65c12loadregs
  ;LDMFD sp!,{lr}
  CPU_CYCLES 3 ;+1
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R65C12NEXTOPCODE

|r65c12opcodeFA|
  ;PLX
  STACKPOP rx
  SETNFLAG rx
  SETZFLAG rx
  CPU_CYCLES 4
  ;MOV pc,lr
  R65C12NEXTOPCODE

|r65c12opcodeFB|
  ;STMFD sp!,{lr}
  R6502NOP
  ;LDMFD sp!,{pc}
  ;MOV pc,lr
  R65C12NEXTOPCODE

|r65c12opcodeFC|
  ;SKW
  ;STMFD sp!,{r0-r2,rpc,r11,lr}
  R6502SKW
  CPU_CYCLES 4
  ;LDMFD sp!,{r0-r2,rpc,r11,pc}
  ;MOV pc,lr
  R65C12NEXTOPCODE

|r65c12opcodeFD|
  ;SBC
  ;STMFD sp!,{r0-r12,lr}
  ;VALUEOFABSOLUTEXPLUS
  ADDRESSOFABSOLUTEXPLUS_M ;r0 ;2+ cycles
  READMEMM ;1 cycle
  ;LDR r12,=r6502_ps ;pointer to r6502_ps
  ;LDRB rps,[r12] ;load r6502_ps
  ANDS r1,rps,#DFLAG
  BNE r65c12opcodeFD_2
  ;digital
  R6502SBC ;1 cycle
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R65C12NEXTOPCODE
r65c12opcodeFD_2
  ;BCD
  ;STMFD sp!,{lr}
  STR lr,[sp, #-4]!
  BL r65c12saveregs
  BL sbcbcd ;1 cycle
  BL r65c12loadregs
  ;LDMFD sp!,{lr}
  LDR lr, [sp], #4
  CPU_CYCLES 3 ;+1
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R65C12NEXTOPCODE

|r65c12opcodeFE|
  ;STMFD sp!,{r0-r2,rps-r12,lr}
  ;VALUEOFABSOLUTE
  ADDRESSOFABSOLUTEX_M ;;; ;r0 ;3 cycles
  MOV r2,r0 ;store address
  READMEMM ;1 cycle
  R6502INC r0 ;2 cycles
  MOV r1,r0 ;value
  MOV r0,r2 ;address
  ;BL r6502writemem
  WRITEMEMM ;1 cycle
  CPU_CYCLES 4
  ;LDMFD sp!,{r0-r2,rps-r12,pc}
  ;MOV pc,lr
  R65C12NEXTOPCODE

|r65c12opcodeFF|
  ;ISB
  ;STMFD sp!,{r0-r12,lr}
  ADDRESSOFABSOLUTEX_M ;;; ;r0 ;3 cycles
  MOV r2,r0
  READMEMM ;1 cycle
  ADD r0,r0,#1
  AND r0,r0,#&FF
  MOV r1,r0 ;value
  MOV r0,r2 ;address
  WRITEMEMM ;1 cycle
  MOV r0,r1 ;r0=value
  ;SBC
  ;LDR r12,=r6502_ps ;pointer to r6502_ps
  ;LDRB rps,[r12] ;load r6502_ps
  ANDS r1,rps,#DFLAG
  BNE r65c12opcodeFF_2
  ;digital
  R6502SBC ;2 cycles
  CPU_CYCLES 4
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R65C12NEXTOPCODE
r65c12opcodeFF_2
  ;BCD
  ;STMFD sp!,{lr}
  STR lr,[sp, #-4]!
  BL r65c12saveregs
  BL sbcbcd ;2 cycles
  BL r65c12loadregs
  ;LDMFD sp!,{lr}
  LDR lr, [sp], #4
  CPU_CYCLES 5 ;+1
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R65C12NEXTOPCODE

;Data Area

;  AREA    |C$$data|, DATA

  END
