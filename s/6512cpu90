;>6512cpu90.s
;
; BeebIt - BBC Micro Model B Emulator
;
; (C) Copyright Michael J Foot, 1998-2005
;
; Email: <mjfoot@paradise.net.nz>
;
; r12=pointer to variable
; r11=pointer to variable
; r10=pointer to variable
; r9=PC
; r8=PS
; r7=Y
; r6=X
; r5=A

  GET h.6502cpus

  GET h.6502cpui

  GET h.SWINames


; Use the GET directive to include register definitions as if typed here

  GET h.RegNames

; Use the GET directive to include a list of SWI names as if typed here

  ;GET h.SWInames

; Area name C$$code advisable as wanted to link with C output

  AREA |C$$code|, CODE, READONLY

; Import global symbols

  IMPORT |memory|
  IMPORT |shadow|
  IMPORT |r6502_sp|
  IMPORT |r6502_pc|
  IMPORT |r6502_ps|
  IMPORT |r6502_a|
  IMPORT |r6502_x|
  IMPORT |r6502_y|
  ;IMPORT |r6502_n|
  ;IMPORT |r6502_v|
  ;IMPORT |r6502_b|
  ;IMPORT |r6502_d|
  ;IMPORT |r6502_i|
  ;IMPORT |r6502_z|
  ;IMPORT |r6502_c|
  IMPORT |r6502_cyclestogo|
  IMPORT |r6502read|
  IMPORT |r6502write|
  IMPORT |r6512loadregs|
  IMPORT |r6512saveregs|
  IMPORT |r6512opcodes|

  IMPORT |adcbcd|

; Export global symbols

  EXPORT |r6512opcode90|
  EXPORT |r6512opcode91|
  EXPORT |r6512opcode92|
  EXPORT |r6512opcode93|
  EXPORT |r6512opcode94|
  EXPORT |r6512opcode95|
  EXPORT |r6512opcode96|
  EXPORT |r6512opcode97|
  EXPORT |r6512opcode98|
  EXPORT |r6512opcode99|
  EXPORT |r6512opcode9A|
  EXPORT |r6512opcode9B|
  EXPORT |r6512opcode9C|
  EXPORT |r6512opcode9D|
  EXPORT |r6512opcode9E|
  EXPORT |r6512opcode9F|

|r6512opcode90|
  ;BCC
  ;if condition succeeds
  ;  if page boundary crossed
  ;    4 cycles
  ;  else
  ;    3 cycles
  ;else
  ;  2 cycles
  ;STMFD sp!,{r0-r12,lr}
  ;LDR r10,=r6502_ps
  ;LDRB rps,[r10] ;load ps
  ;LDR r11,=r6502_pc
  ;LDR rpc,[r11]
  ANDS r0,rps,#CFLAG
  ;if (!(r6502_ps & CFLAG))
  BEQ r6512opcode90_2
  ;else
  ADD rpc,rpc,#1 ;r6502_pc++
  ;ANDS r0,rpc,#&10000
  ;MOVNE r0,#&FF00
  ;ORRNE r0,r0,#&00FF
  ;ANDNE rpc,rpc,r0
  ;STR rpc,[r11] ;r6502_pc
  ;LDR r10,=r6502_cyclestogo
  ;LDR r4,[r10] ;r6502_cyclestogo
  ;SUB r4,r4,#2
  ;STR r4,[r10] ;r6502_cyclestogo
  CPU_CYCLES 2
  ;B r6512opcode90end
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

r6512opcode90_2
  ;LDR r12,=memory ;pointer to memory block
  VALUEOFIMMEDIATE_BP r0
  MOV r1,rpc,LSR#8 ;r1=(pc>>8)
  AND r1,r1,#&FF
  ANDS r2,r0,#&80 ;r2=(n & 0x80)
  MOVNE r3,#&100
  SUBNE r0,r3,r0 ;r0=(&100-r0)
  SUBNE rpc,rpc,r0 ;rpc=(rpc-r0)
  ADDEQ rpc,rpc,r0 ;rpc=(rpc+r0)

  ;ANDS r0,rpc,#&10000
  ;MOVNE r0,#&FF00
  ;ORRNE r0,r0,#&00FF
  ;ANDNE rpc,rpc,r0

  MOV r2,rpc,LSR#8 ;r2=(pc>>8)
  AND r2,r2,#&FF
  ;LDR r10,=r6502_cyclestogo
  ;LDR r3,[r10] ;r6502_cyclestogo
  CMP r1,r2 ;if (n1 != (r6502_pc >> 8))
  ;SUBNE r3,r3,#4 ;r3=(r3-4)
  ;SUBEQ r3,r3,#3 ;r3=(r3-3)
  SUBNE rcycles,rcycles,#4 ;r3=(r3-4)
  SUBEQ rcycles,rcycles,#3 ;r3=(r3-3)
  ;STR r3,[r10] ;r6502_cyclestogo
r6512opcode90end
  ;STR rpc,[r11] ;r6502_pc
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

;|r6512opcode91|
  ;STA
  ;STMFD sp!,{r0-r2,ry,rps-r12,lr}
;  ADDRESSOFPOSTINDEXEDY_STA ;r0 ;4 cycles
  ;R6502STA ;r1=r6502_a
;  MOV r1,ra ;1 cycle
;  WRITEMEM ;1 cycle
;  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r2,ry,rps-r12,pc}
  ;MOV pc,lr
;  R6512NEXTOPCODE

|r6512opcode91|
  ;STA
  ;STMFD sp!,{r0-r2,ry,rps-r12,lr}
  ;CMP rpc,#&3000
  ;LDRGE r12,=shadow
  ;ADDRESSOFPOSTINDEXEDY_STA ;r0 ;4 cycles

  ;OUT:r0 =address
  ADDRESSOFZEROPAGE_BP r0
  ;LDRB r2,[r12,r0] ;lo
  ;MOV r3,r0
  ;READMEM ;lo
  ;MOV r2,r0 ;lo
  ;MOV r0,r3

  LDRB r2,[r12,r0] ;lo
  ADD r1,r0,#1 ;r1 = (r0+1)
  AND r1,r1,#&FF ;r1 = (r1 and &FF)
  AND r0,r0,#&FF00
  ORR r0,r0,r1
  ;ADD r10,r12,r0
  ;LDRB r1,[r10] ;hi

  ;READMEM ;hi
  LDRB r1,[r12,r0] ;hi
  ADD r0,r2,r1,LSL#8 ;r0=lo+(hi<<8)

  ;MOV r1,r0
  ;LDRB r1,[r12,r0] ;hi

  ;ADD r0,r2,r0,LSL#8 ;r0=lo+(hi<<8)

  ;LDR r11,=r6502_y
  ;LDRB ry,[r11] ;r3=y
  ADD r0,r0,ry
  ANDS r3,r0,#&10000
  ;mask with #&FFFF
  MOVNE r3,#&FF00
  ORRNE r3,r3,#&00FF
  ANDNE r0,r0,r3
  CPU_CYCLES 4

  ;R6502STA ;r1=r6502_a
  MOV r1,ra ;1 cycle
  WRITEMEM ;1 cycle
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r2,ry,rps-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode92|
  ;NOP
  ;STMFD sp!,{lr}
  R6502NOP
  ;LDMFD sp!,{pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode93|
  ;SAX
  ;STMFD sp!,{lr}
  ADDRESSOFPOSTINDEXEDY_BP ;r0 ;3+ cycles
  AND r1,ra,rx ;1 cycle
  WRITEMEM ;1 cycle
  CPU_CYCLES 2
  ;LDMFD sp!,{pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode94|
  ;STMFD sp!,{r0-r2,rx,rps-r12,lr}
  ADDRESSOFZEROPAGEX_BP
  ;R6502STY ;r1=r6502_y
  ;ADD r12,r12,r0
  ;STRB r1,[r12]
  STRB ry,[r12,r0]
  CPU_CYCLES 4
  ;LDMFD sp!,{r0-r2,rx,rps-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode95|
  ;STMFD sp!,{r0-r2,rx,rps-r12,lr}
  ADDRESSOFZEROPAGEX_BP
  ;R6502STA ;r1=r6502_a
  ;ADD r12,r12,r0
  ;STRB r1,[r12]
  STRB ra,[r12,r0]
  CPU_CYCLES 4
  ;LDMFD sp!,{r0-r2,rx,rps-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode96|
  ;STMFD sp!,{r1-r2,ry,rps-r12,lr}
  ADDRESSOFZEROPAGEY_BP
  ;R6502STX ;r1=r6502_x
  ;ADD r12,r12,r0
  ;STRB r1,[r12]
  STRB rx,[r12,r0]
  CPU_CYCLES 4
  ;LDMFD sp!,{r1-r2,ry,rps-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode97|
  ;SAX
  ;STMFD sp!,{r0-r2,ra,rx,rpc-r12,lr}
  ADDRESSOFZEROPAGEY_BP
  ;LDR r11,=r6502_a
  ;LDRB ra,[r11]
  ;LDR r11,=r6502_x
  ;LDRB rx,[r11]
  AND r1,ra,rx
  STRB r1,[r12,r0]
  CPU_CYCLES 4
  ;LDMFD sp!,{r0-r2,ra,rx,rpc-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode98|
  ;TYA
  ;STMFD sp!,{r0-r2,rps,r12,lr}
  ;LDR r12,=r6502_y
  ;LDRB r0,[r12]
  ;LDR r12,=r6502_a
  ;STRB r0,[r12]
  MOVS ra,ry
  ;LDR r12,=r6502_ps
  ;LDRB rps,[r12] ;load ps
  SETZFLAG0 ;ra
  SETNFLAG ra
  ;STRB rps,[r12]
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r2,rps,r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode99|
  ;STA
  ;STMFD sp!,{r0-r2,ry,rps-r12,lr}
  ADDRESSOFABSOLUTEY_BP ;r0 ;3 cycles
  ;R6502STA ;r1=r6502_a
  MOV r1,ra ;1 cycle
  WRITEMEM ;1 cycle
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r2,ry,rps-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode9A|
  ;TXS
  ;STMFD sp!,{r0-r2,r12,lr}
  ;LDR r12,=r6502_x
  ;LDRB r0,[r12]
  ;LDR r12,=r6502_sp
  ;STRB r0,[r12]
  MOV rsp,rx
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r2,r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode9B|
  ;STMFD sp!,{lr}
  ;LDMFD sp!,{pc}
  R6502NOP
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode9C|
  ;ILL
  ;STMFD sp!,{lr}
  R6502NOP
  ;LDMFD sp!,{pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode9D|
  ;STA
  ;STMFD sp!,{r0-r2,rx,rps-r12,lr}
  ADDRESSOFABSOLUTEX_BP ;r0 ;3 cycles
  ;R6502STA ;r1=r6502_a
  MOV r1,ra ;1 cycle
  WRITEMEM ;1 cycle
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r2,rx,rps-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode9E|
  ;ILL
  ;STMFD sp!,{lr}
  R6502NOP
  ;LDMFD sp!,{pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode9F|
  ;STMFD sp!,{lr}
  R6502NOP
  ;LDMFD sp!,{pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

;Data Area

;  AREA    |C$$data|, DATA

  END
