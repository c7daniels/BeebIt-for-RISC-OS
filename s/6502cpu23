;>6502cpu23.s
;
; BeebIt - BBC Micro Model B Emulator
;
; Cycle-level CPU emulation
;
; (C) Copyright Crispian Daniels, 2024
;
; Email: <convertedgames@3insdale.me.uk>
;

  GET h.6502zmaps

  GET h.6502cmaps

  GET h.6502cpus

; Use the GET directive to include register definitions as if typed here

  GET h.RegNames

; Area name C$$code advisable as wanted to link with C output

  AREA |C$$code|, CODE, READONLY

; Import global symbols

; Export global symbols

  EXPORT |r6502latchabslobeforepushstep|
  EXPORT |r6502tojsrpushpchstep|
  EXPORT |r6502pushedtojsrpushpclstep|
  EXPORT |r6502pushedtoloadpchstep|
  EXPORT |r6502andimmediatestep|
  EXPORT |r6502andstep|
  EXPORT |r6502bitstep|
  EXPORT |r6502rolastep|
  EXPORT |r6502rolzpgstep|
  EXPORT |r6502rolstep|
  EXPORT |r6502rlazpgstep|
  EXPORT |r6502rlastep|
  EXPORT |r6502beforepullstep|
  EXPORT |r6502topullstep|
  EXPORT |r6502pulledpstep|
  EXPORT |r6502bmistep|
  EXPORT |r6502secstep|

|r6502latchabslobeforepushstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  ADD r1,r1,#2:SHL:16
  STR r1,[r0,#:INDEX:R6502_LAST_PC_CODE]
  LDR r1,[r0,#:INDEX:R6502_SP_CODE]
  LDRB r2,[r0,#:INDEX:R6502_M]
  STRB r2,[r0,#:INDEX:R6502_LATCH+2]
  R6502_JUMP_TO_STACK_READ_OP

|r6502tojsrpushpchstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_SP_CODE]
  LDRB r2,[r0,#:INDEX:R6502_LAST_PC_CODE+3]
  STRB r2,[r0,#:INDEX:R6502_M]
  R6502_JUMP_TO_STACK_WRITE_OP

|r6502pushedtojsrpushpclstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r2,[r0,#:INDEX:R6502_SP_CODE]
  SUB r1,r2,#1:SHL:24
  STR r1,[r0,#:INDEX:R6502_SP_CODE]
  LDRB r2,[r0,#:INDEX:R6502_LAST_PC_CODE+2]
  STRB r2,[r0,#:INDEX:R6502_M]
  R6502_JUMP_TO_STACK_WRITE_OP

|r6502pushedtoloadpchstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r2,[r0,#:INDEX:R6502_SP_CODE]
  SUB r2,r2,#1:SHL:24
  STR r2,[r0,#:INDEX:R6502_SP_CODE]
  LDR r1,[r0,#:INDEX:R6502_LAST_PC_CODE]
  R6502_JUMP_TO_READ_OP

|r6502andimmediatestep|
  LDR r1,[r0,#:INDEX:R6502_A_SHIFT]
  LDR r2,[r0,#:INDEX:R6502_M_SHIFT]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  ANDS r1,r1,r2
  BIC r3,r3,#NFLAG|ZFLAG
  STR r1,[r0,#:INDEX:R6502_A_SHIFT]
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  STRB r3,[r0,#:INDEX:R6502_PS]
  R6502_IMMEDIATE_NEXT_INSTRUCTION

|r6502andstep|
  LDR r1,[r0,#:INDEX:R6502_A_SHIFT]
  LDR r2,[r0,#:INDEX:R6502_M_SHIFT]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  ANDS r1,r1,r2
  BIC r3,r3,#NFLAG|ZFLAG
  STR r1,[r0,#:INDEX:R6502_A_SHIFT]
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  STRB r3,[r0,#:INDEX:R6502_PS]
  R6502_ADDRESSED_NEXT_INSTRUCTION

|r6502bitstep|
  LDRB r1,[r0,#:INDEX:R6502_A]
  LDRB r2,[r0,#:INDEX:R6502_M]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  TST r1,r2
  AND r2,r2,#NFLAG|VFLAG
  BIC r3,r3,#NFLAG|VFLAG|ZFLAG
  ORR r3,r3,r2
  ORREQ r3,r3,#ZFLAG
  STRB r3,[r0,#:INDEX:R6502_PS]
  R6502_ADDRESSED_NEXT_INSTRUCTION

|r6502rolastep|
  LDR r2,[r0,#:INDEX:R6502_A_SHIFT]
  LDR r3,[r0,#:INDEX:R6502_PS_SHIFT]
  AND r1,r3,#CFLAG:SHL:24
  ORRS r1,r1,r2,LSL #1
  BIC r3,r3,#(NFLAG|ZFLAG|CFLAG):SHL:24
  ORRMI r3,r3,#NFLAG:SHL:24
  ORREQ r3,r3,#ZFLAG:SHL:24
  ORRCS r3,r3,#CFLAG:SHL:24
  STR r1,[r0,#:INDEX:R6502_A_SHIFT]
  STR r3,[r0,#:INDEX:R6502_PS_SHIFT]
  R6502_IMPLIED_NEXT_INSTRUCTION

|r6502rolzpgstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r2,[r0,#:INDEX:R6502_M_SHIFT]
  LDR r3,[r0,#:INDEX:R6502_PS_SHIFT]
  AND r1,r3,#CFLAG:SHL:24
  ORRS r1,r1,r2,LSL #1
  BIC r3,r3,#(NFLAG|ZFLAG|CFLAG):SHL:24
  ORRMI r3,r3,#NFLAG:SHL:24
  ORREQ r3,r3,#ZFLAG:SHL:24
  ORRCS r3,r3,#CFLAG:SHL:24
  STR r1,[r0,#:INDEX:R6502_M_SHIFT]
  STR r3,[r0,#:INDEX:R6502_PS_SHIFT]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  R6502_JUMP_TO_ZPG_WRITE_OP

|r6502rolstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r2,[r0,#:INDEX:R6502_M_SHIFT]
  LDR r3,[r0,#:INDEX:R6502_PS_SHIFT]
  AND r1,r3,#CFLAG:SHL:24
  ORRS r1,r1,r2,LSL #1
  BIC r3,r3,#(NFLAG|ZFLAG|CFLAG):SHL:24
  ORRMI r3,r3,#NFLAG:SHL:24
  ORREQ r3,r3,#ZFLAG:SHL:24
  ORRCS r3,r3,#CFLAG:SHL:24
  STR r1,[r0,#:INDEX:R6502_M_SHIFT]
  STR r3,[r0,#:INDEX:R6502_PS_SHIFT]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  R6502_JUMP_TO_WRITE_OP

|r6502rlazpgstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r2,[r0,#:INDEX:R6502_M_SHIFT]
  LDR r3,[r0,#:INDEX:R6502_PS_SHIFT]
  AND r1,r3,#CFLAG:SHL:24
  ORRS r1,r1,r2,LSL #1
  BIC r3,r3,#(NFLAG|ZFLAG|CFLAG):SHL:24
  LDR r2,[r0,#:INDEX:R6502_A_SHIFT]
  STR r1,[r0,#:INDEX:R6502_M_SHIFT]
  ORRCS r3,r3,#CFLAG:SHL:24
  ANDS r1,r1,r2
  ORRMI r3,r3,#NFLAG:SHL:24
  ORREQ r3,r3,#ZFLAG:SHL:24
  STR r1,[r0,#:INDEX:R6502_A_SHIFT]
  STR r3,[r0,#:INDEX:R6502_PS_SHIFT]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  R6502_JUMP_TO_ZPG_WRITE_OP

|r6502rlastep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r2,[r0,#:INDEX:R6502_M_SHIFT]
  LDR r3,[r0,#:INDEX:R6502_PS_SHIFT]
  AND r1,r3,#CFLAG:SHL:24
  ORRS r1,r1,r2,LSL #1
  BIC r3,r3,#(NFLAG|ZFLAG|CFLAG):SHL:24
  LDR r2,[r0,#:INDEX:R6502_A_SHIFT]
  STR r1,[r0,#:INDEX:R6502_M_SHIFT]
  ORRCS r3,r3,#CFLAG:SHL:24
  ANDS r1,r1,r2
  ORRMI r3,r3,#NFLAG:SHL:24
  ORREQ r3,r3,#ZFLAG:SHL:24
  STR r1,[r0,#:INDEX:R6502_A_SHIFT]
  STR r3,[r0,#:INDEX:R6502_PS_SHIFT]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  R6502_JUMP_TO_WRITE_OP

|r6502beforepullstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_SP_CODE]
  R6502_JUMP_TO_STACK_READ_OP

|r6502topullstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r2,[r0,#:INDEX:R6502_SP_CODE]
  ADD r1,r2,#1:SHL:24
  STR r1,[r0,#:INDEX:R6502_SP_CODE]
  R6502_JUMP_TO_STACK_READ_OP

|r6502pulledpstep|
  LDRB r1,[r0,#:INDEX:R6502_PS]
  LDRB r2,[r0,#:INDEX:R6502_M]
  AND r1,r1,#IFLAG
  ORR r2,r2,#UFLAG|BFLAG
  BICS r1,r1,r2
  STRB r2,[r0,#:INDEX:R6502_PS]
  LDR r3,[r0,#:INDEX:R6502_TRANSITION1ACTION]
  LDR r1,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  ADD r1,r1,#1:SHL:16
  MOVEQ pc,r3
  LDR r2,[r0,#:INDEX:R6502_FETCHACTION]
  CMP r2,r3
  LDRNE r2,[r0,#:INDEX:R6502_YIELDACTION]
  CMPNE r2,r3
  MOVNE pc,r3
  LDR r3,[r0,#:INDEX:R6502_FETCHTHENTESTIRQACTION]
  STR r3,[r0,#:INDEX:R6502_TRANSITION1ACTION]
  LDR r2,[r0,#:INDEX:R6502_LBREAK]
  TST r2,r2
  LDRNE r3,[r0,#:INDEX:R6502_RESETACTION]
  STRNE r3,[r0,#:INDEX:R6502_TRANSITION1ACTION]
  MOV pc,r3

|r6502bmistep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  LDRB r2,[r0,#:INDEX:R6502_PS]
  TST r2,#NFLAG
  ADD r1,r1,#2:SHL:16
  LDREQ pc,[r0,#:INDEX:R6502_TRANSITION1ACTION]
  LDRB r3,[r0,#:INDEX:R6502_M]
  STRB r3,[r0,#:INDEX:R6502_LATCH+2]
  R6502_JUMP_TO_READ_OP

|r6502secstep|
  LDRB r2,[r0,#:INDEX:R6502_PS]
  ORR r2,r2,#CFLAG
  STRB r2,[r0,#:INDEX:R6502_PS]
  R6502_IMPLIED_NEXT_INSTRUCTION

;Data Area

;  AREA    |C$$data|, DATA

  END
