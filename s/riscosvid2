;>riscos.s
;
; BeebIt - BBC Micro Model B Emulator
;
; (C) Copyright Michael J Foot, 1998-2003
;
; Email: <mjfoot@paradise.net.nz>
;
; Use the GET directive to include register definitions as if typed here

  GET     h.RegNames

; Use the GET directive to include a list of SWI names as if typed here

  GET     h.SWInames

; Area name C$$code advisable as wanted to link with C output

  AREA    |C$$code|, CODE, READONLY

; Import global symbols
  IMPORT |memory|
  IMPORT |shadow|
  IMPORT |beebit_acccon|
  IMPORT |beebit_vdusel|
  IMPORT |host_screenwidth|
  IMPORT |videoula_palette|
  IMPORT |video_address|
  IMPORT |video_baseaddress|

  EXPORT |mode4plot4|
  EXPORT |mode4plot8|
  EXPORT |mode4plot8x2|
  EXPORT |mode5plot4|
  EXPORT |mode5plot8|
  EXPORT |mode5plot8x2|
  EXPORT |mode8plot4|
  EXPORT |mode8plot8|
  EXPORT |mode8plot8x2|

;
;RISC OS
;
|mode4plot4|
  ;mode4plot4(nscreen+nx,nxend-nx);
  ;mode 4 plot to 4bpp mode
  ;r0 = address offset in riscos memory (screen)
  ;r1 = number of bytes to plot
  STMFD sp!,{v1-v6,sl,fp,lr} ;a1-a4,ip don't need to be preserved for APCS
  LDR r12,=beebit_acccon
  LDR r2,[r12] ;acccon
  LDR r12,=beebit_vdusel
  LDR r3,[r12] ;vdusel
  TST r2,r3 ;test vdusel set
  LDREQ r12,=memory ;bbc memory space
  LDRNE r12,=shadow ;shadow memory space

  LDR r11,=videoula_palette ;videoula palette lookup
  LDR r10,=video_address
  ;LDR r8,[r10,#2] ;current address in bbc memory (into B3,B2)
  LDR r8,[r10]
  MOV r8,r8,LSL #16 ;current address in bbc memory (into B3,B2)
  ADD r7,r12,r8,LSR #16 ;absolute address in bbc memory

  LDRB r3,[r11] ;get palette value for '0' pixel
  LDRB r4,[r11,#1] ;get palette value for '1' pixel
  ORR r3,r3,r3,LSL #4 ;we're making double pixels
  ORR r4,r4,r4,LSL #4
  SUB r4,r4,r3        ;change to difference
  ORR r3,r3,r3,LSL #8 ;base value for 2 bbc pixels
  ORR r3,r3,r3,LSL #16 ;base value for 4 bbc pixels
mode4plot4_1
  LDRB r6,[r7],#8 ;read byte from bbc memory (n)

  ;&02 &01
  MOVS r14,r6,LSL #25  ;C =b7, N =b6
  MOV r5,r3            ;base value, two zero pixels
  ADDCS r5,r5,r4       ;add in difference, change pixel to one
  ADDMI r5,r5,r4,LSL #8 ;again add in diff if needed.

  ;&08 &04
  MOVS r14,r6,LSL #27  ;C =b5, N =b4
  ADDCS r5,r5,r4,LSL #16
  ADDMI r5,r5,r4,LSL #24

  STR r5,[r0],#4 ;*cscreen = r5
;  ADD r0,r0,#4

  ;&20 &10
  MOVS r14,r6,LSL #29  ;C =b3, N =b2
  MOV r5,r3
  ADDCS r5,r5,r4
  ADDMI r5,r5,r4,LSL #8

  ;&80 &40
  MOVS r14,r6,LSL #31  ;C =b1, N =b0
  ADDCS r5,r5,r4,LSL #16
  ADDMI r5,r5,r4,LSL #24

  STR r5,[r0],#4 ;*cscreen = r5
;  ADD r0,r0,#4

  SUBS r1,r1,#8 ;decrement count by 4 bytes
  ;CMP r1,#0
  BLE mode4plot4_end ;be nice to SA
;  LDMLEFD sp!,{r0-r12,pc} ;if <= 0 then exit

  ADDS r8,r8,#&80000 ;video_address += (8<<16)

;  CMP r8,#&8000 ;if video_address < 0x8000
;  ADDLT r7,r7,#8 ;add 8 to bbc memory location
  BPL mode4plot4_1 ;loop
;  SUB r7,r7,#8 ;we've over incremented r7

;  MOV r2,#&8000 ;else
;  SUB r2,r2,#1 ;to get &7FFF
;  AND r8,r8,r2 ;video_address &= 0x7FFF
  BIC r8,r8,#&80000000
  LDR r9,=video_baseaddress
  LDR r14,[r9] ;get bbc screen base address
  ADD r8,r8,r14,LSL #16 ;video_address += video_baseaddress
  ADD r7,r12,r8,LSR #16 ;absolute address in bbc memory
  B mode4plot4_1
mode4plot4_end
  STR r8,[r10] ;store video address
  LDMFD sp!,{v1-v6,sl,fp,pc} ;a1-a4,ip don't need to be preserved for APCS

|mode4plot8|
  ;mode4plot8(nscreen+nx,nxend-nx);
  ;mode 4 plot to 8bpp mode
  ;r0 = address offset in riscos memory (screen)
  ;r1 = number of bytes to plot
  STMFD sp!,{v1-v6,sl,fp,lr} ;a1-a4,ip don't need to be preserved for APCS
  LDR r12,=beebit_acccon
  LDR r2,[r12] ;acccon
  LDR r12,=beebit_vdusel
  LDR r3,[r12] ;vdusel
  TST r2,r3 ;test vdusel set
  LDREQ r12,=memory ;bbc memory space
  LDRNE r12,=shadow ;shadow memory space

  LDR r11,=videoula_palette ;videoula palette lookup
  LDR r10,=video_address
  ;LDR r8,[r10,#2] ;current address in bbc memory (into B3,B2)
  LDR r8,[r10]
  MOV r8,r8,LSL #16 ;current address in bbc memory (into B3,B2)
  ADD r7,r12,r8,LSR #16 ;absolute address in bbc memory

  LDRB r3,[r11] ;get palette value for '0' pixel
  LDRB r4,[r11,#1] ;get palette value for '1' pixel
  ORR r3,r3,r3,LSL #8 ;we're making double pixels
  ORR r4,r4,r4,LSL #8
  SUB r4,r4,r3        ;change to difference
  ORR r3,r3,r3,LSL #16 ;base value for 2 bbc pixels

  ;AABB 2 pixels 4 bytes

mode4plot8_1
  LDRB r6,[r7],#8 ;read byte from bbc memory (n)

  ;&02 &01
  MOVS r14,r6,LSL #25  ;C =b7, N =b6
  MOV r5,r3            ;base value, two zero pixels
  ADDCS r5,r5,r4       ;add in difference, change pixel to one
  ADDMI r5,r5,r4,LSL #16 ;again add in diff if needed.

  STR r5,[r0],#4 ;*cscreen = r5
;  ADD r0,r0,#4

  ;&08 &04
  MOVS r14,r6,LSL #27  ;C =b5, N =b4
  MOV r5,r3            ;base value, two zero pixels
  ADDCS r5,r5,r4       ;add in difference, change pixel to one
  ADDMI r5,r5,r4,LSL #16 ;again add in diff if needed.

  STR r5,[r0],#4 ;*cscreen = r5
;  ADD r0,r0,#4

  ;&20 &10
  MOVS r14,r6,LSL #29  ;C =b3, N =b2
  MOV r5,r3            ;base value, two zero pixels
  ADDCS r5,r5,r4       ;add in difference, change pixel to one
  ADDMI r5,r5,r4,LSL #16 ;again add in diff if needed.

  STR r5,[r0],#4 ;*cscreen = r5
;  ADD r0,r0,#4

  ;&80 &40
  MOVS r14,r6,LSL #31  ;C =b1, N =b0
  MOV r5,r3            ;base value, two zero pixels
  ADDCS r5,r5,r4       ;add in difference, change pixel to one
  ADDMI r5,r5,r4,LSL #16 ;again add in diff if needed.

  STR r5,[r0],#4 ;*cscreen = r5
;  ADD r0,r0,#4

  SUBS r1,r1,#16 ;decrement count by 16 bytes
  ;CMP r1,#0
  BLE mode4plot8_end ;be nice to SA

  ADDS r8,r8,#&80000 ;video_address += (8<<16)

;  CMP r8,#&8000 ;if video_address < 0x8000
;  ADDLT r7,r7,#8 ;add 8 to bbc memory location
  BPL mode4plot8_1 ;loop
;  SUB r7,r7,#&8 ;we've over incremented r7

;  MOV r2,#&8000 ;else
;  SUB r2,r2,#1 ;to get &7FFF
;  AND r8,r8,r2 ;video_address &= 0x7FFF
  BIC r8,r8,#&80000000
  LDR r9,=video_baseaddress
  LDR r14,[r9] ;get bbc screen base address
  ADD r8,r8,r14,LSL #16 ;video_address += video_baseaddress
  ADD r7,r12,r8,LSR #16 ;absolute address in bbc memory
  B mode4plot8_1
mode4plot8_end
  STR r8,[r10] ;store video address
  LDMFD sp!,{v1-v6,sl,fp,pc} ;a1-a4,ip don't need to be preserved for APCS

|mode4plot8x2|
  ;mode4plot8x2(nscreen+nx,nxend-nx);
  ;mode 4 plot to 8bpp mode
  ;r0 = address offset in riscos memory (screen)
  ;r1 = number of bytes to plot
  STMFD sp!,{v1-v6,sl,fp,lr} ;a1-a4,ip don't need to be preserved for APCS
  LDR r12,=beebit_acccon
  LDR r2,[r12] ;acccon
  LDR r12,=beebit_vdusel
  LDR r3,[r12] ;vdusel
  TST r2,r3 ;test vdusel set
  LDREQ r12,=memory ;bbc memory space
  LDRNE r12,=shadow ;shadow memory space

  LDR r11,=videoula_palette ;videoula palette lookup
  LDR r10,=video_address
  ;LDR r8,[r10,#2] ;current address in bbc memory (into B3,B2)
  LDR r8,[r10]
  MOV r8,r8,LSL #16 ;current address in bbc memory (into B3,B2)
  ADD r7,r12,r8,LSR #16 ;absolute address in bbc memory

  LDRB r3,[r11] ;get palette value for '0' pixel
  LDRB r4,[r11,#1] ;get palette value for '1' pixel
  ORR r3,r3,r3,LSL #8 ;we're making double pixels
  ORR r3,r3,r3,LSL #16 ;we're making double pixels
  ;ORR r3,r3,r3,LSL #24 ;we're making double pixels
  ORR r4,r4,r4,LSL #8
  ORR r4,r4,r4,LSL #16
  ;ORR r4,r4,r4,LSL #24

  ;8888 1 pixel, 4 bytes

  ;ORR r3,r3,r3,LSL #8 ;we're making double pixels
  ;ORR r4,r4,r4,LSL #8
  SUB r4,r4,r3        ;change to difference
  ;ORR r3,r3,r3,LSL #8 ;base value for 2 bbc pixels
  ;ORR r3,r3,r3,LSL #16 ;base value for 4 bbc pixels
  ORR r3,r3,r3,LSL #16 ;base value for 2 bbc pixels
  ;1 bbc pixel

  ;r9 = second line address
  LDR r9,=host_screenwidth
  LDR r9,[r9] ;host_screenwidth
  ADD r9,r9,r0
mode4plot8x2_1
  LDRB r6,[r7],#8 ;read byte from bbc memory (n)

  ;&02 &01
  ;MOVS r14,r6,LSL #25  ;C =b7, N =b6
  ;MOV r5,r3            ;base value, two zero pixels
  ;ADDCS r5,r5,r4       ;add in difference, change pixel to one
  ;ADDMI r5,r5,r4,LSL #16 ;again add in diff if needed.

  ;&02 &01
  MOVS r14,r6,LSL #25  ;C =b7, N =b6
  MOV r5,r3            ;base value, two zero pixels
  ADDCS r5,r5,r4       ;add in difference, change pixel to one

  STR r5,[r0],#4 ;*cscreen = r5
  STR r5,[r9],#4 ;*cscreen = r5 (line 2)

  MOVS r14,r6,LSL #25  ;C =b7, N =b6
  MOV r5,r3            ;base value, two zero pixels
  ADDMI r5,r5,r4 ;,LSL #16 ;again add in diff if needed.

  STR r5,[r0],#4 ;*cscreen = r5
  STR r5,[r9],#4 ;*cscreen = r5 (line 2)
;  ADD r0,r0,#4

;  MOVS r14,r6,LSL #25  ;C =b7, N =b6
;  MOV r5,r3            ;base value, two zero pixels
;  ADDCS r5,r5,r4       ;add in difference, change pixel to one
;  ADDMI r5,r5,r4,LSL #16 ;again add in diff if needed.

;  STR r5,[r0],#4 ;*cscreen = r5
;  STR r5,[r9],#4 ;*cscreen = r5

  ;&08 &04
  ;MOVS r14,r6,LSL #27  ;C =b5, N =b4
  ;MOV r5,r3            ;base value, two zero pixels
  ;ADDCS r5,r5,r4       ;add in difference, change pixel to one
  ;ADDMI r5,r5,r4,LSL #16 ;again add in diff if needed.

  ;&08 &04
  MOVS r14,r6,LSL #27  ;C =b5, N =b4
  MOV r5,r3            ;base value, two zero pixels
  ADDCS r5,r5,r4       ;add in difference, change pixel to one

  STR r5,[r0],#4 ;*cscreen = r5
  STR r5,[r9],#4 ;*cscreen = r5 (line 2)

  MOVS r14,r6,LSL #27  ;C =b5, N =b4
  MOV r5,r3            ;base value, two zero pixels
  ADDMI r5,r5,r4 ;,LSL #16 ;again add in diff if needed.

  STR r5,[r0],#4 ;*cscreen = r5
  STR r5,[r9],#4 ;*cscreen = r5
;  ADD r0,r0,#4
;  MOVS r14,r6,LSL #27  ;C =b5, N =b4
;  MOV r5,r3            ;base value, two zero pixels
;  ADDCS r5,r5,r4       ;add in difference, change pixel to one
;  ADDMI r5,r5,r4,LSL #16 ;again add in diff if needed.

;  STR r5,[r0],#4 ;*cscreen = r5
;  STR r5,[r9],#4 ;*cscreen = r5

  ;&20 &10
  ;MOVS r14,r6,LSL #29  ;C =b3, N =b2
  ;MOV r5,r3            ;base value, two zero pixels
  ;ADDCS r5,r5,r4       ;add in difference, change pixel to one
  ;ADDMI r5,r5,r4,LSL #16 ;again add in diff if needed.

  ;&20 &10
  MOVS r14,r6,LSL #29  ;C =b3, N =b2
  MOV r5,r3            ;base value, two zero pixels
  ADDCS r5,r5,r4       ;add in difference, change pixel to one

  STR r5,[r0],#4 ;*cscreen = r5
  STR r5,[r9],#4 ;*cscreen = r5

  MOVS r14,r6,LSL #29  ;C =b3, N =b2
  MOV r5,r3            ;base value, two zero pixels
  ADDMI r5,r5,r4 ;,LSL #16 ;again add in diff if needed.

  STR r5,[r0],#4 ;*cscreen = r5
  STR r5,[r9],#4 ;*cscreen = r5

;  ADD r0,r0,#4
;  MOVS r14,r6,LSL #29  ;C =b3, N =b2
;  MOV r5,r3            ;base value, two zero pixels
;  ADDCS r5,r5,r4       ;add in difference, change pixel to one
;  ADDMI r5,r5,r4,LSL #16 ;again add in diff if needed.

;  STR r5,[r0],#4 ;*cscreen = r5
;  STR r5,[r9],#4 ;*cscreen = r5

  ;&80 &40
  ;MOVS r14,r6,LSL #31  ;C =b1, N =b0
  ;MOV r5,r3            ;base value, two zero pixels
  ;ADDCS r5,r5,r4       ;add in difference, change pixel to one
  ;ADDMI r5,r5,r4,LSL #16 ;again add in diff if needed.

  ;&80 &40
  MOVS r14,r6,LSL #31  ;C =b1, N =b0
  MOV r5,r3            ;base value, two zero pixels
  ADDCS r5,r5,r4       ;add in difference, change pixel to one

  STR r5,[r0],#4 ;*cscreen = r5
  STR r5,[r9],#4 ;*cscreen = r5

  MOVS r14,r6,LSL #31  ;C =b1, N =b0
  MOV r5,r3            ;base value, two zero pixels
  ADDMI r5,r5,r4 ;,LSL #16 ;again add in diff if needed.

  STR r5,[r0],#4 ;*cscreen = r5
  STR r5,[r9],#4 ;*cscreen = r5

;  ADD r0,r0,#4
;  MOVS r14,r6,LSL #31  ;C =b1, N =b0
;  MOV r5,r3            ;base value, two zero pixels
;  ADDCS r5,r5,r4       ;add in difference, change pixel to one
;  ADDMI r5,r5,r4,LSL #16 ;again add in diff if needed.

;  STR r5,[r0],#4 ;*cscreen = r5
;  STR r5,[r9],#4 ;*cscreen = r5

  SUBS r1,r1,#16 ;decrement count by 16 bytes
  ;CMP r1,#0
  BLE mode4plot8x2_end ;be nice to SA

  ADDS r8,r8,#&80000 ;video_address += (8<<16)

;  CMP r8,#&8000 ;if video_address < 0x8000
;  ADDLT r7,r7,#8 ;add 8 to bbc memory location
  BPL mode4plot8x2_1 ;loop
;  SUB r7,r7,#&8 ;we've over incremented r7

;  MOV r2,#&8000 ;else
;  SUB r2,r2,#1 ;to get &7FFF
;  AND r8,r8,r2 ;video_address &= 0x7FFF
  BIC r8,r8,#&80000000
  LDR r11,=video_baseaddress
  LDR r14,[r11] ;get bbc screen base address
  ADD r8,r8,r14,LSL #16 ;video_address += video_baseaddress
  ADD r7,r12,r8,LSR #16 ;absolute address in bbc memory
  B mode4plot8x2_1
mode4plot8x2_end
  STR r8,[r10] ;store video address
  LDMFD sp!,{v1-v6,sl,fp,pc} ;a1-a4,ip don't need to be preserved for APCS

|mode5plot4|
  ;mode5plot4(nscreen+nx,nxend-nx);
  ;mode 5 plot to 4bpp mode
  ;r0 = address offset in riscos memory (screen)
  ;r1 = number of bytes to plot
  STMFD sp!,{v1-v6,sl,fp,lr} ;a1-a4,ip don't need to be preserved for APCS
  LDR r12,=beebit_acccon
  LDR r2,[r12] ;acccon
  LDR r12,=beebit_vdusel
  LDR r3,[r12] ;vdusel
  TST r2,r3 ;test vdusel set
  LDREQ r12,=memory ;bbc memory space
  LDRNE r12,=shadow ;shadow memory space

  LDR r11,=videoula_palette ;videoula palette lookup
  LDR r10,=video_address
;  LDR r9,=mode5values
  ;LDR r8,[r10,#2] ;current address in bbc memory (into B3,B2)
  LDR r8,[r10]
  MOV r8,r8,LSL #16 ;current address in bbc memory (into B3,B2)
  ADD r7,r12,r8,LSR #16 ;absolute address in bbc memory

  MOV r3,#&88000000 ;convienient AND mask
mode5plot4_1
  LDRB r6,[r7],#8 ;read byte from bbc memory (n)

  ;&02 &01
  AND r2,r3,r6,LSL #24   ;b000c000 (in HB)
  ORR r2,r2,r2,LSL #3    ;bc00c000

  LDRB r4,[r11,r2,LSR #30] ;r4 = videoula_palette[r2]
  ADD r2,r4,r4,LSL #4 ;r5 = r4 + (r4<<4) double pixel
  ADD r5,r2,r2,LSL #8 ;quad pixel

  ;&08 &04
  AND r2,r3,r6,LSL #25
  ORR r2,r2,r2,LSL #3

  LDRB r4,[r11,r2,LSR #30] ;r4 = videoula_palette[r2]

  ADD r2,r4,r4,LSL #4 ;double pixel
  ADD r5,r5,r2,LSL #16 ;add in first double pixel
  ADD r5,r5,r2,LSL #24 ;add in again giving quad pixel

  STR r5,[r0],#4 ;*cscreen = r5
;  ADD r0,r0,#4

  ;&20 &10
  AND r2,r3,r6,LSL #26
  ORR r2,r2,r2,LSL #3

  LDRB r4,[r11,r2,LSR #30] ;r4 = videoula_palette[r2]
  ADD r2,r4,r4,LSL #4 ;double pixel
  ADD r5,r2,r2,LSL #8 ;quad pixel

  ;&80 &40
  AND r2,r3,r6,LSL #27
  ORR r2,r2,r2,LSL #3

  LDRB r4,[r11,r2,LSR #30] ;r4 = videoula_palette[r2]
  ADD r2,r4,r4,LSL #4 ;double pixel
  ADD r5,r5,r2,LSL #16 ;add in first double pixel
  ADD r5,r5,r2,LSL #24 ;add in again giving quad pixel

  STR r5,[r0],#4 ;*cscreen = r5
;  ADD r0,r0,#4

  SUBS r1,r1,#8 ;decrement count by 8 bytes
  BLE mode5plot4_end ;be nice to SA

  ADDS r8,r8,#&80000 ;video_address += (8<<16)

;  CMP r8,#&8000 ;if video_address < 0x8000
;  ADDLT r7,r7,#8 ;add 8 to bbc memory location
  BPL mode5plot4_1 ;loop
;  SUB r7,r7,#8 ;we've over incremented r7

;  MOV r2,#&8000 ;else
;  SUB r2,r2,#1 ;to get &7FFF
;  AND r8,r8,r2 ;video_address &= 0x7FFF
  BIC r8,r8,#&80000000
  LDR r14,=video_baseaddress
  LDR r14,[r14] ;get bbc screen base address
  ADD r8,r8,r14,LSL #16 ;video_address += video_baseaddress
  ADD r7,r12,r8,LSR #16 ;absolute address in bbc memory
  B mode5plot4_1
mode5plot4_end
  STR r8,[r10] ;store video address
  LDMFD sp!,{v1-v6,sl,fp,pc} ;a1-a4,ip don't need to be preserved for APCS

|mode5plot8|
  ;mode5plot8(nscreen+nx,nxend-nx);
  ;mode 5 plot to 8bpp mode
  ;r0 = address offset in riscos memory (screen)
  ;r1 = number of bytes to plot
  STMFD sp!,{v1-v6,sl,fp,lr} ;a1-a4,ip don't need to be preserved for APCS
  LDR r12,=beebit_acccon
  LDR r2,[r12] ;acccon
  LDR r12,=beebit_vdusel
  LDR r3,[r12] ;vdusel
  TST r2,r3 ;test vdusel set
  LDREQ r12,=memory ;bbc memory space
  LDRNE r12,=shadow ;shadow memory space

  LDR r11,=videoula_palette ;videoula palette lookup
  LDR r10,=video_address
;  LDR r9,=mode5values
  ;LDR r8,[r10,#2] ;current address in bbc memory (into B3,B2)
  LDR r8,[r10]
  MOV r8,r8,LSL #16 ;current address in bbc memory (into B3,B2)
  ADD r7,r12,r8,LSR #16 ;absolute address in bbc memory

  MOV r3,#&88000000 ;convienient AND mask
mode5plot8_1
  LDRB r6,[r7],#8 ;read byte from bbc memory (n)

  ;&02 &01
  AND r2,r3,r6,LSL #24   ;b000c000 (in HB)
  ORR r2,r2,r2,LSL #3    ;bc00c000

  LDRB r4,[r11,r2,LSR #30] ;r4 = videoula_palette[r2]
  ADD r2,r4,r4,LSL #8 ;r5 = r4 + (r4<<4) double pixel
  ADD r5,r2,r2,LSL #16 ;quad pixel

  STR r5,[r0],#4 ;*cscreen = r5
;  ADD r0,r0,#4

  ;&08 &04
  AND r2,r3,r6,LSL #25
  ORR r2,r2,r2,LSL #3

  LDRB r4,[r11,r2,LSR #30] ;r4 = videoula_palette[r2]

  ADD r2,r4,r4,LSL #8 ;r5 = r4 + (r4<<4) double pixel
  ADD r5,r2,r2,LSL #16 ;quad pixel

  STR r5,[r0],#4 ;*cscreen = r5
;  ADD r0,r0,#4

  ;&20 &10
  AND r2,r3,r6,LSL #26
  ORR r2,r2,r2,LSL #3

  LDRB r4,[r11,r2,LSR #30] ;r4 = videoula_palette[r2]
  ADD r2,r4,r4,LSL #8 ;r5 = r4 + (r4<<4) double pixel
  ADD r5,r2,r2,LSL #16 ;quad pixel

  STR r5,[r0],#4 ;*cscreen = r5
;  ADD r0,r0,#4

  ;&80 &40
  AND r2,r3,r6,LSL #27
  ORR r2,r2,r2,LSL #3

  LDRB r4,[r11,r2,LSR #30] ;r4 = videoula_palette[r2]
  ADD r2,r4,r4,LSL #8 ;r5 = r4 + (r4<<4) double pixel
  ADD r5,r2,r2,LSL #16 ;quad pixel

  STR r5,[r0],#4 ;*cscreen = r5
;  ADD r0,r0,#4

  SUBS r1,r1,#16 ;decrement count by 16 bytes
  BLE mode5plot8_end ;be nice to SA

  ADDS r8,r8,#&80000 ;video_address += (8<<16)

;  CMP r8,#&8000 ;if video_address < 0x8000
;  ADDLT r7,r7,#8 ;add 8 to bbc memory location
  BPL mode5plot8_1 ;loop
;  SUB r7,r7,#8 ;we've over incremented r7

;  MOV r2,#&8000 ;else
;  SUB r2,r2,#1 ;to get &7FFF
;  AND r8,r8,r2 ;video_address &= 0x7FFF
  BIC r8,r8,#&80000000
  LDR r14,=video_baseaddress
  LDR r14,[r14] ;get bbc screen base address
  ADD r8,r8,r14,LSL #16 ;video_address += video_baseaddress
  ADD r7,r12,r8,LSR #16 ;absolute address in bbc memory
  B mode5plot8_1
mode5plot8_end
  STR r8,[r10] ;store video address
  LDMFD sp!,{v1-v6,sl,fp,pc} ;a1-a4,ip don't need to be preserved for APCS

|mode5plot8x2|
  ;mode5plot8x2(nscreen+nx,nxend-nx);
  ;mode 5 plot to 8bpp mode
  ;r0 = address offset in riscos memory (screen)
  ;r1 = number of bytes to plot
  STMFD sp!,{v1-v6,sl,fp,lr} ;a1-a4,ip don't need to be preserved for APCS
  LDR r12,=beebit_acccon
  LDR r2,[r12] ;acccon
  LDR r12,=beebit_vdusel
  LDR r3,[r12] ;vdusel
  TST r2,r3 ;test vdusel set
  LDREQ r12,=memory ;bbc memory space
  LDRNE r12,=shadow ;shadow memory space

  LDR r11,=videoula_palette ;videoula palette lookup
  LDR r10,=video_address
;  LDR r9,=mode5values
  ;LDR r8,[r10,#2] ;current address in bbc memory (into B3,B2)
  LDR r8,[r10]
  MOV r8,r8,LSL #16 ;current address in bbc memory (into B3,B2)
  ADD r7,r12,r8,LSR #16 ;absolute address in bbc memory

  MOV r3,#&88000000 ;convienient AND mask

  ;r9 = second line address
  LDR r9,=host_screenwidth
  LDR r9,[r9] ;host_screenwidth
  ADD r9,r9,r0
mode5plot8x2_1
  LDRB r6,[r7],#8 ;read byte from bbc memory (n)

  ;&02 &01
  AND r2,r3,r6,LSL #24   ;b000c000 (in HB)
  ORR r2,r2,r2,LSL #3    ;bc00c000

  LDRB r4,[r11,r2,LSR #30] ;r4 = videoula_palette[r2]
  ADD r2,r4,r4,LSL #8 ;r5 = r4 + (r4<<4) double pixel
  ADD r5,r2,r2,LSL #16 ;quad pixel

  STR r5,[r0],#4 ;*cscreen = r5
  STR r5,[r0],#4 ;*cscreen = r5
  STR r5,[r9],#4 ;*cscreen = r5
  STR r5,[r9],#4 ;*cscreen = r5
;  ADD r0,r0,#4

  ;&08 &04
  AND r2,r3,r6,LSL #25
  ORR r2,r2,r2,LSL #3

  LDRB r4,[r11,r2,LSR #30] ;r4 = videoula_palette[r2]

  ADD r2,r4,r4,LSL #8 ;r5 = r4 + (r4<<4) double pixel
  ADD r5,r2,r2,LSL #16 ;quad pixel

  STR r5,[r0],#4 ;*cscreen = r5
  STR r5,[r0],#4 ;*cscreen = r5
  STR r5,[r9],#4 ;*cscreen = r5
  STR r5,[r9],#4 ;*cscreen = r5
;  ADD r0,r0,#4

  ;&20 &10
  AND r2,r3,r6,LSL #26
  ORR r2,r2,r2,LSL #3

  LDRB r4,[r11,r2,LSR #30] ;r4 = videoula_palette[r2]
  ADD r2,r4,r4,LSL #8 ;r5 = r4 + (r4<<4) double pixel
  ADD r5,r2,r2,LSL #16 ;quad pixel

  STR r5,[r0],#4 ;*cscreen = r5
  STR r5,[r0],#4 ;*cscreen = r5
  STR r5,[r9],#4 ;*cscreen = r5
  STR r5,[r9],#4 ;*cscreen = r5
;  ADD r0,r0,#4

  ;&80 &40
  AND r2,r3,r6,LSL #27
  ORR r2,r2,r2,LSL #3

  LDRB r4,[r11,r2,LSR #30] ;r4 = videoula_palette[r2]
  ADD r2,r4,r4,LSL #8 ;r5 = r4 + (r4<<4) double pixel
  ADD r5,r2,r2,LSL #16 ;quad pixel

  STR r5,[r0],#4 ;*cscreen = r5
  STR r5,[r0],#4 ;*cscreen = r5
  STR r5,[r9],#4 ;*cscreen = r5
  STR r5,[r9],#4 ;*cscreen = r5
;  ADD r0,r0,#4

  SUBS r1,r1,#16 ;decrement count by 16 bytes
  BLE mode5plot8x2_end ;be nice to SA

  ADDS r8,r8,#&80000 ;video_address += (8<<16)

;  CMP r8,#&8000 ;if video_address < 0x8000
;  ADDLT r7,r7,#8 ;add 8 to bbc memory location
  BPL mode5plot8x2_1 ;loop
;  SUB r7,r7,#8 ;we've over incremented r7

;  MOV r2,#&8000 ;else
;  SUB r2,r2,#1 ;to get &7FFF
;  AND r8,r8,r2 ;video_address &= 0x7FFF
  BIC r8,r8,#&80000000
  LDR r14,=video_baseaddress
  LDR r14,[r14] ;get bbc screen base address
  ADD r8,r8,r14,LSL #16 ;video_address += video_baseaddress
  ADD r7,r12,r8,LSR #16 ;absolute address in bbc memory
  B mode5plot8x2_1
mode5plot8x2_end
  STR r8,[r10] ;store video address
  LDMFD sp!,{v1-v6,sl,fp,pc} ;a1-a4,ip don't need to be preserved for APCS

;mode5values
  ;lookup table for mode 1 screen plotting
;  DCB 0,&01,&01,0,&01,0,0,0,&01,0,0,0,0,0,0,0 ;0
;  DCB &02,&03,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ;1
;  DCB &02,0,&03,0,0,0,0,0,0,0,0,0,0,0,0,0 ;2
;  DCB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ;3
;  DCB &02,0,0,0,&03,0,0,0,0,0,0,0,0,0,0,0 ;4
;  DCB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ;5
;  DCB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ;6
;  DCB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ;7
;  DCB &02,0,0,0,0,0,0,0,&03,0,0,0,0,0,0,0 ;8

|mode8plot4|
  ;mode8plot4(nscreen+nx,nxend-nx);
  ;mode 8 plot to 4bpp mode
  ;r0 = address offset in riscos memory (screen)
  ;r1 = number of bytes to plot
  STMFD sp!,{v1-v6,sl,fp,lr} ;a1-a4,ip don't need to be preserved for APCS
  ;LDR r12,=memory ;bbc memory space
  LDR r12,=beebit_acccon
  LDR r2,[r12] ;acccon
  LDR r12,=beebit_vdusel
  LDR r3,[r12] ;vdusel
  ;ANDS r2,r2,#&80
  ;ANDS r3,r2,r3 ;test vdusel set
  TST r2,r3 ;test vdusel set
  LDREQ r12,=memory ;bbc memory space
  LDRNE r12,=shadow ;shadow memory space

;mode8plot4_0
  LDR r11,=videoula_palette ;videoula palette lookup
  LDR r10,=video_address
  LDR r9,=mode8values
  ;LDR r8,[r10,#2] ;current address in bbc memory (into B3,B2)
  LDR r8,[r10]
  MOV r8,r8,LSL #16 ;current address in bbc memory (into B3,B2)
  ADD r7,r12,r8,LSR #16 ;absolute address in bbc memory

mode8plot4_1
  LDRB r6,[r7],#8 ;read byte from bbc memory (n)

  ;&08 &04 &02 &01
  ;slow calculated method
  ;AND r2,r6,#&80 ;n & 0x80
  ;MOV r3,r2,LSR #4 ;>>4
  ;AND r2,r6,#&20 ;n & 0x20
  ;ADD r3,r3,r2,LSR #3 ;>>3
  ;AND r2,r6,#&08 ;n & 0x08
  ;ADD r3,r3,r2,LSR #2 ;>>2
  ;AND r2,r6,#&02 ;n & 0x02
  ;ADD r3,r3,r2,LSR #1 ;>>1

  ;fast lookup table method
  AND r2,r6,#&AA ;%10101010
  ;LDR r9,=mode8values
  LDRB r3,[r9,r2]

  LDRB r4,[r11,r3] ;r4 = videoula_palette[r3]
  ADD r3,r4,r4,LSL #4 ;r3 = r4 + (r4<<4)
  ;STRB r3,[r0] ;cscreen[r0] = r3
  ;ADD r0,r0,#1 ;r0++
  ;STRB r3,[r0] ;cscreen[r0] = r3
  ;ADD r0,r0,#1 ;r0++
  ADD r5,r3,r3,LSL #8 ;r3 = r3 + (r3<<8)
  ADD r5,r5,r3,LSL #16 ;r3 = r3 + (r3<<16)
  ADD r5,r5,r3,LSL #24 ;r3 = r3 + (r3<<24)
  STR r5,[r0],#4 ;*cscreen = r5
  ;ADD r0,r0,#8

  ;&08 &04 &02 &01
  ;slow calculated method
  ;AND r2,r6,#&40 ;n & 0x40
  ;MOV r3,r2,LSR #3 ;>>3
  ;AND r2,r6,#&10 ;n & 0x10
  ;ADD r3,r3,r2,LSR #2 ;>>2
  ;AND r2,r6,#&04 ;n & 0x04
  ;ADD r3,r3,r2,LSR #1 ;>>1
  ;AND r2,r6,#&01 ;n & 0x01
  ;ADD r3,r3,r2

  ;fast lookup table method
  AND r2,r6,#&55 ;%01010101
  ;LDR r9,=mode8values
  LDRB r3,[r9,r2]

  LDRB r4,[r11,r3] ;r4 = videoula_palette[r3]
  ADD r3,r4,r4,LSL #4 ;r3 = r4 + (r4<<4)
  ;STRB r3,[r0] ;cscreen[r0] = r3
  ;ADD r0,r0,#1 ;r0++
  ;STRB r3,[r0] ;cscreen[r0] = r3
  ;ADD r0,r0,#1 ;r0++
  ADD r5,r3,r3,LSL #8 ;r3 = r3 + (r3<<8)
  ADD r5,r5,r3,LSL #16 ;r3 = r3 + (r3<<16)
  ADD r5,r5,r3,LSL #24 ;r3 = r3 + (r3<<24)
  STR r5,[r0],#4 ;*cscreen = r5
;  ADD r0,r0,#4

  SUBS r1,r1,#8 ;decrement count by 4 bytes
  BLE mode8plot4_end ;be nice to SA

  ADDS r8,r8,#&80000 ;video_address += 8

;  CMP r8,#&8000 ;if video_address < 0x8000
;  ADDLT r7,r7,#8 ;add 8 to bbc memory location
  BPL mode8plot4_1 ;loop
;  SUB r7,r7,#8 ;we've over incremented r7

;  MOV r2,#&8000 ;else
;  SUB r2,r2,#1 ;to get &7FFF
;  AND r8,r8,r2 ;video_address &= 0x7FFF
  BIC r8,r8,#&80000000
  LDR r3,=video_baseaddress
  LDR r3,[r3] ;get bbc screen base address
  ADD r8,r8,r3,LSL #16 ;video_address += video_baseaddress
  ADD r7,r12,r8,LSR #16 ;absolute address in bbc memory
  B mode8plot4_1
mode8plot4_end
  STR r8,[r10] ;store video address
  LDMFD sp!,{v1-v6,sl,fp,pc}

|mode8plot8|
  ;mode8plot8(nscreen+nx,nxend-nx);
  ;mode 8 plot to 8bpp mode
  ;r0 = address offset in riscos memory (screen)
  ;r1 = number of bytes to plot
  STMFD sp!,{v1-v6,sl,fp,lr} ;a1-a4,ip don't need to be preserved for APCS
  ;LDR r12,=memory ;bbc memory space
  LDR r12,=beebit_acccon
  LDR r2,[r12] ;acccon
  LDR r12,=beebit_vdusel
  LDR r3,[r12] ;vdusel
  ;ANDS r2,r2,#&80
  ;ANDS r3,r2,r3 ;test vdusel set
  TST r2,r3 ;test vdusel set
  LDREQ r12,=memory ;bbc memory space
  LDRNE r12,=shadow ;shadow memory space
  ;BNE mode8shadow

  ;read from main memory
  ;LDR r12,=beebit_memorymap ;master 128 stuff
  ;LDR r2,[r12]
  ;ANDS r2,r2,#&04 ;memorymap X
  ;LDREQ r12,=memory ;shadow memory is not swapped in, so read from shadow
  ;LDRNE r12,=shadow ;shadow memory is swapped in, so read main memory from show :)
  ;B mode8plot0

;mode8shadow
  ;read from shadow memory
  ;LDR r12,=beebit_memorymap ;master 128 stuff
  ;LDR r2,[r12]
  ;ANDS r2,r2,#&04 ;memorymap X
  ;LDREQ r12,=shadow ;shadow memory is not swapped in, so read from shadow
  ;LDRNE r12,=memory ;shadow memory is swapped in, so read main memory

;mode8plot8_0
  LDR r11,=videoula_palette ;videoula palette lookup
  LDR r10,=video_address
  LDR r9,=mode8values
  ;LDR r8,[r10,#2] ;current address in bbc memory (into B3,B2)
  LDR r8,[r10]
  MOV r8,r8,LSL #16 ;current address in bbc memory (into B3,B2)
  ADD r7,r12,r8,LSR #16 ;absolute address in bbc memory

mode8plot8_1
  LDRB r6,[r7],#8 ;read byte from bbc memory (n)

  ;&08 &04 &02 &01
  ;slow calculated method
  ;AND r2,r6,#&80 ;n & 0x80
  ;MOV r3,r2,LSR #4 ;>>4
  ;AND r2,r6,#&20 ;n & 0x20
  ;ADD r3,r3,r2,LSR #3 ;>>3
  ;AND r2,r6,#&08 ;n & 0x08
  ;ADD r3,r3,r2,LSR #2 ;>>2
  ;AND r2,r6,#&02 ;n & 0x02
  ;ADD r3,r3,r2,LSR #1 ;>>1

  ;fast lookup table method
  AND r2,r6,#&AA ;%10101010
  ;LDR r9,=mode8values
  LDRB r3,[r9,r2]

  LDRB r4,[r11,r3] ;r4 = videoula_palette[r3]
  ADD r3,r4,r4,LSL #8 ;r3 = r4 + (r4<<8)
  ;STRB r3,[r0] ;cscreen[r0] = r3
  ;ADD r0,r0,#1 ;r0++
  ;STRB r3,[r0] ;cscreen[r0] = r3
  ;ADD r0,r0,#1 ;r0++
  ADD r5,r3,r3,LSL #16 ;r3 = r3 + (r3<<16)

  STR r5,[r0],#4 ;*cscreen = r5
  STR r5,[r0],#4 ;*cscreen = r5
;  ADD r0,r0,#4

  ;&08 &04 &02 &01
  ;slow calculated method
  ;AND r2,r6,#&40 ;n & 0x40
  ;MOV r3,r2,LSR #3 ;>>3
  ;AND r2,r6,#&10 ;n & 0x10
  ;ADD r3,r3,r2,LSR #2 ;>>2
  ;AND r2,r6,#&04 ;n & 0x04
  ;ADD r3,r3,r2,LSR #1 ;>>1
  ;AND r2,r6,#&01 ;n & 0x01
  ;ADD r3,r3,r2

  ;fast lookup table method
  AND r2,r6,#&55 ;%01010101
  ;LDR r9,=mode8values
  LDRB r3,[r9,r2]

  LDRB r4,[r11,r3] ;r4 = videoula_palette[r3]
  ADD r3,r4,r4,LSL #8 ;r3 = r4 + (r4<<4)
  ;STRB r3,[r0] ;cscreen[r0] = r3
  ;ADD r0,r0,#1 ;r0++
  ;STRB r3,[r0] ;cscreen[r0] = r3
  ;ADD r0,r0,#1 ;r0++
  ADD r5,r3,r3,LSL #16 ;r5 = r3 + (r3<<16)

  STR r5,[r0],#4 ;*cscreen = r5
  STR r5,[r0],#4 ;*cscreen = r5
;  ADD r0,r0,#4

  SUBS r1,r1,#16 ;decrement count by 8 bytes
  BLE mode8plot8_end ;be nice to SA

  ADDS r8,r8,#&80000 ;video_address += 8

;  CMP r8,#&8000 ;if video_address < 0x8000
;  ADDLT r7,r7,#8 ;add 8 to bbc memory location
  BPL mode8plot8_1 ;loop
;  SUB r7,r7,#8 ;we've over incremented r7

;  MOV r2,#&8000 ;else
;  SUB r2,r2,#1 ;to get &7FFF
;  AND r8,r8,r2 ;video_address &= 0x7FFF
  BIC r8,r8,#&80000000
  LDR r3,=video_baseaddress
  LDR r3,[r3] ;get bbc screen base address
  ADD r8,r8,r3,LSL #16 ;video_address += video_baseaddress
  ADD r7,r12,r8,LSR #16 ;absolute address in bbc memory
  B mode8plot8_1
  LDMFD sp!,{r0-r12,pc} ;should never get here!
mode8plot8_end
  STR r8,[r10] ;store video address
  LDMFD sp!,{v1-v6,sl,fp,pc}

|mode8plot8x2|
  ;mode8plot8x2(nscreen+nx,nxend-nx);
  ;mode 8 plot to 8bpp mode
  ;r0 = address offset in riscos memory (screen)
  ;r1 = number of bytes to plot
  STMFD sp!,{v1-v6,sl,fp,lr} ;a1-a4,ip don't need to be preserved for APCS
  ;LDR r12,=memory ;bbc memory space
  LDR r12,=beebit_acccon
  LDR r2,[r12] ;acccon
  LDR r12,=beebit_vdusel
  LDR r3,[r12] ;vdusel
  ;ANDS r2,r2,#&80
  ;ANDS r3,r2,r3 ;test vdusel set
  TST r2,r3 ;test vdusel set
  LDREQ r12,=memory ;bbc memory space
  LDRNE r12,=shadow ;shadow memory space
  ;BNE mode8x2shadow

  ;read from main memory
  ;LDR r12,=beebit_memorymap ;master 128 stuff
  ;LDR r2,[r12]
  ;ANDS r2,r2,#&04 ;memorymap X
  ;LDREQ r12,=memory ;shadow memory is not swapped in, so read from shadow
  ;LDRNE r12,=shadow ;shadow memory is swapped in, so read main memory from show :)
  ;B mode8plot0

;mode8x2shadow
  ;read from shadow memory
  ;LDR r12,=beebit_memorymap ;master 128 stuff
  ;LDR r2,[r12]
  ;ANDS r2,r2,#&04 ;memorymap X
  ;LDREQ r12,=shadow ;shadow memory is not swapped in, so read from shadow
  ;LDRNE r12,=memory ;shadow memory is swapped in, so read main memory

;mode8plot8x2_0
  LDR r11,=videoula_palette ;videoula palette lookup
  LDR r10,=video_address
  LDR r9,=mode8values
  ;LDR r8,[r10,#2] ;current address in bbc memory (into B3,B2)
  LDR r8,[r10]
  MOV r8,r8,LSL #16 ;current address in bbc memory (into B3,B2)
  ADD r7,r12,r8,LSR #16 ;absolute address in bbc memory

  ;r5 = second line address
  LDR r5,=host_screenwidth
  LDR r5,[r5] ;host_screenwidth
  ADD r5,r5,r0
mode8plot8x2_1
  LDRB r6,[r7],#8 ;read byte from bbc memory (n)

  ;&08 &04 &02 &01
  ;slow calculated method
  ;AND r2,r6,#&80 ;n & 0x80
  ;MOV r3,r2,LSR #4 ;>>4
  ;AND r2,r6,#&20 ;n & 0x20
  ;ADD r3,r3,r2,LSR #3 ;>>3
  ;AND r2,r6,#&08 ;n & 0x08
  ;ADD r3,r3,r2,LSR #2 ;>>2
  ;AND r2,r6,#&02 ;n & 0x02
  ;ADD r3,r3,r2,LSR #1 ;>>1

  ;fast lookup table method
  AND r2,r6,#&AA ;%10101010
  ;LDR r9,=mode8values
  LDRB r3,[r9,r2]

  LDRB r4,[r11,r3] ;r4 = videoula_palette[r3]
  ADD r3,r4,r4,LSL #8 ;r3 = r4 + (r4<<8)
  ;STRB r3,[r0] ;cscreen[r0] = r3
  ;ADD r0,r0,#1 ;r0++
  ;STRB r3,[r0] ;cscreen[r0] = r3
  ;ADD r0,r0,#1 ;r0++
  ADD r2,r3,r3,LSL #16 ;r3 = r3 + (r3<<16)

  STR r2,[r0],#4 ;*cscreen = r5
  STR r2,[r0],#4 ;*cscreen = r5
  STR r2,[r0],#4 ;*cscreen = r5
  STR r2,[r0],#4 ;*cscreen = r5
  STR r2,[r5],#4 ;*cscreen = r5
  STR r2,[r5],#4 ;*cscreen = r5
  STR r2,[r5],#4 ;*cscreen = r5
  STR r2,[r5],#4 ;*cscreen = r5
;  ADD r0,r0,#4

  ;&08 &04 &02 &01
  ;slow calculated method
  ;AND r2,r6,#&40 ;n & 0x40
  ;MOV r3,r2,LSR #3 ;>>3
  ;AND r2,r6,#&10 ;n & 0x10
  ;ADD r3,r3,r2,LSR #2 ;>>2
  ;AND r2,r6,#&04 ;n & 0x04
  ;ADD r3,r3,r2,LSR #1 ;>>1
  ;AND r2,r6,#&01 ;n & 0x01
  ;ADD r3,r3,r2

  ;fast lookup table method
  AND r2,r6,#&55 ;%01010101
  ;LDR r9,=mode8values
  LDRB r3,[r9,r2]

  LDRB r4,[r11,r3] ;r4 = videoula_palette[r3]
  ADD r3,r4,r4,LSL #8 ;r3 = r4 + (r4<<4)
  ;STRB r3,[r0] ;cscreen[r0] = r3
  ;ADD r0,r0,#1 ;r0++
  ;STRB r3,[r0] ;cscreen[r0] = r3
  ;ADD r0,r0,#1 ;r0++
  ADD r2,r3,r3,LSL #16 ;r5 = r3 + (r3<<16)

  STR r2,[r0],#4 ;*cscreen = r5
  STR r2,[r0],#4 ;*cscreen = r5
  STR r2,[r0],#4 ;*cscreen = r5
  STR r2,[r0],#4 ;*cscreen = r5
  STR r2,[r5],#4 ;*cscreen = r5
  STR r2,[r5],#4 ;*cscreen = r5
  STR r2,[r5],#4 ;*cscreen = r5
  STR r2,[r5],#4 ;*cscreen = r5
;  ADD r0,r0,#4

  SUBS r1,r1,#16 ;decrement count by 8 bytes
  BLE mode8plot8x2_end ;be nice to SA

  ADDS r8,r8,#&80000 ;video_address += (8<<16)

;  CMP r8,#&8000 ;if video_address < 0x8000
;  ADDLT r7,r7,#8 ;add 8 to bbc memory location
  BPL mode8plot8x2_1 ;loop
;  SUB r7,r7,#8 ;we've over incremented r7

;  MOV r2,#&8000 ;else
;  SUB r2,r2,#1 ;to get &7FFF
;  AND r8,r8,r2 ;video_address &= 0x7FFF
  BIC r8,r8,#&80000000
  LDR r3,=video_baseaddress
  LDR r3,[r3] ;get bbc screen base address
  ADD r8,r8,r3,LSL #16 ;video_address += video_baseaddress
  ADD r7,r12,r8,LSR #16 ;absolute address in bbc memory
  B mode8plot8x2_1
  LDMFD sp!,{r0-r12,pc} ;should never get here!
mode8plot8x2_end
  STR r8,[r10] ;store video address
  LDMFD sp!,{v1-v6,sl,fp,pc}

mode8values
  ;lookup table for mode 8 screen plotting
  DCB &00,&01,&01,0,&02,&03,0,0,&02,0,&03,0,0,0,0,0 ;0
  DCB &04,&05,0,0,&06,&07,0,0,0,0,0,0,0,0,0,0 ;1
  DCB &04,0,&05,0,0,0,0,0,&06,0,&07,0,0,0,0,0 ;2
  DCB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ;3
  DCB &08,&09,0,0,&0A,&0B,0,0,0,0,0,0,0,0,0,0 ;4
  DCB &0C,&0D,0,0,&0E,&0F,0,0,0,0,0,0,0,0,0,0 ;5
  DCB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  DCB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  DCB &08,0,&09,0,0,0,0,0,&0A,0,&0B,0,0,0,0,0 ;8
  DCB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ;9
  DCB &0C,0,&0D,0,0,0,0,0,&0E,0,&0F,0,0,0,0,0 ;A
  DCB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  DCB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  DCB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  DCB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  DCB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

;Data Area

  AREA    |C$$data|, DATA

  END
