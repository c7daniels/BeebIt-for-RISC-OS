;>6502cpu89.s
;
; BeebIt - BBC Micro Model B Emulator
;
; (C) Copyright Michael J Foot, 1998-2005
;
; Email: <mjfoot@paradise.net.nz>
;
; r12=pointer to variable
; r11=pointer to variable
; r10=pointer to variable
; r9=PC
; r8=PS
; r7=Y
; r6=X
; r5=A

  GET h.6502cpus

  GET h.6502cpui

  GET h.SWINames


; Use the GET directive to include register definitions as if typed here

  GET h.RegNames

; Use the GET directive to include a list of SWI names as if typed here

  ;GET h.SWInames

; Area name C$$code advisable as wanted to link with C output

  AREA |C$$code|, CODE, READONLY

; Import global symbols

  IMPORT |memory|
  IMPORT |shadow|
  IMPORT |r6502_sp|
  IMPORT |r6502_pc|
  IMPORT |r6502_ps|
  IMPORT |r6502_a|
  IMPORT |r6502_x|
  IMPORT |r6502_y|
  ;IMPORT |r6502_n|
  ;IMPORT |r6502_v|
  ;IMPORT |r6502_b|
  ;IMPORT |r6502_d|
  ;IMPORT |r6502_i|
  ;IMPORT |r6502_z|
  ;IMPORT |r6502_c|
  IMPORT |r6502_cyclestogo|
  IMPORT |r6502read|
  IMPORT |r6502write|
  IMPORT |r6502loadregs|
  IMPORT |r6502saveregs|
  IMPORT |r6502opcodes|

  IMPORT |adcbcd|

; Export global symbols

  EXPORT |r6502opcode77|
  EXPORT |r6502opcode78|
  EXPORT |r6502opcode79|
  EXPORT |r6502opcode7A|
  EXPORT |r6502opcode7B|
  EXPORT |r6502opcode7C|
  EXPORT |r6502opcode7D|
  EXPORT |r6502opcode7E|
  EXPORT |r6502opcode7F|
  EXPORT |r6502opcode80|
  EXPORT |r6502opcode81|
  EXPORT |r6502opcode82|
  EXPORT |r6502opcode83|
  EXPORT |r6502opcode84|
  EXPORT |r6502opcode85|
  EXPORT |r6502opcode86|
  EXPORT |r6502opcode87|
  EXPORT |r6502opcode88|
  EXPORT |r6502opcode89|
  EXPORT |r6502opcode8A|
  EXPORT |r6502opcode8B|
  EXPORT |r6502opcode8C|
  EXPORT |r6502opcode8D|
  EXPORT |r6502opcode8E|
  EXPORT |r6502opcode8F|
  EXPORT |r6502opcode90|
  EXPORT |r6502opcode91|
  EXPORT |r6502opcode92|
  EXPORT |r6502opcode93|
  EXPORT |r6502opcode94|
  EXPORT |r6502opcode95|
  EXPORT |r6502opcode96|
  EXPORT |r6502opcode97|
  EXPORT |r6502opcode98|
  EXPORT |r6502opcode99|

|r6502opcode77|
  ;RRA
  ;STMFD sp!,{r0-r12,lr}
  VALUEOFZEROPAGEX
  R6502ROR r0
  STRB r0,[r11]

  ANDS r1,rps,#DFLAG
  BNE r6502opcode77_2
  ;digital
  R6502ADC
  CPU_CYCLES 6
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6502NEXTOPCODE
r6502opcode77_2
  ;BCD
  ;STMFD sp!,{lr}
  STR lr,[sp, #-4]!
  BL r6502saveregs
  BL adcbcd
  BL r6502loadregs
  ;LDMFD sp!,{lr}
  LDR lr, [sp], #4
  CPU_CYCLES 6
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6502NEXTOPCODE

|r6502opcode78|
  ;SEI
  ;STMFD sp!,{r2,rps,r11,lr}
  ;LDR r11,=r6502_ps
  ;LDRB rps,[r11]
  ORR rps,rps,#IFLAG
  ;STRB rps,[r11]
  CPU_CYCLES 2
  ;MOV pc,lr
  ;LDMFD sp!,{r2,rps,r11,pc}
  R6502NEXTOPCODE

|r6502opcode79|
  ;ADC
  ;STMFD sp!,{r0-r12,lr}
  ;VALUEOFABSOLUTEYPLUS
  ADDRESSOFABSOLUTEYPLUS_B ;r0 ;2+ cycles
  READMEM ;1 cycle
  ;LDR r12,=r6502_ps ;pointer to r6502_ps
  ;LDRB rps,[r12] ;load r6502_ps
  ANDS r1,rps,#DFLAG
  BNE r6502opcode79_2
  ;digital
  R6502ADC ;1 cycle
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6502NEXTOPCODE
r6502opcode79_2
  ;BCD
  ;STMFD sp!,{lr}
  STR lr,[sp, #-4]!
  BL r6502saveregs
  BL adcbcd ;1 cycle
  BL r6502loadregs
  ;LDMFD sp!,{lr}
  LDR lr, [sp], #4
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6502NEXTOPCODE

|r6502opcode7A|
  ;NOP
  R6502NOP
  ;MOV pc,lr
  R6502NEXTOPCODE

|r6502opcode7B|
  ;RRA
  ;STMFD sp!,{r0-r12,lr}
  ADDRESSOFABSOLUTEY ;r0 ;3 cycles
  MOV r2,r0 ;store address
  READMEM ;1 cycle
  R6502ROR r0
  MOV r1,r0 ;value
  MOV r0,r2 ;address
  WRITEMEM ;1 cycle

  ANDS r1,rps,#DFLAG
  BNE r6502opcode7B_2
  ;digital
  R6502ADC ;2 cycles
  CPU_CYCLES 4
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6502NEXTOPCODE
r6502opcode7B_2
  ;BCD
  ;STMFD sp!,{lr}
  STR lr,[sp, #-4]!
  BL r6502saveregs
  BL adcbcd ;2 cycles
  BL r6502loadregs
  ;LDMFD sp!,{lr}
  LDR lr, [sp], #4
  CPU_CYCLES 4
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6502NEXTOPCODE

|r6502opcode7C|
  ;SKW
  ;STMFD sp!,{r0-r2,rpc,r11,lr}
  R6502SKW
  CPU_CYCLES 4
  ;LDMFD sp!,{r0-r2,rpc,r11,pc}
  ;MOV pc,lr
  R6502NEXTOPCODE

|r6502opcode7D|
  ;ADC
  ;STMFD sp!,{r0-r12,lr}
  ;VALUEOFABSOLUTEXPLUS
  ADDRESSOFABSOLUTEXPLUS_B ;r0 ;2+ cycles
  READMEM ;1 cycle
  ;LDR r12,=r6502_ps ;pointer to r6502_ps
  ;LDRB rps,[r12] ;load r6502_ps
  ANDS r1,rps,#DFLAG
  BNE r6502opcode7D_2
  ;digital
  R6502ADC ;1 cycle
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6502NEXTOPCODE
r6502opcode7D_2
  ;BCD
  ;STMFD sp!,{lr}
  STR lr,[sp, #-4]!
  BL r6502saveregs
  BL adcbcd ;1 cycle
  BL r6502loadregs
  ;LDMFD sp!,{lr}
  LDR lr, [sp], #4
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6502NEXTOPCODE

|r6502opcode7E|
  ;STMFD sp!,{r0-r4,rps-r12,lr}
  ;VALUEOFABSOLUTE
  ADDRESSOFABSOLUTEX ;r0 ;3 cycles
  MOV r2,r0 ;store address
  READMEM ;1 cycle
  R6502ROR r0 ;2 cycles
  MOV r1,r0 ;value
  MOV r0,r2 ;address
  WRITEMEM ;1 cycle
  CPU_CYCLES 4
  ;LDMFD sp!,{r0-r4,rps-r12,pc}
  ;MOV pc,lr
  R6502NEXTOPCODE

|r6502opcode7F|
  ;RRA
  ;STMFD sp!,{r0-r12,lr}
  ADDRESSOFABSOLUTEX ;r0 ;3 cycles
  MOV r2,r0 ;store address
  READMEM ;1 cycle
  R6502ROR r0
  MOV r1,r0 ;value
  MOV r0,r2 ;address
  WRITEMEM ;1 cycle
  ANDS r1,rps,#DFLAG
  BNE r6502opcode7F_2
  ;digital
  R6502ADC ;2 cycles
  CPU_CYCLES 4
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6502NEXTOPCODE
r6502opcode7F_2
  ;BCD
  ;STMFD sp!,{lr}
  STR lr,[sp, #-4]!
  BL r6502saveregs
  BL adcbcd ;2 cycles
  BL r6502loadregs
  ;LDMFD sp!,{lr}
  LDR lr, [sp], #4
  CPU_CYCLES 4
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6502NEXTOPCODE

|r6502opcode80|
  ;SKB
  ;STMFD sp!,{r0-r2,rpc,r11,lr}
  R6502SKB
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r2,rpc,r11,pc}
  ;MOV pc,lr
  R6502NEXTOPCODE

|r6502opcode81|
  ;STA
  ;STMFD sp!,{r0-r2,rps-r12,lr}
  ADDRESSOFPREINDEXED_B ;r0 ;4 cycles
  ;R6502STA ;r1=r6502_a
  MOV r1,ra ;1 cycle
  WRITEMEM ;1 cycle
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r2,rps-r12,pc}
  ;MOV pc,lr
  R6502NEXTOPCODE

|r6502opcode82|
  ;SKB
  ;STMFD sp!,{r0-r2,rpc,r11,lr}
  R6502SKB
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r2,rpc,r11,pc}
  ;MOV pc,lr
  R6502NEXTOPCODE

|r6502opcode83|
  ;SAX
  ;STMFD sp!,{r0-r2,ra,rx,rpc-r12,lr}
  ADDRESSOFPREINDEXED_B ;r0 ;4 cycles
  ;LDR r11,=r6502_a
  ;LDRB ra,[r11]
  ;LDR r11,=r6502_x
  ;LDRB rx,[r11]
  AND r1,ra,rx ;1 cycle
  WRITEMEM ;1 cycle
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r2,ra,rx,rpc-r12,pc}
  ;MOV pc,lr
  R6502NEXTOPCODE

|r6502opcode84|
  ;STY
  ;STMFD sp!,{r0-r2,rps-r12,lr}
  ADDRESSOFZEROPAGE_B r0
  ;R6502STY ;r1=r6502_y
  STRB ry,[r12,r0]
  CPU_CYCLES 3
  ;LDMFD sp!,{r0-r2,rps-r12,pc}
  ;MOV pc,lr
  R6502NEXTOPCODE

|r6502opcode85|
  ;STA
  ;STMFD sp!,{r0-r2,rps-r12,lr}
  ADDRESSOFZEROPAGE_B r0
  ;R6502STA ;r1=r6502_a
  STRB ra,[r12,r0]
  CPU_CYCLES 3
  ;LDMFD sp!,{r0-r2,rps-r12,pc}
  ;MOV pc,lr
  R6502NEXTOPCODE

|r6502opcode86|
  ;STX
  ;STMFD sp!,{r0-r2,rps-r12,lr}
  ADDRESSOFZEROPAGE_B r0
  ;R6502STX ;r1=r6502_x
  STRB rx,[r12,r0]
  CPU_CYCLES 3
  ;LDMFD sp!,{r0-r2,rps-r12,pc}
  ;MOV pc,lr
  R6502NEXTOPCODE

|r6502opcode87|
  ;SAX
  ;STMFD sp!,{r0-r2,ra,rx,rpc-r12,lr}
  ADDRESSOFZEROPAGE_B r0
  ;LDR r11,=r6502_a
  ;LDRB ra,[r11] ;r6502_a
  ;LDR r11,=r6502_x
  ;LDRB rx,[r11] ;r6502_x
  AND r1,ra,rx
  STRB r1,[r12,r0]
  CPU_CYCLES 3
  ;LDMFD sp!,{r0-r2,ra,rx,rpc-r12,pc}
  ;MOV pc,lr
  R6502NEXTOPCODE

  LTORG

|r6502opcode88|
  ;STMFD sp!,{r0-r2,rps-r12,lr}
  ;LDR r12,=r6502_y
  ;LDRB r0,[r12] ;r6502_y
  ;MOV r0,ry
  R6502DEY
  ;STRB r0,[r12]
  ;MOV ry,r0
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r2,rps-r12,pc}
  ;MOV pc,lr
  R6502NEXTOPCODE

|r6502opcode89|
  ;SKB
  ;STMFD sp!,{r0-r2,rpc,r11,lr}
  R6502SKB
  CPU_CYCLES 3
  ;LDMFD sp!,{r0-r2,rpc,r11,pc}
  ;MOV pc,lr
  R6502NEXTOPCODE

|r6502opcode8A|
  ;TXA
  ;STMFD sp!,{r0-r2,rps,r12,lr}
  ;LDR r12,=r6502_x
  ;LDRB r0,[r12]
  ;LDR r12,=r6502_a
  ;STRB r0,[r12]
  ;LDR r12,=r6502_ps
  ;LDRB rps,[r12] ;load ps
  MOVS ra,rx
  SETZFLAG0 ;ra
  SETNFLAG ra
  ;STRB rps,[r12]
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r2,rps,r12,pc}
  ;MOV pc,lr
  R6502NEXTOPCODE

|r6502opcode8B|
  ;XAA
  ;STMFD sp!,{lr}
  VALUEOFIMMEDIATE_B r0
  MOV ra,rx
  AND ra,ra,r0
  CPU_CYCLES 2
  ;LDMFD sp!,{pc}
  ;MOV pc,lr
  R6502NEXTOPCODE

|r6502opcode8C|
  ;STY
  ADDRESSOFABSOLUTE_B ;r0 ;2 cycles
  MOV r1,ry ;1 cycle
  WRITEMEM ;1 cycle
  CPU_CYCLES 2
  R6502NEXTOPCODE

|r6502opcode8D|
  ;STA
  ADDRESSOFABSOLUTE_B ;r0 ;2 cycles
  MOV r1,ra ;1 cycle
  WRITEMEM ;1 cycle
  CPU_CYCLES 2
  R6502NEXTOPCODE

|r6502opcode8E|
  ;STX
  ADDRESSOFABSOLUTE_B ;r0 ;2 cycles
  ;R6502STX ;r1=r6502_x
  MOV r1,rx ;1 cycle
  ;BL r6502writeb ;mem ;(n,r6502_x)
  WRITEMEM ;1 cycle
  CPU_CYCLES 2
  R6502NEXTOPCODE

|r6502opcode8F|
  ;SAX
  ;STMFD sp!,{r0-r2,ra,rx,rpc-r12,lr}
  ADDRESSOFABSOLUTE_B ;r0 ;2 cycles
  ;LDR r11,=r6502_a
  ;LDRB ra,[r11]
  ;LDR r11,=r6502_x
  ;LDRB rx,[r11]
  AND r1,ra,rx ;1 cycle
  WRITEMEM ;1 cycle
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r2,ra,rx,rpc-r12,pc}
  ;MOV pc,lr
  R6502NEXTOPCODE

|r6502opcode90|
  ;BCC
  ;if condition succeeds
  ;  if page boundary crossed
  ;    4 cycles
  ;  else
  ;    3 cycles
  ;else
  ;  2 cycles
  ;STMFD sp!,{r0-r12,lr}
  ;LDR r10,=r6502_ps
  ;LDRB rps,[r10] ;load ps
  ;LDR r11,=r6502_pc
  ;LDR rpc,[r11]
  ANDS r0,rps,#CFLAG
  ;if (!(r6502_ps & CFLAG))
  BEQ r6502opcode90_2
  ;else
  ADD rpc,rpc,#1 ;r6502_pc++
  ;ANDS r0,rpc,#&10000
  ;MOVNE r0,#&FF00
  ;ORRNE r0,r0,#&00FF
  ;ANDNE rpc,rpc,r0
  ;STR rpc,[r11] ;r6502_pc
  ;LDR r10,=r6502_cyclestogo
  ;LDR r4,[r10] ;r6502_cyclestogo
  ;SUB r4,r4,#2
  ;STR r4,[r10] ;r6502_cyclestogo
  CPU_CYCLES 2
  ;B r6502opcode90end
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6502NEXTOPCODE

r6502opcode90_2
  ;LDR r12,=memory ;pointer to memory block
  VALUEOFIMMEDIATE_B r0
  MOV r1,rpc,LSR#8 ;r1=(pc>>8)
  AND r1,r1,#&FF
  ANDS r2,r0,#&80 ;r2=(n & 0x80)
  MOVNE r3,#&100
  SUBNE r0,r3,r0 ;r0=(&100-r0)
  SUBNE rpc,rpc,r0 ;rpc=(rpc-r0)
  ADDEQ rpc,rpc,r0 ;rpc=(rpc+r0)

  ;ANDS r0,rpc,#&10000
  ;MOVNE r0,#&FF00
  ;ORRNE r0,r0,#&00FF
  ;ANDNE rpc,rpc,r0

  MOV r2,rpc,LSR#8 ;r2=(pc>>8)
  AND r2,r2,#&FF
  ;LDR r10,=r6502_cyclestogo
  ;LDR r3,[r10] ;r6502_cyclestogo
  CMP r1,r2 ;if (n1 != (r6502_pc >> 8))
  ;SUBNE r3,r3,#4 ;r3=(r3-4)
  ;SUBEQ r3,r3,#3 ;r3=(r3-3)
  SUBNE rcycles,rcycles,#4 ;r3=(r3-4)
  SUBEQ rcycles,rcycles,#3 ;r3=(r3-3)
  ;STR r3,[r10] ;r6502_cyclestogo
r6502opcode90end
  ;STR rpc,[r11] ;r6502_pc
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6502NEXTOPCODE

|r6502opcode91|
  ;STA
  ;STMFD sp!,{r0-r2,ry,rps-r12,lr}
  ADDRESSOFPOSTINDEXEDY_STA ;r0 ;4 cycles
  ;R6502STA ;r1=r6502_a
  MOV r1,ra ;1 cycle
  WRITEMEM ;1 cycle
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r2,ry,rps-r12,pc}
  ;MOV pc,lr
  R6502NEXTOPCODE

|r6502opcode92|
  ;NOP
  ;STMFD sp!,{lr}
  R6502NOP
  ;LDMFD sp!,{pc}
  ;MOV pc,lr
  R6502NEXTOPCODE

|r6502opcode93|
  ;SAX
  ;STMFD sp!,{lr}
  ADDRESSOFPOSTINDEXEDY_B ;r0 ;3+ cycles
  AND r1,ra,rx ;1 cycle
  WRITEMEM ;1 cycle
  CPU_CYCLES 2
  ;LDMFD sp!,{pc}
  ;MOV pc,lr
  R6502NEXTOPCODE

|r6502opcode94|
  ;STMFD sp!,{r0-r2,rx,rps-r12,lr}
  ADDRESSOFZEROPAGEX
  ;R6502STY ;r1=r6502_y
  ;ADD r12,r12,r0
  ;STRB r1,[r12]
  STRB ry,[r12,r0]
  CPU_CYCLES 4
  ;LDMFD sp!,{r0-r2,rx,rps-r12,pc}
  ;MOV pc,lr
  R6502NEXTOPCODE

|r6502opcode95|
  ;STMFD sp!,{r0-r2,rx,rps-r12,lr}
  ADDRESSOFZEROPAGEX
  ;R6502STA ;r1=r6502_a
  ;ADD r12,r12,r0
  ;STRB r1,[r12]
  STRB ra,[r12,r0]
  CPU_CYCLES 4
  ;LDMFD sp!,{r0-r2,rx,rps-r12,pc}
  ;MOV pc,lr
  R6502NEXTOPCODE

|r6502opcode96|
  ;STMFD sp!,{r1-r2,ry,rps-r12,lr}
  ADDRESSOFZEROPAGEY
  ;R6502STX ;r1=r6502_x
  ;ADD r12,r12,r0
  ;STRB r1,[r12]
  STRB rx,[r12,r0]
  CPU_CYCLES 4
  ;LDMFD sp!,{r1-r2,ry,rps-r12,pc}
  ;MOV pc,lr
  R6502NEXTOPCODE

|r6502opcode97|
  ;SAX
  ;STMFD sp!,{r0-r2,ra,rx,rpc-r12,lr}
  ADDRESSOFZEROPAGEY
  ;LDR r11,=r6502_a
  ;LDRB ra,[r11]
  ;LDR r11,=r6502_x
  ;LDRB rx,[r11]
  AND r1,ra,rx
  STRB r1,[r12,r0]
  CPU_CYCLES 4
  ;LDMFD sp!,{r0-r2,ra,rx,rpc-r12,pc}
  ;MOV pc,lr
  R6502NEXTOPCODE

|r6502opcode98|
  ;TYA
  ;STMFD sp!,{r0-r2,rps,r12,lr}
  ;LDR r12,=r6502_y
  ;LDRB r0,[r12]
  ;LDR r12,=r6502_a
  ;STRB r0,[r12]
  MOVS ra,ry
  ;LDR r12,=r6502_ps
  ;LDRB rps,[r12] ;load ps
  SETZFLAG0 ;ra
  SETNFLAG ra
  ;STRB rps,[r12]
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r2,rps,r12,pc}
  ;MOV pc,lr
  R6502NEXTOPCODE

|r6502opcode99|
  ;STA
  ;STMFD sp!,{r0-r2,ry,rps-r12,lr}
  ADDRESSOFABSOLUTEY ;r0 ;3 cycles
  ;R6502STA ;r1=r6502_a
  MOV r1,ra ;1 cycle
  WRITEMEM ;1 cycle
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r2,ry,rps-r12,pc}
  ;MOV pc,lr
  R6502NEXTOPCODE

;Data Area

;  AREA    |C$$data|, DATA

  END
