;>6502cpu89.s
;
; BeebIt - BBC Micro Model B Emulator
;
; Cycle-level CPU emulation
;
; (C) Copyright Crispian Daniels, 2024
;
; Email: <convertedgames@3insdale.me.uk>
;

  GET h.6502zmaps

  GET h.6502cmaps

  GET h.6502cpus

; Use the GET directive to include register definitions as if typed here

  GET h.RegNames

; Area name C$$code advisable as wanted to link with C output

  AREA |C$$code|, CODE, READONLY

; Import global symbols

; Export global symbols

  EXPORT |r6502loadzpgtostystep|
  EXPORT |r6502loadzpgtostastep|
  EXPORT |r6502loadzpgtostxstep|
  EXPORT |r6502loadzpgtosaxstep|
  EXPORT |r6502deystep|
  EXPORT |r6502txastep|
  EXPORT |r6502xaaimmediatestep|
  EXPORT |r6502loadabstostystep|
  EXPORT |r6502loadabstostastep|
  EXPORT |r6502loadabstostxstep|
  EXPORT |r6502loadabstosaxstep|
  EXPORT |r6502fixindexedtostastep|
  EXPORT |r6502fixindexedtoxasstep|
  EXPORT |r6502fixindexedtotasstep|
  EXPORT |r6502fixindexedtosaystep|
  EXPORT |r6502fixindexedtoaxastep|
  EXPORT |r6502loadzpgxtostystep|
  EXPORT |r6502loadzpgxtostastep|
  EXPORT |r6502loadzpgytostxstep|
  EXPORT |r6502loadzpgytosaxstep|
  EXPORT |r6502bccstep|
  EXPORT |r6502tyastep|
  EXPORT |r6502txsstep|

|r6502loadzpgtostystep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  ADD r1,r1,#1:SHL:16
  STR r1,[r0,#:INDEX:R6502_LAST_PC_CODE]
  LDR r1,[r0,#:INDEX:R6502_M_SHIFT]
  LDRB r2,[r0,#:INDEX:R6502_Y]
  STRB r2,[r0,#:INDEX:R6502_M]
  R6502_JUMP_TO_ZPG_WRITE_OP

|r6502loadzpgtostastep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  ADD r1,r1,#1:SHL:16
  STR r1,[r0,#:INDEX:R6502_LAST_PC_CODE]
  LDR r1,[r0,#:INDEX:R6502_M_SHIFT]
  LDRB r2,[r0,#:INDEX:R6502_A]
  STRB r2,[r0,#:INDEX:R6502_M]
  R6502_JUMP_TO_ZPG_WRITE_OP

|r6502loadzpgtostxstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  ADD r1,r1,#1:SHL:16
  STR r1,[r0,#:INDEX:R6502_LAST_PC_CODE]
  LDR r1,[r0,#:INDEX:R6502_M_SHIFT]
  LDRB r2,[r0,#:INDEX:R6502_X]
  STRB r2,[r0,#:INDEX:R6502_M]
  R6502_JUMP_TO_ZPG_WRITE_OP

|r6502loadzpgtosaxstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  ADD r1,r1,#1:SHL:16
  STR r1,[r0,#:INDEX:R6502_LAST_PC_CODE]
  LDR r1,[r0,#:INDEX:R6502_M_SHIFT]
  LDRB r3,[r0,#:INDEX:R6502_A]
  LDRB r2,[r0,#:INDEX:R6502_X]
  AND r2,r3,r2
  STRB r2,[r0,#:INDEX:R6502_M]
  R6502_JUMP_TO_ZPG_WRITE_OP

|r6502deystep|
  LDR r2,[r0,#:INDEX:R6502_Y_SHIFT]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  SUBS r1,r2,#1:SHL:24
  BIC r3,r3,#NFLAG|ZFLAG
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  STR r1,[r0,#:INDEX:R6502_Y_SHIFT]
  STRB r3,[r0,#:INDEX:R6502_PS]
  R6502_IMPLIED_NEXT_INSTRUCTION

|r6502txastep|
  LDRB r1,[r0,#:INDEX:R6502_X]
  STRB r1,[r0,#:INDEX:R6502_A]
  LDRB r2,[r0,#:INDEX:R6502_PS]
  MOVS r3,r1,LSL #24
  BIC r2,r2,#NFLAG|ZFLAG
  ORRMI r2,r2,#NFLAG
  ORREQ r2,r2,#ZFLAG
  STRB r2,[r0,#:INDEX:R6502_PS]
  R6502_IMPLIED_NEXT_INSTRUCTION

|r6502xaaimmediatestep|
  LDR r1,[r0,#:INDEX:R6502_X_SHIFT]
  LDR r2,[r0,#:INDEX:R6502_M_SHIFT]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  ANDS r2,r1,r2
  BIC r3,r3,#NFLAG|ZFLAG
  STR r2,[r0,#:INDEX:R6502_A_SHIFT]
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  STRB r3,[r0,#:INDEX:R6502_PS]
  R6502_IMMEDIATE_NEXT_INSTRUCTION

|r6502loadabstostystep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDRB r1,[r0,#:INDEX:R6502_M]
  LDR r2,[r0,#:INDEX:R6502_LATCH]
  ORR r1,r2,r1,LSL #24
  ORR r1,r1,#BUS_BASEFLAG
  LDRB r2,[r0,#:INDEX:R6502_Y]
  STRB r2,[r0,#:INDEX:R6502_M]
  R6502_JUMP_TO_WRITE_OP

|r6502loadabstostastep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDRB r1,[r0,#:INDEX:R6502_M]
  LDR r2,[r0,#:INDEX:R6502_LATCH]
  ORR r1,r2,r1,LSL #24
  ORR r1,r1,#BUS_BASEFLAG
  LDRB r2,[r0,#:INDEX:R6502_A]
  STRB r2,[r0,#:INDEX:R6502_M]
  R6502_JUMP_TO_WRITE_OP

|r6502loadabstostxstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDRB r1,[r0,#:INDEX:R6502_M]
  LDR r2,[r0,#:INDEX:R6502_LATCH]
  ORR r1,r2,r1,LSL #24
  ORR r1,r1,#BUS_BASEFLAG
  LDRB r2,[r0,#:INDEX:R6502_X]
  STRB r2,[r0,#:INDEX:R6502_M]
  R6502_JUMP_TO_WRITE_OP

|r6502loadabstosaxstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDRB r1,[r0,#:INDEX:R6502_M]
  LDR r2,[r0,#:INDEX:R6502_LATCH]
  ORR r1,r2,r1,LSL #24
  ORR r1,r1,#BUS_BASEFLAG
  LDRB r3,[r0,#:INDEX:R6502_A]
  LDRB r2,[r0,#:INDEX:R6502_X]
  AND r2,r3,r2
  STRB r2,[r0,#:INDEX:R6502_M]
  R6502_JUMP_TO_WRITE_OP

|r6502fixindexedtostastep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_FIX_CODE]
  LDRB r2,[r0,#:INDEX:R6502_A]
  STRB r2,[r0,#:INDEX:R6502_M]
  R6502_JUMP_TO_WRITE_OP

|r6502fixindexedtoxasstep|
  LDRB r3,[r0,#:INDEX:R6502_Y]
  LDR r2,[r0,#:INDEX:R6502_LATCH]
  ADD r2,r2,r3,LSL #16
  TST r2,#1:SHL:24
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_FIX_CODE]
  LDRB r2,[r0,#:INDEX:R6502_X]
  ADDEQ r1,r1,#1:SHL:24
  AND r2,r2,r1,LSR #24
  SUBEQ r1,r1,#1:SHL:24
  STRB r2,[r0,#:INDEX:R6502_M]
  BICNE r1,r1,#&FF000000
  ORRNE r1,r1,r2,LSL #24
  R6502_JUMP_TO_WRITE_OP

|r6502fixindexedtotasstep|
  LDRB r3,[r0,#:INDEX:R6502_Y]
  LDR r2,[r0,#:INDEX:R6502_LATCH]
  ADD r2,r2,r3,LSL #16
  TST r2,#1:SHL:24
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_FIX_CODE]
  LDRB r2,[r0,#:INDEX:R6502_A]
  LDRB r3,[r0,#:INDEX:R6502_X]
  AND r2,r2,r3
  STRB r2,[r0,#:INDEX:R6502_SP_CODE+3]
  ADDEQ r1,r1,#1:SHL:24
  AND r2,r2,r1,LSR #24
  SUBEQ r1,r1,#1:SHL:24
  STRB r2,[r0,#:INDEX:R6502_M]
  BICNE r1,r1,#&FF000000
  ORRNE r1,r1,r2,LSL #24
  R6502_JUMP_TO_WRITE_OP

|r6502fixindexedtosaystep|
  LDRB r3,[r0,#:INDEX:R6502_X]
  LDR r2,[r0,#:INDEX:R6502_LATCH]
  ADD r2,r2,r3,LSL #16
  TST r2,#1:SHL:24
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_FIX_CODE]
  LDRB r2,[r0,#:INDEX:R6502_Y]
  ADDEQ r1,r1,#1:SHL:24
  AND r2,r2,r1,LSR #24
  SUBEQ r1,r1,#1:SHL:24
  STRB r2,[r0,#:INDEX:R6502_M]
  BICNE r1,r1,#&FF000000
  ORRNE r1,r1,r2,LSL #24
  R6502_JUMP_TO_WRITE_OP

|r6502fixindexedtoaxastep|
  LDRB r3,[r0,#:INDEX:R6502_Y]
  LDR r2,[r0,#:INDEX:R6502_LATCH]
  ADD r2,r2,r3,LSL #16
  TST r2,#1:SHL:24
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_FIX_CODE]
  LDRB r2,[r0,#:INDEX:R6502_A]
  LDRB r3,[r0,#:INDEX:R6502_X]
  AND r2,r2,r3
  ADDEQ r1,r1,#1:SHL:24
  AND r2,r2,r1,LSR #24
  SUBEQ r1,r1,#1:SHL:24
  STRB r2,[r0,#:INDEX:R6502_M]
  BICNE r1,r1,#&FF000000
  ORRNE r1,r1,r2,LSL #24
  R6502_JUMP_TO_WRITE_OP

|r6502loadzpgxtostystep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  LDRB r2,[r0,#:INDEX:R6502_X]
  ADD r1,r1,r2,LSL #24
  LDRB r2,[r0,#:INDEX:R6502_Y]
  STRB r2,[r0,#:INDEX:R6502_M]
  R6502_JUMP_TO_ZPG_WRITE_OP

|r6502loadzpgxtostastep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  LDRB r2,[r0,#:INDEX:R6502_X]
  ADD r1,r1,r2,LSL #24
  LDRB r2,[r0,#:INDEX:R6502_A]
  STRB r2,[r0,#:INDEX:R6502_M]
  R6502_JUMP_TO_ZPG_WRITE_OP

|r6502loadzpgytostxstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  LDRB r2,[r0,#:INDEX:R6502_Y]
  ADD r1,r1,r2,LSL #24
  LDRB r2,[r0,#:INDEX:R6502_X]
  STRB r2,[r0,#:INDEX:R6502_M]
  R6502_JUMP_TO_ZPG_WRITE_OP

|r6502loadzpgytosaxstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  LDRB r2,[r0,#:INDEX:R6502_Y]
  ADD r1,r1,r2,LSL #24
  LDRB r3,[r0,#:INDEX:R6502_A]
  LDRB r2,[r0,#:INDEX:R6502_X]
  AND r2,r3,r2
  STRB r2,[r0,#:INDEX:R6502_M]
  R6502_JUMP_TO_ZPG_WRITE_OP

|r6502bccstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  LDRB r2,[r0,#:INDEX:R6502_PS]
  TST r2,#CFLAG
  ADD r1,r1,#2:SHL:16
  LDRNE pc,[r0,#:INDEX:R6502_TRANSITION1ACTION]
  LDRB r3,[r0,#:INDEX:R6502_M]
  STRB r3,[r0,#:INDEX:R6502_LATCH+2]
  R6502_JUMP_TO_READ_OP

|r6502tyastep|
  LDRB r1,[r0,#:INDEX:R6502_Y]
  STRB r1,[r0,#:INDEX:R6502_A]
  LDRB r2,[r0,#:INDEX:R6502_PS]
  MOVS r3,r1,LSL #24
  BIC r2,r2,#NFLAG|ZFLAG
  ORRMI r2,r2,#NFLAG
  ORREQ r2,r2,#ZFLAG
  STRB r2,[r0,#:INDEX:R6502_PS]
  R6502_IMPLIED_NEXT_INSTRUCTION

|r6502txsstep|
  LDRB r2,[r0,#:INDEX:R6502_X]
  STRB r2,[r0,#:INDEX:R6502_SP_CODE+3]
  R6502_IMPLIED_NEXT_INSTRUCTION

;Data Area

;  AREA    |C$$data|, DATA

  END
