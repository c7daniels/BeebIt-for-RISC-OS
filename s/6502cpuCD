;>6502cpuCD.s
;
; BeebIt - BBC Micro Model B Emulator
;
; Cycle-level CPU emulation
;
; (C) Copyright Crispian Daniels, 2024
;
; Email: <convertedgames@3insdale.me.uk>
;

  GET h.6502zmaps

  GET h.6502cmaps

  GET h.6502cpus

; Use the GET directive to include register definitions as if typed here

  GET h.RegNames

; Area name C$$code advisable as wanted to link with C output

  AREA |C$$code|, CODE, READONLY

; Import global symbols

; Export global symbols

  EXPORT |r6502cpyimmediatestep|
  EXPORT |r6502cpystep|
  EXPORT |r6502cmpimmediatestep|
  EXPORT |r6502cmpstep|
  EXPORT |r6502deczpgstep|
  EXPORT |r6502decstep|
  EXPORT |r6502dcpzpgstep|
  EXPORT |r6502dcpstep|
  EXPORT |r6502inystep|
  EXPORT |r6502dexstep|
  EXPORT |r6502sbximmediatestep|
  EXPORT |r6502bnestep|
  EXPORT |r6502cldstep|

|r6502cpyimmediatestep|
  LDR r1,[r0,#:INDEX:R6502_Y_SHIFT]
  LDR r2,[r0,#:INDEX:R6502_M_SHIFT]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  SUBS r1,r1,r2
  BIC r3,r3,#NFLAG|ZFLAG|CFLAG
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  ORRCS r3,r3,#CFLAG
  STRB r3,[r0,#:INDEX:R6502_PS]
  R6502_IMMEDIATE_NEXT_INSTRUCTION

|r6502cpystep|
  LDR r1,[r0,#:INDEX:R6502_Y_SHIFT]
  LDR r2,[r0,#:INDEX:R6502_M_SHIFT]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  SUBS r1,r1,r2
  BIC r3,r3,#NFLAG|ZFLAG|CFLAG
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  ORRCS r3,r3,#CFLAG
  STRB r3,[r0,#:INDEX:R6502_PS]
  R6502_ADDRESSED_NEXT_INSTRUCTION

|r6502cmpimmediatestep|
  LDR r1,[r0,#:INDEX:R6502_A_SHIFT]
  LDR r2,[r0,#:INDEX:R6502_M_SHIFT]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  SUBS r1,r1,r2
  BIC r3,r3,#NFLAG|ZFLAG|CFLAG
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  ORRCS r3,r3,#CFLAG
  STRB r3,[r0,#:INDEX:R6502_PS]
  R6502_IMMEDIATE_NEXT_INSTRUCTION

|r6502cmpstep|
  LDR r1,[r0,#:INDEX:R6502_A_SHIFT]
  LDR r2,[r0,#:INDEX:R6502_M_SHIFT]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  SUBS r1,r1,r2
  BIC r3,r3,#NFLAG|ZFLAG|CFLAG
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  ORRCS r3,r3,#CFLAG
  STRB r3,[r0,#:INDEX:R6502_PS]
  R6502_ADDRESSED_NEXT_INSTRUCTION

|r6502deczpgstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r2,[r0,#:INDEX:R6502_M_SHIFT]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  SUBS r1,r2,#1:SHL:24
  BIC r3,r3,#NFLAG|ZFLAG
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  STR r1,[r0,#:INDEX:R6502_M_SHIFT]
  STRB r3,[r0,#:INDEX:R6502_PS]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  R6502_JUMP_TO_ZPG_WRITE_OP

|r6502decstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r2,[r0,#:INDEX:R6502_M_SHIFT]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  SUBS r1,r2,#1:SHL:24
  BIC r3,r3,#NFLAG|ZFLAG
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  STR r1,[r0,#:INDEX:R6502_M_SHIFT]
  STRB r3,[r0,#:INDEX:R6502_PS]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  R6502_JUMP_TO_WRITE_OP

|r6502dcpzpgstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDRB r1,[r0,#:INDEX:R6502_A]
  LDR r2,[r0,#:INDEX:R6502_M_SHIFT]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  SUB r2,r2,#1:SHL:24
  STR r2,[r0,#:INDEX:R6502_M_SHIFT]
  ADD r1,r1,#1:SHL:8
  SUB r1,r1,r2,LSR #24
  BIC r3,r3,#NFLAG|ZFLAG|CFLAG
  MOVS r2,r1,LSL #24
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  ORRCS r3,r3,#CFLAG
  STRB r3,[r0,#:INDEX:R6502_PS]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  R6502_JUMP_TO_ZPG_WRITE_OP

|r6502dcpstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDRB r1,[r0,#:INDEX:R6502_A]
  LDR r2,[r0,#:INDEX:R6502_M_SHIFT]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  SUB r2,r2,#1:SHL:24
  STR r2,[r0,#:INDEX:R6502_M_SHIFT]
  ADD r1,r1,#1:SHL:8
  SUB r1,r1,r2,LSR #24
  BIC r3,r3,#NFLAG|ZFLAG|CFLAG
  MOVS r2,r1,LSL #24
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  ORRCS r3,r3,#CFLAG
  STRB r3,[r0,#:INDEX:R6502_PS]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  R6502_JUMP_TO_WRITE_OP

|r6502inystep|
  LDR r2,[r0,#:INDEX:R6502_Y_SHIFT]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  ADDS r1,r2,#1:SHL:24
  BIC r3,r3,#NFLAG|ZFLAG
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  STR r1,[r0,#:INDEX:R6502_Y_SHIFT]
  STRB r3,[r0,#:INDEX:R6502_PS]
  R6502_IMPLIED_NEXT_INSTRUCTION

|r6502dexstep|
  LDR r2,[r0,#:INDEX:R6502_X_SHIFT]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  SUBS r1,r2,#1:SHL:24
  BIC r3,r3,#NFLAG|ZFLAG
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  STR r1,[r0,#:INDEX:R6502_X_SHIFT]
  STRB r3,[r0,#:INDEX:R6502_PS]
  R6502_IMPLIED_NEXT_INSTRUCTION

|r6502sbximmediatestep|
  LDR r1,[r0,#:INDEX:R6502_A_SHIFT]
  LDR r2,[r0,#:INDEX:R6502_X_SHIFT]
  AND r1,r1,r2
  LDR r2,[r0,#:INDEX:R6502_M_SHIFT]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  SUBS r1,r1,r2
  BIC r3,r3,#NFLAG|ZFLAG|CFLAG
  STR r1,[r0,#:INDEX:R6502_X_SHIFT]
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  ORRCS r3,r3,#CFLAG
  STRB r3,[r0,#:INDEX:R6502_PS]
  R6502_IMMEDIATE_NEXT_INSTRUCTION

|r6502bnestep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  LDRB r2,[r0,#:INDEX:R6502_PS]
  TST r2,#ZFLAG
  ADD r1,r1,#2:SHL:16
  LDRNE pc,[r0,#:INDEX:R6502_TRANSITION1ACTION]
  LDRB r3,[r0,#:INDEX:R6502_M]
  STRB r3,[r0,#:INDEX:R6502_LATCH+2]
  R6502_JUMP_TO_READ_OP

|r6502cldstep|
  LDRB r2,[r0,#:INDEX:R6502_PS]
  BIC r2,r2,#DFLAG
  STRB r2,[r0,#:INDEX:R6502_PS]
  R6502_IMPLIED_NEXT_INSTRUCTION

;Data Area

;  AREA    |C$$data|, DATA

  END
