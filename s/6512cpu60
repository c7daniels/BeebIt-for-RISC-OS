;>6512cpu60.s
;
; BeebIt - BBC Micro Model B Emulator
;
; (C) Copyright Michael J Foot, 1998-2005
;
; Email: <mjfoot@paradise.net.nz>
;
; r12=pointer to variable
; r11=pointer to variable
; r10=pointer to variable
; r9=PC
; r8=PS
; r7=Y
; r6=X
; r5=A

  GET h.6502cpus

  GET h.6502cpui

; Use the GET directive to include register definitions as if typed here

  GET h.RegNames

; Use the GET directive to include a list of SWI names as if typed here

  GET h.SWInames

; Area name C$$code advisable as wanted to link with C output

  AREA |C$$code|, CODE, READONLY

; Import global symbols

  IMPORT |memory|
  IMPORT |r6502_sp|
  IMPORT |r6502_pc|
  IMPORT |r6502_ps|
  IMPORT |r6502_a|
  IMPORT |r6502_x|
  IMPORT |r6502_y|
  ;IMPORT |r6502_n|
  ;IMPORT |r6502_v|
  ;IMPORT |r6502_b|
  ;IMPORT |r6502_d|
  ;IMPORT |r6502_i|
  ;IMPORT |r6502_z|
  ;IMPORT |r6502_c|
  IMPORT |r6502_cyclestogo|
  IMPORT |r6502read|
  IMPORT |r6502write|

  IMPORT |adcbcd|
  IMPORT |r6512loadregs|
  IMPORT |r6512saveregs|
  IMPORT |r6512opcodes|

; Export global symbols

  EXPORT |r6512opcode60|
  EXPORT |r6512opcode61|
  EXPORT |r6512opcode62|
  EXPORT |r6512opcode63|
  EXPORT |r6512opcode64|
  EXPORT |r6512opcode65|
  EXPORT |r6512opcode66|
  EXPORT |r6512opcode67|
  EXPORT |r6512opcode68|
  EXPORT |r6512opcode69|
  EXPORT |r6512opcode6A|
  EXPORT |r6512opcode6B|
  EXPORT |r6512opcode6C|
  EXPORT |r6512opcode6D|
  EXPORT |r6512opcode6E|
  EXPORT |r6512opcode6F|

|r6512opcode60|
  ;RTS
  ;STMFD sp!,{r0-r2,rsp,rpc,r10-r12,lr}
  ;LDR r12,=memory ;pointer to memory
  ;LDR r10,=r6502_sp ;pointer to r6502_sp
  ;LDRB rsp,[r10] ;load r6502_sp
  STACKPOP r2 ;lo
  STACKPOP r3 ;hi
  ;STRB rsp,[r10] ;store r6502_sp
  ;LDR r11,=r6502_pc
  ADD rpc,r2,r3,LSL#8 ;r6502_pc=nlo+(nhi<<8)
  ADD rpc,rpc,#1 ;r6502_pc++ (6502 bug)

  ;STR rpc,[r11]
  CPU_CYCLES 6
  ;LDMFD sp!,{r0-r2,rsp,rpc,r10-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode61|
  ;ADC
  ;STMFD sp!,{r0-r12,lr}
  ;VALUEOFPREINDEXED
  ADDRESSOFPREINDEXED_BP ;r0 ;4 cycles
  READMEM ;1 cycle
  ;BL r6502readbp; 1 cycle
  ;LDR r12,=r6502_ps ;pointer to r6502_ps
  ;LDRB rps,[r12] ;load r6502_ps
  ANDS r1,rps,#DFLAG
  BNE r6512opcode61_2
  ;digital
  R6502ADC ;1 cycle
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE
r6512opcode61_2
  ;BCD
  ;STMFD sp!,{lr}
  STR lr,[sp, #-4]!
  BL r6512saveregs
  BL adcbcd ;1 cycle
  BL r6512loadregs
  ;LDMFD sp!,{lr}
  LDR lr, [sp], #4
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode62|
  ;STMFD sp!,{lr}
  R6502NOP
  ;LDMFD sp!,{pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode63|
  ;RRA
  ;STMFD sp!,{r0-r12,lr}
  ADDRESSOFPREINDEXED_BP ;r0 ;4 cycles
  MOV r2,r0 ;store address
  READMEM ;1 cycle
  ;BL r6502readbp; 1 cycle
  R6502ROR r0 ;1 cycle
  MOV r1,r0 ;value
  MOV r0,r2 ;address
  WRITEMEM ;1 cycle

  ANDS r1,rps,#DFLAG
  BNE r6512opcode63_2
  ;digital
  R6502ADC ;1 cycle
  CPU_CYCLES 4
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE
r6512opcode63_2
  ;BCD
  ;STMFD sp!,{lr}
  STR lr,[sp, #-4]!
  BL r6512saveregs
  BL adcbcd ;1 cycle
  BL r6512loadregs
  ;LDMFD sp!,{lr}
  LDR lr, [sp], #4
  CPU_CYCLES 4
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode64|
  ;SKB
  ;STMFD sp!,{r0-r2,rpc,r11,lr}
  R6502SKB
  CPU_CYCLES 3
  ;LDMFD sp!,{r0-r2,rpc,r11,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode65|
  ;ADC
  ;STMFD sp!,{r0-r12,lr}
  VALUEOFZEROPAGE_BP
  ;LDR r12,=r6502_ps ;pointer to r6502_ps
  ;LDRB rps,[r12] ;load r6502_ps
  ANDS r1,rps,#DFLAG
  BNE r6512opcode65_2
  ;digital
  R6502ADC
  CPU_CYCLES 3
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE
r6512opcode65_2
  ;BCD
  ;STMFD sp!,{lr}
  STR lr,[sp, #-4]!
  BL r6512saveregs
  BL adcbcd
  BL r6512loadregs
  ;LDMFD sp!,{lr}
  LDR lr, [sp], #4
  CPU_CYCLES 3
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode66|
  ;STMFD sp!,{r0-r4,rps,rpc,r10-r12,lr}
  VALUEOFZEROPAGE_BP
  R6502ROR r0
  STRB r0,[r11]
  CPU_CYCLES 5
  ;LDMFD sp!,{r0-r4,rps,rpc,r10-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode67|
  ;RRA
  ;STMFD sp!,{r0-r12,lr}
  VALUEOFZEROPAGE_BP
  R6502ROR r0
  STRB r0,[r11]

  ANDS r1,rps,#DFLAG
  BNE r6512opcode67_2
  ;digital
  R6502ADC
  CPU_CYCLES 5
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE
r6512opcode67_2
  ;BCD
  ;STMFD sp!,{lr}
  STR lr,[sp, #-4]!
  BL r6512saveregs
  BL adcbcd
  BL r6512loadregs
  ;LDMFD sp!,{lr}
  LDR lr, [sp], #4
  CPU_CYCLES 5
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode68|
  ;PLA
  ;STMFD sp!,{r2,rsp,ra,rps,r11-r12,lr}
  ;LDR r12,=memory ;pointer to memory
  ;LDR r11,=r6502_sp ;pointer to r6502_sp
  ;LDRB rsp,[r11] ;load r6502_sp
  STACKPOP ra
  ;STRB rsp,[r11]

  ;LDR r11,=r6502_ps ;pointer to r6502_ps
  ;LDRB rps,[r11] ;r6502_ps
  SETNFLAG ra
  SETZFLAG ra
  ;STRB rps,[r11] ;r6502_ps

  ;LDR r11,=r6502_a ;pointer to r6502_a
  ;STRB ra,[r11] ;r6502_ps

  CPU_CYCLES 4
  ;LDMFD sp!,{r2,rsp,ra,rps,r11-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode69|
  ;ADC
  ;STMFD sp!,{r0-r12,lr}
  ;STMFD sp!,{lr}
  VALUEOFIMMEDIATE_BP r0
  ;LDR r12,=r6502_ps ;pointer to r6502_ps
  ;LDRB rps,[r12] ;load r6502_ps
  ANDS r1,rps,#DFLAG
  BNE r6512opcode69_2
  ;digital
  R6502ADC
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r12,pc}
  ;LDMFD sp!,{pc}
  MOV pc,lr
  R6512NEXTOPCODE
r6512opcode69_2
  ;BCD
  ;STMFD sp!,{lr}
  STR lr,[sp, #-4]!
  BL r6512saveregs
  BL adcbcd
  BL r6512loadregs
  ;LDMFD sp!,{lr}
  LDR lr, [sp], #4
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r12,pc}
  ;LDMFD sp!,{pc}
  MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode6A|
  ;STMFD sp!,{r0-r4,rps-r12,lr}
  ;LDR r10,=r6502_a
  ;LDRB r0,[r10]
  ;MOV r0,ra
  R6502ROR ra
  ;STRB r0,[r10]
  ;MOV ra,r0
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r4,rps-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

r6512opcode6B
  ;STMFD sp!,{lr}
  R6502NOP
  ;LDMFD sp!,{pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode6C|
  ;JMP
  ;STMFD sp!,{r0-r2,rpc,r10-r12,lr}
  ADDRESSOFABSOLUTE_BP ;r0 ;2 cycles
  CMP r0,#&3000
  BGE r6512opcode6C_2
  ;ADD r10,r12,r0 ;memory+r0
  LDRB r2,[r12,r0] ;lo

  ;MOV r3,r0
  ;READMEM
  ;MOV r2,r0
  ;MOV r0,r3

  ;AND r3,r0,#&FF ;test
  ;CMP r3,#&FF
  ;ADDNE r0,r0,#1 ;r1 = (r0+1)
  ;SUBEQ r0,r0,#255 ;r1 = (r0-255)
  ADD r1,r0,#1 ;r1 = (r0+1)
  AND r1,r1,#&FF ;r1 = (r1 and &FF)
  AND r0,r0,#&FF00
  ORR r0,r0,r1
  ;ADD r10,r12,r0 ;memory+r0
  LDRB r1,[r12,r0] ;hi

  ;READMEM
  ;MOV r1,r0

  ;ADD r0,r2,r1,LSL#8 ;r0=lo+(hi<<8)
  ;STR r0,[r11] ;pc
  ADD rpc,r2,r1,LSL#8 ;rpc=lo+(hi<<8)

  CPU_CYCLES 3
  ;LDMFD sp!,{r0-r2,rpc,r10-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

r6512opcode6C_2
  MOV r3,r0 ;store address

  ;BL r6502read ;lo
  READMEM ;lo
  MOV r2,r0 ;lo

  MOV r0,r3
  ;ADD r1,r3,#1 ;r1 = (r3+1)
  ;AND r1,r1,#&FF ;r1 = (r1 and &FF)
  ;AND r0,r3,#&FF00
  ;ORR r0,r0,r1
  ADD r1,r0,#1 ;r1 = (r0+1)
  AND r1,r1,#&FF ;r1 = (r1 and &FF)
  AND r0,r0,#&FF00
  ORR r0,r0,r1

  ;BL r6502read ;hi
  READMEM ;hi

  ADD rpc,r2,r0,LSL#8 ;rpc=lo+(hi<<8)
  CPU_CYCLES 3
  R6512NEXTOPCODE

|r6512opcode6D|
  ;ADC
  ;STMFD sp!,{r0-r12,lr}
  ;VALUEOFABSOLUTE
  ADDRESSOFABSOLUTE_BP ;r0 ;2 cycles
  READMEM ;1 cycle
  ;BL r6502readbp; 1 cycle
  ;LDR r12,=r6502_ps ;pointer to r6502_ps
  ;LDRB rps,[r12] ;load r6502_ps
  ANDS r1,rps,#DFLAG
  BNE r6512opcode6D_2
  ;digital
  R6502ADC ;1 cycle
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE
r6512opcode6D_2
  ;BCD
  ;STMFD sp!,{lr}
  STR lr,[sp, #-4]!
  BL r6512saveregs
  BL adcbcd ;1 cycle
  BL r6512loadregs
  ;LDMFD sp!,{lr}
  LDR lr, [sp], #4
  CPU_CYCLES 2
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode6E|
  ;STMFD sp!,{r0-r4,rps-r12,lr}
  ;VALUEOFABSOLUTE
  ADDRESSOFABSOLUTE_BP ;r0 ;2 cycles
  MOV r2,r0 ;store address
  READMEM ;1 cycle
  R6502ROR r0 ;2 cycles
  MOV r1,r0 ;value
  MOV r0,r2 ;address
  WRITEMEM ;1 cycle
  CPU_CYCLES 4
  ;LDMFD sp!,{r0-r4,rps-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

|r6512opcode6F|
  ;RRA
  ;STMFD sp!,{r0-r12,lr}
  ADDRESSOFABSOLUTE_BP ;r0 ;2 cycles
  MOV r2,r0 ;store address
  READMEM ;1 cycle
  R6502ROR r0
  MOV r1,r0 ;value
  MOV r0,r2 ;address
  WRITEMEM ;1 cycle

  ANDS r1,rps,#DFLAG
  BNE r6512opcode6F_2
  ;digital
  R6502ADC
  CPU_CYCLES 4
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE
r6512opcode6F_2
  ;BCD
  ;STMFD sp!,{lr}
  STR lr,[sp, #-4]!
  BL r6512saveregs
  BL adcbcd
  BL r6512loadregs
  ;LDMFD sp!,{lr}
  LDR lr, [sp], #4
  CPU_CYCLES 4
  ;LDMFD sp!,{r0-r12,pc}
  ;MOV pc,lr
  R6512NEXTOPCODE

;Data Area

;  AREA    |C$$data|, DATA

  END
