;>6502cpu01.s
;
; BeebIt - BBC Micro Model B Emulator
;
; Cycle-level CPU emulation
;
; (C) Copyright Crispian Daniels, 2024
;
; Email: <convertedgames@3insdale.me.uk>
;

  GET h.6502zmaps

  GET h.6502cmaps

  GET h.6502cpus

; Use the GET directive to include register definitions as if typed here

  GET h.RegNames

; Area name C$$code advisable as wanted to link with C output

  AREA |C$$code|, CODE, READONLY

; Import global symbols

; Export global symbols

  EXPORT |r6502tobrkpushpchstep|
  EXPORT |r6502topushpchstep|
  EXPORT |r6502pushedtopushpclstep|
  EXPORT |r6502pushedtopushpstep|
  EXPORT |r6502breadcrumbpushedtointerruptlostep|
  EXPORT |r6502latchveclostep|
  EXPORT |r6502loadpchstep|
  EXPORT |r6502oraimmediatestep|
  EXPORT |r6502orastep|
  EXPORT |r6502tozpgmodifystep|
  EXPORT |r6502tomodifystep|
  EXPORT |r6502aslastep|
  EXPORT |r6502aslzpgstep|
  EXPORT |r6502aslstep|
  EXPORT |r6502asozpgstep|
  EXPORT |r6502asostep|
  EXPORT |r6502skipimmediatestep|
  EXPORT |r6502skipstep|
  EXPORT |r6502latchzpgindlostep|
  EXPORT |r6502tohltstep|
  EXPORT |r6502hltstep|
  EXPORT |r6502breadcrumbloadzpgstep|
  EXPORT |r6502loadzpgstep|
  EXPORT |r6502topushpstep|
  EXPORT |r6502pushedstep|
  EXPORT |r6502ancimmediatestep|
  EXPORT |r6502latchabslostep|
  EXPORT |r6502breadcrumbloadabsstep|
  EXPORT |r6502loadabsstep|
  EXPORT |r6502breadcrumbloadzpgxstep|
  EXPORT |r6502loadzpgxstep|
  EXPORT |r6502bplstep|
  EXPORT |r6502branchtakenstep|
  EXPORT |r6502fixbranchtakenstep|
  EXPORT |r6502clcstep|
  EXPORT |r6502loadabsystep|
  EXPORT |r6502linearloadabsystep|
  EXPORT |r6502loadabsxstep|
  EXPORT |r6502linearloadabsxstep|
  EXPORT |r6502breadcrumbfixindexedstep|
  EXPORT |r6502fixindexedstep|

|r6502tobrkpushpchstep|
  LDR r2,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  ADD r2,r2,#2:SHL:16
  STR r2,[r0,#:INDEX:R6502_SYNC_PC_CODE]
|r6502topushpchstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_SP_CODE]
  LDRB r2,[r0,#:INDEX:R6502_SYNC_PC_CODE+3]
  STRB r2,[r0,#:INDEX:R6502_M]
  R6502_JUMP_TO_STACK_WRITE_OP

|r6502pushedtopushpclstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r2,[r0,#:INDEX:R6502_SP_CODE]
  SUB r1,r2,#1:SHL:24
  STR r1,[r0,#:INDEX:R6502_SP_CODE]
  LDRB r2,[r0,#:INDEX:R6502_SYNC_PC_CODE+2]
  STRB r2,[r0,#:INDEX:R6502_M]
  R6502_JUMP_TO_STACK_WRITE_OP

|r6502pushedtopushpstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r2,[r0,#:INDEX:R6502_SP_CODE]
  SUB r1,r2,#1:SHL:24
  STR r1,[r0,#:INDEX:R6502_SP_CODE]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  STRB r3,[r0,#:INDEX:R6502_M]
  R6502_JUMP_TO_STACK_WRITE_OP

|r6502breadcrumbpushedtointerruptlostep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r2,[r0,#:INDEX:R6502_SP_CODE]
  SUB r2,r2,#1:SHL:24
  STR r2,[r0,#:INDEX:R6502_SP_CODE]
  LDRB r2,[r0,#:INDEX:R6502_PS]
  LDRB r3,[r0,#:INDEX:R6502_NMIS]
  ORR r2,r2,#IFLAG
  STRB r2,[r0,#:INDEX:R6502_PS]
  BIC r2,r3,r3,LSR #4
  TST r2,#NMIS_NMI
  MOV r1,#BUS_BASEFLAG
  ORRNE r3,r3,#NMIS_OLDNMI
  SUBNE r1,r1,#6:SHL:16
  SUBEQ r1,r1,#2:SHL:16
  STR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  LDR r2,[r0,#:INDEX:R6502_TRANSITION2ACTION]
  STRNEB r3,[r0,#:INDEX:R6502_NMIS]
  STR r2,[r0,#:INDEX:R6502_TRANSITION1ACTION]
  LDR r2,[r0,#:INDEX:R6502_LBREAK]
  TST r2,r2
  LDRNE r3,[r0,#:INDEX:R6502_RESETACTION]
  STRNE r3,[r0,#:INDEX:R6502_TRANSITION1ACTION]
  R6502_JUMP_TO_READ_OP

|r6502latchveclostep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  ADD r1,r1,#1:SHL:16
  LDRB r2,[r0,#:INDEX:R6502_M]
  STRB r2,[r0,#:INDEX:R6502_LATCH+2]
  R6502_JUMP_TO_READ_OP

|r6502loadpchstep|
  LDRB r1,[r0,#:INDEX:R6502_M]
  LDR r2,[r0,#:INDEX:R6502_LATCH]
  ORR r1,r2,r1,LSL #24
  ORR r1,r1,#BUS_BASEFLAG
  LDR pc,[r0,#:INDEX:R6502_TRANSITION1ACTION]

|r6502oraimmediatestep|
  LDR r1,[r0,#:INDEX:R6502_A_SHIFT]
  LDR r2,[r0,#:INDEX:R6502_M_SHIFT]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  ORRS r1,r1,r2
  BIC r3,r3,#NFLAG|ZFLAG
  STR r1,[r0,#:INDEX:R6502_A_SHIFT]
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  STRB r3,[r0,#:INDEX:R6502_PS]
  R6502_IMMEDIATE_NEXT_INSTRUCTION

|r6502orastep|
  LDR r1,[r0,#:INDEX:R6502_A_SHIFT]
  LDR r2,[r0,#:INDEX:R6502_M_SHIFT]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  ORRS r1,r1,r2
  BIC r3,r3,#NFLAG|ZFLAG
  STR r1,[r0,#:INDEX:R6502_A_SHIFT]
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  STRB r3,[r0,#:INDEX:R6502_PS]
  R6502_ADDRESSED_NEXT_INSTRUCTION

|r6502tozpgmodifystep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  R6502_JUMP_TO_ZPG_WRITE_OP

|r6502tomodifystep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  R6502_JUMP_TO_WRITE_OP

|r6502aslastep|
  LDR r2,[r0,#:INDEX:R6502_A_SHIFT]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  MOVS r2,r2,LSL #1
  BIC r3,r3,#NFLAG|ZFLAG|CFLAG
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  ORRCS r3,r3,#CFLAG
  STR r2,[r0,#:INDEX:R6502_A_SHIFT]
  STRB r3,[r0,#:INDEX:R6502_PS]
  R6502_IMPLIED_NEXT_INSTRUCTION

|r6502aslzpgstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r2,[r0,#:INDEX:R6502_M_SHIFT]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  MOVS r2,r2,LSL #1
  BIC r3,r3,#NFLAG|ZFLAG|CFLAG
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  ORRCS r3,r3,#CFLAG
  STR r2,[r0,#:INDEX:R6502_M_SHIFT]
  STRB r3,[r0,#:INDEX:R6502_PS]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  R6502_JUMP_TO_ZPG_WRITE_OP

|r6502aslstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r2,[r0,#:INDEX:R6502_M_SHIFT]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  MOVS r2,r2,LSL #1
  BIC r3,r3,#NFLAG|ZFLAG|CFLAG
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  ORRCS r3,r3,#CFLAG
  STR r2,[r0,#:INDEX:R6502_M_SHIFT]
  STRB r3,[r0,#:INDEX:R6502_PS]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  R6502_JUMP_TO_WRITE_OP

|r6502asozpgstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_A_SHIFT]
  LDR r2,[r0,#:INDEX:R6502_M_SHIFT]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  MOVS r2,r2,LSL #1
  BIC r3,r3,#NFLAG|ZFLAG|CFLAG
  ORRCS r3,r3,#CFLAG
  STR r2,[r0,#:INDEX:R6502_M_SHIFT]
  ORRS r1,r1,r2
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  STR r1,[r0,#:INDEX:R6502_A_SHIFT]
  STRB r3,[r0,#:INDEX:R6502_PS]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  R6502_JUMP_TO_ZPG_WRITE_OP

|r6502asostep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_A_SHIFT]
  LDR r2,[r0,#:INDEX:R6502_M_SHIFT]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  MOVS r2,r2,LSL #1
  BIC r3,r3,#NFLAG|ZFLAG|CFLAG
  ORRCS r3,r3,#CFLAG
  STR r2,[r0,#:INDEX:R6502_M_SHIFT]
  ORRS r1,r1,r2
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  STR r1,[r0,#:INDEX:R6502_A_SHIFT]
  STRB r3,[r0,#:INDEX:R6502_PS]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  R6502_JUMP_TO_WRITE_OP

|r6502skipimmediatestep|
  R6502_IMMEDIATE_NEXT_INSTRUCTION

|r6502skipstep|
  R6502_ADDRESSED_NEXT_INSTRUCTION

|r6502latchzpgindlostep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  ADD r1,r1,#1:SHL:24
  LDRB r2,[r0,#:INDEX:R6502_M]
  STRB r2,[r0,#:INDEX:R6502_LATCH+2]
  R6502_JUMP_TO_ZPG_READ_OP

|r6502tohltstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  R6502_JUMP_TO_READ_OP

|r6502hltstep|
  LDR r1,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  LDR r2,[r0,#:INDEX:R6502_TRANSITION1ACTION]
  LDR r3,[r0,#:INDEX:R6502_RESETACTION]
  CMP r2,r3
  MOVEQ pc,r2
  LDR r3,[r0,#:INDEX:R6502_YIELDACTION]
  CMP r2,r3
  MOVEQ pc,r2
  R6502_JUMP_WITHOUT_BUS_OP

|r6502breadcrumbloadzpgstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  ADD r1,r1,#1:SHL:16
  STR r1,[r0,#:INDEX:R6502_LAST_PC_CODE]
  LDR r1,[r0,#:INDEX:R6502_M_SHIFT]
  STR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  R6502_JUMP_TO_ZPG_READ_OP

|r6502loadzpgstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  ADD r1,r1,#1:SHL:16
  STR r1,[r0,#:INDEX:R6502_LAST_PC_CODE]
  LDR r1,[r0,#:INDEX:R6502_M_SHIFT]
  R6502_JUMP_TO_ZPG_READ_OP

|r6502topushpstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_SP_CODE]
  LDRB r2,[r0,#:INDEX:R6502_PS]
  STRB r2,[r0,#:INDEX:R6502_M]
  R6502_JUMP_TO_STACK_WRITE_OP

|r6502pushedstep|
  LDR r1,[r0,#:INDEX:R6502_SP_CODE]
  SUB r1,r1,#1:SHL:24
  STR r1,[r0,#:INDEX:R6502_SP_CODE]
  R6502_IMPLIED_NEXT_INSTRUCTION

|r6502ancimmediatestep|
  LDR r1,[r0,#:INDEX:R6502_A_SHIFT]
  LDR r2,[r0,#:INDEX:R6502_M_SHIFT]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  ANDS r2,r2,r1
  BIC r3,r3,#NFLAG|ZFLAG|CFLAG
  STR r2,[r0,#:INDEX:R6502_A_SHIFT]
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  ORRMI r3,r3,#CFLAG
  STRB r3,[r0,#:INDEX:R6502_PS]
  R6502_IMMEDIATE_NEXT_INSTRUCTION

|r6502latchabslostep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  ADD r1,r1,#2:SHL:16
  STR r1,[r0,#:INDEX:R6502_LAST_PC_CODE]
  LDRB r2,[r0,#:INDEX:R6502_M]
  STRB r2,[r0,#:INDEX:R6502_LATCH+2]
  R6502_JUMP_TO_READ_OP

|r6502breadcrumbloadabsstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDRB r1,[r0,#:INDEX:R6502_M]
  LDR r2,[r0,#:INDEX:R6502_LATCH]
  ORR r1,r2,r1,LSL #24
  ORR r1,r1,#BUS_BASEFLAG
  STR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  R6502_JUMP_TO_READ_OP

|r6502loadabsstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDRB r1,[r0,#:INDEX:R6502_M]
  LDR r2,[r0,#:INDEX:R6502_LATCH]
  ORR r1,r2,r1,LSL #24
  ORR r1,r1,#BUS_BASEFLAG
  R6502_JUMP_TO_READ_OP

|r6502breadcrumbloadzpgxstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  LDRB r2,[r0,#:INDEX:R6502_X]
  ADD r1,r1,r2,LSL #24
  STR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  R6502_JUMP_TO_ZPG_READ_OP

|r6502loadzpgxstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  LDRB r2,[r0,#:INDEX:R6502_X]
  ADD r1,r1,r2,LSL #24
  R6502_JUMP_TO_ZPG_READ_OP

|r6502bplstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  LDRB r2,[r0,#:INDEX:R6502_PS]
  TST r2,#NFLAG
  ADD r1,r1,#2:SHL:16
  LDRNE pc,[r0,#:INDEX:R6502_TRANSITION1ACTION]
  LDRB r3,[r0,#:INDEX:R6502_M]
  STRB r3,[r0,#:INDEX:R6502_LATCH+2]
  R6502_JUMP_TO_READ_OP

|r6502branchtakenstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  ADD r1,r1,#2:SHL:16
  LDR r2,[r0,#:INDEX:R6502_LATCH]
  TST r2,#1:SHL:23
  SUBNE r2,r2,#1:SHL:24
  BIC r3,r1,#&FF000000
  ADD r2,r2,r3
  AND r1,r1,#&FF000000
  BIC r3,r2,#&FF000000
  ORR r1,r1,r3
  ANDS r2,r2,#&FF000000
  BEQ r6502branchtakenstep2
  ADD r2,r1,r2
  STR r2,[r0,#:INDEX:R6502_ADDRESS_FIX_CODE]
  R6502_JUMP_TO_READ_OP
r6502branchtakenstep2
  LDR r3,[r0,#:INDEX:R6502_TRANSITION1ACTION]
  LDR r2,[r0,#:INDEX:R6502_INTERRUPTFETCHACTION]
  CMP r3,r2
  MOVNE pc,r3
  STR r1,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  ADD r3,r0,#:INDEX:R6502_SEQUENCES
  LDR r3,[r3,#R6502_DECODE_SEQUENCE:SHL:2]
  LDR r2,[r0,#:INDEX:R6502_TIMESINTERRUPTMISSED]
  STR r3,[r0,#:INDEX:R6502_CPU_STATE]
  CMP r2,#256
  ADD r2,r2,#1
  STRLO r2,[r0,#:INDEX:R6502_TIMESINTERRUPTMISSED]
  BLO r6502branchtakenstep3
  LDR r3,[r0,#:INDEX:R6502_TRANSITION2ACTION]
  LDR r2,[r0,#:INDEX:R6502_YIELDACTION]
  CMP r3,r2
  BNE r6502branchtakenstep3
  LDR r3,[r0,#:INDEX:R6502_FETCHACTION]
  STR lr,[sp, #-4]!
  STR r3,[r0,#:INDEX:R6502_TRANSITION2ACTION]
  MOV lr,pc
  LDR pc,[r0,#:INDEX:R6502_YIELDFLAGACTION]
  LDR lr, [sp], #4
r6502branchtakenstep3
  R6502_JUMP_TO_READ_OP

|r6502fixbranchtakenstep|
    LDR r1,[r0,#:INDEX:R6502_ADDRESS_FIX_CODE]
  LDR pc,[r0,#:INDEX:R6502_TRANSITION1ACTION]

|r6502clcstep|
  LDRB r2,[r0,#:INDEX:R6502_PS]
  BIC r2,r2,#CFLAG
  STRB r2,[r0,#:INDEX:R6502_PS]
  R6502_IMPLIED_NEXT_INSTRUCTION

|r6502loadabsystep|
  LDRB r3,[r0,#:INDEX:R6502_Y]
  LDR r2,[r0,#:INDEX:R6502_LATCH]
  ADD r2,r2,r3,LSL #16
  TST r2,#1:SHL:24
  ADDEQ r1,r1,#1:SHL:2
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDRB r1,[r0,#:INDEX:R6502_M]
  ADD r1,r2,r1,LSL #24
  ORR r1,r1,#BUS_BASEFLAG
  STR r1,[r0,#:INDEX:R6502_ADDRESS_FIX_CODE]
  SUBNE r1,r1,#1:SHL:24
  R6502_JUMP_TO_READ_OP

|r6502linearloadabsystep|
  LDRB r3,[r0,#:INDEX:R6502_Y]
  LDR r2,[r0,#:INDEX:R6502_LATCH]
  ADD r2,r2,r3,LSL #16
  TST r2,#1:SHL:24
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDRB r1,[r0,#:INDEX:R6502_M]
  ADD r1,r2,r1,LSL #24
  ORR r1,r1,#BUS_BASEFLAG
  STR r1,[r0,#:INDEX:R6502_ADDRESS_FIX_CODE]
  SUBNE r1,r1,#1:SHL:24
  R6502_JUMP_TO_READ_OP

|r6502loadabsxstep|
  LDRB r3,[r0,#:INDEX:R6502_X]
  LDR r2,[r0,#:INDEX:R6502_LATCH]
  ADD r2,r2,r3,LSL #16
  TST r2,#1:SHL:24
  ADDEQ r1,r1,#1:SHL:2
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDRB r1,[r0,#:INDEX:R6502_M]
  ADD r1,r2,r1,LSL #24
  ORR r1,r1,#BUS_BASEFLAG
  STR r1,[r0,#:INDEX:R6502_ADDRESS_FIX_CODE]
  SUBNE r1,r1,#1:SHL:24
  R6502_JUMP_TO_READ_OP

|r6502linearloadabsxstep|
  LDRB r3,[r0,#:INDEX:R6502_X]
  LDR r2,[r0,#:INDEX:R6502_LATCH]
  ADD r2,r2,r3,LSL #16
  TST r2,#1:SHL:24
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDRB r1,[r0,#:INDEX:R6502_M]
  ADD r1,r2,r1,LSL #24
  ORR r1,r1,#BUS_BASEFLAG
  STR r1,[r0,#:INDEX:R6502_ADDRESS_FIX_CODE]
  SUBNE r1,r1,#1:SHL:24
  R6502_JUMP_TO_READ_OP

|r6502breadcrumbfixindexedstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_FIX_CODE]
  STR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  R6502_JUMP_TO_READ_OP

|r6502fixindexedstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_FIX_CODE]
  R6502_JUMP_TO_READ_OP

;Data Area

;  AREA    |C$$data|, DATA

  END
