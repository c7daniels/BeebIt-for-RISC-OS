;>65c12cpu67.s
;
; BeebIt - BBC Micro Model B Emulator
;
; Cycle-level CPU emulation
;
; (C) Copyright Crispian Daniels, 2024
;
; Email: <convertedgames@3insdale.me.uk>
;

  GET h.6502zmaps

  GET h.6502cmaps

  GET h.6502cpus

; Use the GET directive to include register definitions as if typed here

  GET h.RegNames

; Area name C$$code advisable as wanted to link with C output

  AREA |C$$code|, CODE, READONLY

; Import global symbols

; Export global symbols

  EXPORT |r65c12adcimmediatestep|
  EXPORT |r65c12adcstep|
  EXPORT |r65c12loadzpgtostzstep|
  EXPORT |r65c12loadzpgxtostzstep|
  EXPORT |r65c12latchjmpabsindlostep|
  EXPORT |r65c12fixjmpabsindstep|
  EXPORT |r65c12breadcrumbfixjmpabsxindstep|
  EXPORT |r65c12pulledystep|

|r65c12adcimmediatestep|
  LDRB r3,[r0,#:INDEX:R6502_PS]
  LDR r2,[r0,#:INDEX:R6502_M_SHIFT]
  TST r3,#DFLAG
  BNE r65c12adcimmediatestepD
  LDRB r1,[r0,#:INDEX:R6502_A]
  TEQ r2,r3,LSR #1   ;jdl** ARM c =6502 c
  SUB r1,r1,#1:SHL:8
  BIC r3,r3,#NFLAG|VFLAG|ZFLAG|CFLAG
  ADCS r1,r2,r1,ROR #8
  ORRMI r3,r3,#NFLAG
  ORRVS r3,r3,#VFLAG
  ORRCS r3,r3,#CFLAG
  MOVS r1,r1,LSR#24 ;(a=(a>>24) jdl** also (z=(a=0))
  ORREQ r3,r3,#ZFLAG
  STRB r1,[r0,#:INDEX:R6502_A]
  STRB r3,[r0,#:INDEX:R6502_PS]
  R6502_IMMEDIATE_NEXT_INSTRUCTION
r65c12adcimmediatestepD
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDRB r1,[r0,#:INDEX:R6502_A]
  TEQ r2,r3,LSR #1   ;jdl** ARM c =6502 c
  ORR r1,r1,r1,ROR #8
  AND r1,r1,#&F000000F
  ADD r1,r1,#6
  ORR r2,r2,#&000FF000
  ORR r2,r2,#&00000FF0
  ORR r2,r2,r2,ROR #24
  BIC r3,r3,#NFLAG|VFLAG|ZFLAG|CFLAG
  ADCS r1,r1,r2
  ORRMI r3,r3,#NFLAG
  ORRVS r3,r3,#VFLAG
  CMPCC r1,#&A0000000
  SUB r2,r1,#6
  ADDCS r1,r1,#&60000000
  ORRCS r3,r3,#CFLAG
  TST r1,#&80
  SUBNE r1,r1,#6
  AND r1,r1,#&F000000F
  ORR r1,r1,r1,LSR #24
  TST r2,#&F000000F
  ORREQ r3,r3,#ZFLAG
  STRB r1,[r0,#:INDEX:R6502_A]
  LDR r1,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  ADD r1,r1,#1:SHL:16
  STRB r3,[r0,#:INDEX:R6502_PS]
  R6502_JUMP_TO_READ_OP

|r65c12adcstep|
  LDRB r3,[r0,#:INDEX:R6502_PS]
  LDR r2,[r0,#:INDEX:R6502_M_SHIFT]
  TST r3,#DFLAG
  BNE r65c12adcstepD
  LDRB r1,[r0,#:INDEX:R6502_A]
  TEQ r2,r3,LSR #1   ;jdl** ARM c =6502 c
  SUB r1,r1,#1:SHL:8
  BIC r3,r3,#NFLAG|VFLAG|ZFLAG|CFLAG
  ADCS r1,r2,r1,ROR #8
  ORRMI r3,r3,#NFLAG
  ORRVS r3,r3,#VFLAG
  ORRCS r3,r3,#CFLAG
  MOVS r1,r1,LSR#24 ;(a=(a>>24) jdl** also (z=(a=0))
  ORREQ r3,r3,#ZFLAG
  STRB r1,[r0,#:INDEX:R6502_A]
  STRB r3,[r0,#:INDEX:R6502_PS]
  R6502_ADDRESSED_NEXT_INSTRUCTION
r65c12adcstepD
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDRB r1,[r0,#:INDEX:R6502_A]
  TEQ r2,r3,LSR #1   ;jdl** ARM c =6502 c
  ORR r1,r1,r1,ROR #8
  AND r1,r1,#&F000000F
  ADD r1,r1,#6
  ORR r2,r2,#&000FF000
  ORR r2,r2,#&00000FF0
  ORR r2,r2,r2,ROR #24
  BIC r3,r3,#NFLAG|VFLAG|ZFLAG|CFLAG
  ADCS r1,r1,r2
  ORRMI r3,r3,#NFLAG
  ORRVS r3,r3,#VFLAG
  CMPCC r1,#&A0000000
  SUB r2,r1,#6
  ADDCS r1,r1,#&60000000
  ORRCS r3,r3,#CFLAG
  TST r1,#&80
  SUBNE r1,r1,#6
  AND r1,r1,#&F000000F
  ORR r1,r1,r1,LSR #24
  TST r2,#&F000000F
  ORREQ r3,r3,#ZFLAG
  STRB r1,[r0,#:INDEX:R6502_A]
  LDR r1,[r0,#:INDEX:R6502_LAST_PC_CODE]
  STRB r3,[r0,#:INDEX:R6502_PS]
  R6502_JUMP_TO_READ_OP

|r65c12loadzpgtostzstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_SYNC_PC_CODE]
  ADD r1,r1,#1:SHL:16
  STR r1,[r0,#:INDEX:R6502_LAST_PC_CODE]
  LDR r1,[r0,#:INDEX:R6502_M_SHIFT]
  MOV r2,#0
  STRB r2,[r0,#:INDEX:R6502_M]
  R6502_JUMP_TO_ZPG_WRITE_OP

|r65c12loadzpgxtostzstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  LDRB r2,[r0,#:INDEX:R6502_X]
  ADD r1,r1,r2,LSL #24
  MOV r2,#0
  STRB r2,[r0,#:INDEX:R6502_M]
  R6502_JUMP_TO_ZPG_WRITE_OP

|r65c12latchjmpabsindlostep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  MOV r1,r1,ROR #24
  ADDS r1,r1,#1:SHL:24
  MOV r1,r1,ROR #8
  ADDCS r1,r1,#1:SHL:24
  STR r1,[r0,#:INDEX:R6502_ADDRESS_FIX_CODE]
  LDR r1,[r0,#:INDEX:R6502_LAST_PC_CODE]
  LDRB r2,[r0,#:INDEX:R6502_M]
  STRB r2,[r0,#:INDEX:R6502_LATCH+2]
  R6502_JUMP_TO_READ_OP

|r65c12fixjmpabsindstep|
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_FIX_CODE]
  R6502_JUMP_TO_READ_OP

|r65c12breadcrumbfixjmpabsxindstep|
  ADD r1,r1,#3:SHL:2
  STR r1,[r0,#:INDEX:R6502_CPU_STATE]
  LDR r1,[r0,#:INDEX:R6502_ADDRESS_FIX_CODE]
  STR r1,[r0,#:INDEX:R6502_ADDRESS_CODE]
  R6502_JUMP_TO_READ_OP

|r65c12pulledystep|
  LDRB r2,[r0,#:INDEX:R6502_M]
  LDRB r3,[r0,#:INDEX:R6502_PS]
  MOVS r1,r2,LSL #24
  BIC r3,r3,#NFLAG|ZFLAG
  STRB r2,[r0,#:INDEX:R6502_Y]
  ORRMI r3,r3,#NFLAG
  ORREQ r3,r3,#ZFLAG
  STRB r3,[r0,#:INDEX:R6502_PS]
  R6502_IMPLIED_NEXT_INSTRUCTION

;Data Area

;  AREA    |C$$data|, DATA

  END
