/*>video.h
 *
 * BeebIt - BBC Micro Model B Emulator
 *
 * Cycle-level video emulation
 *
 * (C) Copyright Crispian Daniels, 2024-2025
 *
 * Email: <convertedgames@3insdale.me.uk>

 */

#define VIDEODISPLAYSYNCEDGE 0x80
#define VIDEODISPLAYPOSSIBLESTART 0x40
#define VIDEODISPLAYADVANCEMASK 0x30
#define VIDEODISPLAYSKIP 0x08
#define VIDEODISPLAYCURSOR 0x04
#define VIDEODISPLAYTELETEXT 0x02
#define VIDEODISPLAYDISPLAY 0x01

#define VIDEODISPLAYOUTRIGHT 0x10
#define VIDEODISPLAYSTOP 0x20
#define VIDEODISPLAYOUTLEFT 0x30

#define CLIPPEDBELOWSKIPFLAG 0x80
#define CLIPPEDSKIPFLAG 0x40
#define CLIPPEDABOVESKIPFLAG 0x20
#define FRAMETIMESKIPFLAG 0x10
#define VSYNCSKIPFLAG 0x08
#define HSYNCSKIPFLAG 0x04
#define BEFOREDISPLAYSKIPFLAG 0x02
#define FASTSKIPFLAG 0x01

#define VIDEOSTEPEVENTLPSTB 0x02
#define VIDEOSTEPEVENTHSYNC 0x01

#define VIDEOSTEPLINETEST0 0x08
#define VIDEOSTEPLINETEST1 0x04
#define VIDEOSTEPLINETEST2 0x02
#define VIDEOSTEPLINETEST3 0x01

#define VIDEOCURSORSIGNALSEGMENT0 0x80U
#define VIDEOCURSORSIGNALSEGMENT1 0x40U
#define VIDEOCURSORSIGNALSEGMENT2 0x20U
#define VIDEOCURSORSIGNALSEGMENT3 0x10U
#define VIDEOCURSORSIGNALINPUT 0x08U
#define VIDEOCURSORSIGNALSKEW0 0x04U
#define VIDEOCURSORSIGNALSKEW1 0x02U
#define VIDEOCURSORSIGNALSKEW2 0x01U

#define VIDEODISPLAYSIGNALINPUT 0x08U
#define VIDEODISPLAYSIGNALSKEW0 0x04U
#define VIDEODISPLAYSIGNALSKEW1 0x02U
#define VIDEODISPLAYSIGNALSKEW2 0x01U

#define VIDEOCURSORSIGNALSEGMENTSHIFT 4
#define VIDEOCURSORSIGNALABOVESHIFT 16
#define VIDEOCURSORSIGNALBELOWSHIFT 8

#define VIDEOCURSORSIGNALSEGMENTS (VIDEOCURSORSIGNALSEGMENT0|VIDEOCURSORSIGNALSEGMENT1|VIDEOCURSORSIGNALSEGMENT2|VIDEOCURSORSIGNALSEGMENT3)
#define VIDEOCURSORSIGNALPSEGMENTS ((VIDEOCURSORSIGNALSEGMENTS<<VIDEOCURSORSIGNALABOVESHIFT)|(VIDEOCURSORSIGNALSEGMENTS<<VIDEOCURSORSIGNALBELOWSHIFT)|VIDEOCURSORSIGNALSEGMENTS)

#define VIDEOCURSORSIGNALTAILS (VIDEOCURSORSIGNALSEGMENT3|VIDEOCURSORSIGNALSKEW2)
#define VIDEOCURSORSIGNALSTOPS (VIDEOCURSORSIGNALTAILS>>1)
#define VIDEOCURSORSIGNALPSTOPS (((VIDEOCURSORSIGNALTAILS<<VIDEOCURSORSIGNALABOVESHIFT)|(VIDEOCURSORSIGNALTAILS<<VIDEOCURSORSIGNALBELOWSHIFT)|VIDEOCURSORSIGNALTAILS)>>1)

#define VIDEOSTEPIDLEFLAG 0x0100

#define VIDEOREADEVENTFLAG 0x20
#define VIDEOREADLINETESTFLAG 0x10
#define VIDEOREADCURSORSIGNALFLAG 0x08
#define VIDEOREADDISPLAYSIGNALFLAG 0x04
#define VIDEOREADODDFLAG 0x02
#define VIDEOREADSHADOWFLAG 0x01

#define TELETEXTCONCEALFLAG 0x80
#define TELETEXTFLASHFLAG 0x40
#define TELETEXTFLASHTIMEFLAG 0x20
#define TELETEXTHOLDFLAG 0x10
#define TELETEXTDOUBLEHEIGHTFLAG 0x08
#define TELETEXTSEPARATEDFLAG 0x02
#define TELETEXTGRAPHICFLAG 0x01
#define NOTTELETEXTCONCEALFLAG 0x7F
#define NOTTELETEXTFLASHFLAG 0xBF
#define NOTTELETEXTFLASHTIMEFLAG 0xDF
#define NOTTELETEXTHOLDFLAG 0xEF
#define NOTTELETEXTDOUBLEHEIGHTFLAG 0xF7
#define NOTTELETEXTSEPARATEDFLAG 0xFD
#define NOTTELETEXTGRAPHICFLAG 0xFE

#define TELETEXTCONCEALTHRESHOLD (0xFF-TELETEXTCONCEALFLAG-TELETEXTFLASHTIMEFLAG)

typedef HOSTVIDEOREADOP VIDEOREADFOUR[4]; //even main, even shadow, odd main, odd shadow

typedef VIDEOREADFOUR* VIDEOREADTWENTY[5]; //no wrap then screen start 0x4000, 0x6000, 0x3000, 0x5800

typedef VIDEOREADTWENTY* VIDEOREADSET[3]; //graphics, 2k teletext, 1k teletext

extern VIDEOREADSET videoreadset;
extern VIDEOREADSET videoreadpset;

/*palette*/
extern const unsigned int palette_rgb[8];
extern unsigned int palette_specified[8];

extern int videospeed_specified;
extern int framerate_specified;

extern void refreshteletextcolourfill(HOSTMAP* hmap);

extern R6502ZONEMAP* videodisplayskip(R6502ZONEMAP* zmap, uintptr_t peripheral_code);
extern R6502ZONEMAP* videowritecursorblank(R6502ZONEMAP* zmap, uintptr_t peripheral_code);
extern R6502ZONEMAP* videowritegraphics(R6502ZONEMAP* zmap, uintptr_t peripheral_code);
extern R6502ZONEMAP* videowritecursorgraphics(R6502ZONEMAP* zmap, uintptr_t peripheral_code);
extern R6502ZONEMAP* videowriteteletext(R6502ZONEMAP* zmap, uintptr_t peripheral_code);
extern R6502ZONEMAP* videowritecursorteletext(R6502ZONEMAP* zmap, uintptr_t peripheral_code);
extern R6502ZONEMAP* videowriteecursorblank(R6502ZONEMAP* zmap, uintptr_t peripheral_code);
extern R6502ZONEMAP* videowriteegraphics(R6502ZONEMAP* zmap, uintptr_t peripheral_code);
extern R6502ZONEMAP* videowriteecursorgraphics(R6502ZONEMAP* zmap, uintptr_t peripheral_code);
extern R6502ZONEMAP* videowriteeteletext(R6502ZONEMAP* zmap, uintptr_t peripheral_code);
extern R6502ZONEMAP* videowriteecursorteletext(R6502ZONEMAP* zmap, uintptr_t peripheral_code);
extern R6502ZONEMAP* videowritepcursorblank(R6502ZONEMAP* zmap, uintptr_t peripheral_code);
extern R6502ZONEMAP* videowritepgraphics(R6502ZONEMAP* zmap, uintptr_t peripheral_code);
extern R6502ZONEMAP* videowritepcursorgraphics(R6502ZONEMAP* zmap, uintptr_t peripheral_code);
extern R6502ZONEMAP* videowritepteletext(R6502ZONEMAP* zmap, uintptr_t peripheral_code);
extern R6502ZONEMAP* videowritepcursorteletext(R6502ZONEMAP* zmap, uintptr_t peripheral_code);

extern void videoinit(void);
extern void videosetpalette(void);
extern void videosetscale(void);
extern void videohostmodevars(void);
extern int writeusedcolours(void);
extern HOSTMAP* videosetscreenstartindex(HOSTMAP* hmap, uint8_t index);
extern void videofreeworkspace(void);
extern void videoreset(void);
