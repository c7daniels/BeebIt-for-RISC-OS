/*>6502cpu.h
 *
 * BeebIt - BBC Micro Model B Emulator
 *
 * Cycle-level CPU emulation
 *
 * (C) Copyright Crispian Daniels, 2024-2025
 *
 * Email: <convertedgames@3insdale.me.uk>
 */

#include "6502cmap.h"

#define NFLAG 0x80
#define VFLAG 0x40
#define UFLAG 0x20
#define BFLAG 0x10
#define DFLAG 0x08
#define IFLAG 0x04
#define ZFLAG 0x02
#define CFLAG 0x01
#define NOTNFLAG 0x7F
#define NOTVFLAG 0xBF
#define NOTUFLAG 0xDF
#define NOTBFLAG 0xEF
#define NOTDFLAG 0xF7
#define NOTIFLAG 0xFB
#define NOTZFLAG 0xFD
#define NOTCFLAG 0xFE

#define BUS_WRITEFLAG 0x01
#define BUS_BASEFLAG 0x05

#define IRQ_6522SYSVIA 0x01
#define IRQ_6522USRVIA 0x02
#define IRQ_6850ACIA 0x04

#define IRQ_NOT6522SYSVIA 0xFE
#define IRQ_NOT6522USRVIA 0xFD
#define IRQ_NOT6850ACIA 0xFB

#define NMIS_OLDRESET 0x40
#define NMIS_OLDNMI 0x20
#define NMIS_NMI 0x02
#define NMIS_NOTOLDRESET 0xBF
#define NMIS_NOTOLDNMI 0xDF
#define NMIS_NOTNMI 0xFD

#define R6502_DECODE_SEQUENCE 256
#define R6502_INTERRUPT_DECODE_SEQUENCE 257
#define R6502_INTERRUPT_SEQUENCE 258
#define R6502_RESET_SEQUENCE 259
#define R6502_MAIN_SEQUENCE_COUNT 260

#define R6502_READ_STRETCH_SEQUENCE 260
#define R6502_WRITE_STRETCH_SEQUENCE 261
#define R6502_OPCODE_07_SEQUENCE 262
#define R6502_SEQUENCE_COUNT 263

#define R6502_EXTRA_SEQUENCE_COUNT (R6502_SEQUENCE_COUNT - R6502_MAIN_SEQUENCE_COUNT)

#define R6502_LOG2_MAX_SEQUENCE_LENGTH 3

/*an assembly language version of R6502_JUMP_TO_READ_OP appears in h/6502cpus*/
#define R6502_JUMP_TO_READ_OP(MAP, ADDRCODE) \
  return (R6502CPUMAP*)MAP->busops[(((ADDRCODE)>>28)|(((ADDRCODE)-BUS_WRITEFLAG)<<4))&0x1F].op((R6502ZONEMAP*)MAP, ADDRCODE);

/*an assembly language version of R6502_JUMP_TO_WRITE_OP appears in h/6502cpus*/
#define R6502_JUMP_TO_WRITE_OP(MAP, ADDRCODE) \
  return (R6502CPUMAP*)MAP->busops[(((ADDRCODE)>>28)|((ADDRCODE)<<4))&0x1F].op((R6502ZONEMAP*)MAP, ADDRCODE);

#define R6502_JUMP_TO_ZPG_READ_OP(MAP, ADDRCODE) \
  { \
    MAP->m = MAP->pagezero[(ADDRCODE)>>24]; \
    return (R6502CPUMAP*)(*MAP->keyboard_state)((R6502ZONEMAP*)MAP, (intptr_t)(MAP->keyboard_state+1)); \
  }

#define R6502_JUMP_TO_ZPG_WRITE_OP(MAP, ADDRCODE) \
  { \
    MAP->pagezero[(ADDRCODE)>>24] = MAP->m; \
    return (R6502CPUMAP*)(*MAP->keyboard_state)((R6502ZONEMAP*)MAP, (intptr_t)(MAP->keyboard_state+1)); \
  }

#define R6502_JUMP_TO_STACK_READ_OP(MAP, SPCODE) \
  { \
    MAP->m = MAP->pageone[(SPCODE)>>24]; \
    return (R6502CPUMAP*)(*MAP->keyboard_state)((R6502ZONEMAP*)MAP, (intptr_t)(MAP->keyboard_state+1)); \
  }

#define R6502_JUMP_TO_STACK_WRITE_OP(MAP, SPCODE) \
  { \
    MAP->pageone[(SPCODE)>>24] = MAP->m; \
    return (R6502CPUMAP*)(*MAP->keyboard_state)((R6502ZONEMAP*)MAP, (intptr_t)(MAP->keyboard_state+1)); \
  }

#define R6502_JUMP_WITHOUT_BUS_OP(MAP) \
  return (R6502CPUMAP*)(*MAP->keyboard_state)((R6502ZONEMAP*)MAP, (intptr_t)(MAP->keyboard_state+1));

#define R6502_JUMP_FROM_BUS_OP(ZMAP) \
  return (*ZMAP->keyboard_state)(ZMAP, (intptr_t)(ZMAP->keyboard_state+1));

#define R6502_NEXT_INSTRUCTION(MAP, PCCODE) \
  return MAP->transition1action(MAP, PCCODE);

#define R6502_IMPLIED_NEXT_INSTRUCTION(MAP) \
  return MAP->transition1action(MAP, ((MAP)->sync_pc_code + 0x10000) & 0xFFFFFFFF);

#define R6502_IMMEDIATE_NEXT_INSTRUCTION(MAP) \
  return MAP->transition1action(MAP, ((MAP)->sync_pc_code + 0x20000) & 0xFFFFFFFF);

#define R6502_ADDRESSED_NEXT_INSTRUCTION(MAP) \
  return MAP->transition1action(MAP, ((MAP)->last_pc_code + 0x10000) & 0xFFFFFFFF);

#define R6502_CHECK_FOR_BREAK(MAP) \
  { \
    if ((MAP)->lbreak) \
      (MAP)->transition1action = (MAP)->resetaction; \
  }


#define R6502_IMPLIED_SEQUENCE(IMPLIED_STEP) \
    {IMPLIED_STEP, NULL}

#define R6502_PUSH_SEQUENCE(TO_ADDRESS_STEP) \
    {TO_ADDRESS_STEP, r6502pushedstep, NULL}

#define R6502_PULL_SEQUENCE(...) \
    {r6502beforepullstep, r6502topullstep, __VA_ARGS__, NULL}

#define R6502_LOAD_IMM_SEQUENCE(...) \
    {__VA_ARGS__, NULL}

#define R6502_LOAD_ZPG_SEQUENCE(...) \
    {r6502loadzpgstep, __VA_ARGS__, NULL}

#define R6502_MODIFY_ZPG_SEQUENCE(MODIFY_STEP) \
    {r6502breadcrumbloadzpgstep, r6502tozpgmodifystep, MODIFY_STEP, r6502skipstep, NULL}

#define R6502_STORE_ZPG_SEQUENCE(TO_ADDRESS_STEP) \
    {TO_ADDRESS_STEP, r6502skipstep, NULL}

#define R6502_LOAD_ABS_SEQUENCE(...) \
    {r6502latchabslostep, r6502loadabsstep, __VA_ARGS__, NULL}

#define R6502_MODIFY_ABS_SEQUENCE(MODIFY_STEP) \
    {r6502latchabslostep, r6502breadcrumbloadabsstep, r6502tomodifystep, MODIFY_STEP, r6502skipstep, NULL}

#define R6502_STORE_ABS_SEQUENCE(TO_ADDRESS_STEP) \
    {r6502latchabslostep, TO_ADDRESS_STEP, r6502skipstep, NULL}

#define R6502_LOAD_ZPGX_SEQUENCE(...) \
    {r6502breadcrumbloadzpgstep, r6502loadzpgxstep, __VA_ARGS__, NULL}

#define R6502_MODIFY_ZPGX_SEQUENCE(MODIFY_STEP) \
    {r6502breadcrumbloadzpgstep, r6502breadcrumbloadzpgxstep, r6502tozpgmodifystep, MODIFY_STEP, r6502skipstep, NULL}

#define R6502_STORE_ZPGX_SEQUENCE(TO_ADDRESS_STEP) \
    {r6502breadcrumbloadzpgstep, TO_ADDRESS_STEP, r6502skipstep, NULL}

#define R6502_LOAD_ZPGY_SEQUENCE(...) \
    {r6502breadcrumbloadzpgstep, r6502loadzpgystep, __VA_ARGS__, NULL}

#define R6502_STORE_ZPGY_SEQUENCE(TO_ADDRESS_STEP) \
    {r6502breadcrumbloadzpgstep, TO_ADDRESS_STEP, r6502skipstep, NULL}

#define R6502_LOAD_PREINDEXED_SEQUENCE(...) \
    {r6502breadcrumbloadzpgstep, r6502breadcrumbloadzpgxstep, r6502latchzpgindlostep, r6502loadabsstep, __VA_ARGS__, NULL}

#define R6502_MODIFY_PREINDEXED_SEQUENCE(MODIFY_STEP) \
    {r6502breadcrumbloadzpgstep, r6502breadcrumbloadzpgxstep, r6502latchzpgindlostep, r6502breadcrumbloadabsstep, r6502tomodifystep, MODIFY_STEP, r6502skipstep, NULL}

#define R6502_STORE_PREINDEXED_SEQUENCE(TO_ADDRESS_STEP) \
    {r6502breadcrumbloadzpgstep, r6502breadcrumbloadzpgxstep, r6502latchzpgindlostep, TO_ADDRESS_STEP, r6502skipstep, NULL}

#define R6502_LOAD_ABSX_SEQUENCE(...) \
    {r6502latchabslostep, r6502loadabsxstep, r6502fixindexedstep, __VA_ARGS__, NULL}

#define R6502_LOAD_ABSY_SEQUENCE(...) \
    {r6502latchabslostep, r6502loadabsystep, r6502fixindexedstep, __VA_ARGS__, NULL}

#define R6502_MODIFY_ABSX_SEQUENCE(MODIFY_STEP) \
    {r6502latchabslostep, r6502linearloadabsxstep, r6502breadcrumbfixindexedstep, r6502tomodifystep, MODIFY_STEP, r6502skipstep, NULL}

#define R6502_MODIFY_ABSY_SEQUENCE(MODIFY_STEP) \
    {r6502latchabslostep, r6502linearloadabsystep, r6502breadcrumbfixindexedstep, r6502tomodifystep, MODIFY_STEP, r6502skipstep, NULL}

#define R6502_STORE_ABSX_SEQUENCE(FIX_TO_ADDRESS_STEP) \
    {r6502latchabslostep, r6502linearloadabsxstep, FIX_TO_ADDRESS_STEP, r6502skipstep, NULL}

#define R6502_STORE_ABSY_SEQUENCE(FIX_TO_ADDRESS_STEP) \
    {r6502latchabslostep, r6502linearloadabsystep, FIX_TO_ADDRESS_STEP, r6502skipstep, NULL}

#define R6502_LOAD_POSTINDEXED_SEQUENCE(...) \
    {r6502breadcrumbloadzpgstep, r6502latchzpgindlostep, r6502loadabsystep, r6502fixindexedstep, __VA_ARGS__, NULL}

#define R6502_MODIFY_POSTINDEXED_SEQUENCE(MODIFY_STEP) \
    {r6502breadcrumbloadzpgstep, r6502latchzpgindlostep, r6502linearloadabsystep, r6502breadcrumbfixindexedstep, r6502tomodifystep, MODIFY_STEP, r6502skipstep, NULL}

#define R6502_STORE_POSTINDEXED_SEQUENCE(FIX_TO_ADDRESS_STEP) \
    {r6502breadcrumbloadzpgstep, r6502latchzpgindlostep, r6502linearloadabsystep, FIX_TO_ADDRESS_STEP, r6502skipstep, NULL}

#define R6502_BRANCH_SEQUENCE(BRANCH_STEP) \
    {BRANCH_STEP, r6502branchtakenstep, r6502fixbranchtakenstep,  NULL}

#define R65C12_MODIFY_ZPG_SEQUENCE(MODIFY_STEP) \
    {r6502breadcrumbloadzpgstep, r65c12zpgreadagainstep, MODIFY_STEP, r6502skipstep, NULL}

#define R65C12_MODIFY_ABS_SEQUENCE(MODIFY_STEP) \
    {r6502latchabslostep, r6502breadcrumbloadabsstep, r65c12readagainstep, MODIFY_STEP, r6502skipstep, NULL}

#define R65C12_LOAD_ZPGIND_SEQUENCE(...) \
    {r6502breadcrumbloadzpgstep, r6502latchzpgindlostep, r6502loadabsstep, __VA_ARGS__, NULL}

#define R65C12_STORE_ZPGIND_SEQUENCE(TO_ADDRESS_STEP) \
    {r6502breadcrumbloadzpgstep, r6502latchzpgindlostep, TO_ADDRESS_STEP, r6502skipstep, NULL}

#define R65C12_LOAD_ZPGX_SEQUENCE(...) \
    {r65c12tozpgstep, r6502loadzpgxstep, __VA_ARGS__, NULL}

#define R65C12_MODIFY_ZPGX_SEQUENCE(MODIFY_STEP) \
    {r65c12tozpgstep, r6502breadcrumbloadzpgxstep, r65c12zpgreadagainstep, MODIFY_STEP, r6502skipstep, NULL}

#define R65C12_STORE_ZPGX_SEQUENCE(TO_ADDRESS_STEP) \
    {r65c12tozpgstep, TO_ADDRESS_STEP, r6502skipstep, NULL}

#define R65C12_LOAD_ZPGY_SEQUENCE(...) \
    {r65c12tozpgstep, r6502loadzpgystep, __VA_ARGS__, NULL}

#define R65C12_STORE_ZPGY_SEQUENCE(TO_ADDRESS_STEP) \
    {r65c12tozpgstep, TO_ADDRESS_STEP, r6502skipstep, NULL}

#define R65C12_LOAD_PREINDEXED_SEQUENCE(...) \
    {r65c12tozpgstep, r6502breadcrumbloadzpgxstep, r6502latchzpgindlostep, r6502loadabsstep, __VA_ARGS__, NULL}

#define R65C12_MODIFY_PREINDEXED_SEQUENCE(MODIFY_STEP) \
    {r65c12tozpgstep, r6502breadcrumbloadzpgxstep, r6502latchzpgindlostep, r6502breadcrumbloadabsstep, r65c12readagainstep, MODIFY_STEP, r6502skipstep, NULL}

#define R65C12_STORE_PREINDEXED_SEQUENCE(TO_ADDRESS_STEP) \
    {r65c12tozpgstep, r6502breadcrumbloadzpgxstep, r6502latchzpgindlostep, TO_ADDRESS_STEP, r6502skipstep, NULL}

#define R65C12_LOAD_ABSX_SEQUENCE(...) \
    {r6502latchabslostep, r65c12loadabsxstep, r6502fixindexedstep, __VA_ARGS__, NULL}

#define R65C12_LOAD_ABSY_SEQUENCE(...) \
    {r6502latchabslostep, r65c12loadabsystep, r6502fixindexedstep, __VA_ARGS__, NULL}

#define R65C12_MODIFY_ABSX_SEQUENCE(MODIFY_STEP) \
    {r6502latchabslostep, r65c12breadcrumbloadabsxstep, r6502breadcrumbfixindexedstep, r65c12readagainstep, MODIFY_STEP, r6502skipstep, NULL}

#define R65C12_MODIFY_ABSY_SEQUENCE(MODIFY_STEP) \
    {r6502latchabslostep, r65c12breadcrumbloadabsystep, r6502breadcrumbfixindexedstep, r65c12readagainstep, MODIFY_STEP, r6502skipstep, NULL}

#define R65C12_LINEAR_MODIFY_ABSX_SEQUENCE(MODIFY_STEP) \
    {r6502latchabslostep, r65c12linearloadabsxstep, r6502breadcrumbfixindexedstep, r65c12readagainstep, MODIFY_STEP, r6502skipstep, NULL}

#define R65C12_STORE_ABSX_SEQUENCE(FIX_TO_ADDRESS_STEP) \
    {r6502latchabslostep, r65c12linearloadabsxstep, FIX_TO_ADDRESS_STEP, r6502skipstep, NULL}

#define R65C12_STORE_ABSY_SEQUENCE(FIX_TO_ADDRESS_STEP) \
    {r6502latchabslostep, r65c12linearloadabsystep, FIX_TO_ADDRESS_STEP, r6502skipstep, NULL}

#define R65C12_LOAD_POSTINDEXED_SEQUENCE(...) \
    {r6502breadcrumbloadzpgstep, r6502latchzpgindlostep, r65c12loadabsystep, r6502fixindexedstep, __VA_ARGS__, NULL}

#define R65C12_STORE_POSTINDEXED_SEQUENCE(FIX_TO_ADDRESS_STEP) \
    {r6502breadcrumbloadzpgstep, r6502latchzpgindlostep, r65c12linearloadabsystep, FIX_TO_ADDRESS_STEP, r6502skipstep, NULL}

#define R65C12_BRANCH_SEQUENCE(BRANCH_STEP) \
    {BRANCH_STEP, r65c12branchtakenstep, r6502fixbranchtakenstep, NULL}

extern const R6502OP r6502_decodesequence[];
extern const R6502OP r6502_interruptdecodesequence[];
extern const R6502OP r65c12_nopdecodesequence[];
extern const R6502OP r6502_nopsequence[];
extern const R6502OP r6502_clcsequence[];
extern const R6502OP r6502_secsequence[];
extern const R6502OP r6502_clisequence[];
extern const R6502OP r6502_seisequence[];
extern const R6502OP r6502_cldsequence[];
extern const R6502OP r6502_sedsequence[];
extern const R6502OP r6502_clvsequence[];
extern const R6502OP r6502_taxsequence[];
extern const R6502OP r6502_taysequence[];
extern const R6502OP r6502_txasequence[];
extern const R6502OP r6502_txssequence[];
extern const R6502OP r6502_tyasequence[];
extern const R6502OP r6502_tsxsequence[];
extern const R6502OP r6502_phpsequence[];
extern const R6502OP r6502_plpsequence[];
extern const R6502OP r6502_phasequence[];
extern const R6502OP r6502_plasequence[];
extern const R6502OP r6502_hltsequence[];
extern const R6502OP r6502_bitzpgsequence[];
extern const R6502OP r6502_bitabssequence[];
extern const R6502OP r6502_oraimmsequence[];
extern const R6502OP r6502_orazpgsequence[];
extern const R6502OP r6502_oraabssequence[];
extern const R6502OP r6502_orazpgxsequence[];
extern const R6502OP r6502_orapreindexedsequence[];
extern const R6502OP r6502_oraabsxsequence[];
extern const R6502OP r6502_oraabsysequence[];
extern const R6502OP r6502_orapostindexedsequence[];
extern const R6502OP r6502_andimmsequence[];
extern const R6502OP r6502_andzpgsequence[];
extern const R6502OP r6502_andabssequence[];
extern const R6502OP r6502_andzpgxsequence[];
extern const R6502OP r6502_andpreindexedsequence[];
extern const R6502OP r6502_andabsxsequence[];
extern const R6502OP r6502_andabsysequence[];
extern const R6502OP r6502_andpostindexedsequence[];
extern const R6502OP r6502_eorimmsequence[];
extern const R6502OP r6502_eorzpgsequence[];
extern const R6502OP r6502_eorabssequence[];
extern const R6502OP r6502_eorzpgxsequence[];
extern const R6502OP r6502_eorpreindexedsequence[];
extern const R6502OP r6502_eorabsxsequence[];
extern const R6502OP r6502_eorabsysequence[];
extern const R6502OP r6502_eorpostindexedsequence[];
extern const R6502OP r6502_adcimmsequence[];
extern const R6502OP r6502_adczpgsequence[];
extern const R6502OP r6502_adcabssequence[];
extern const R6502OP r6502_adczpgxsequence[];
extern const R6502OP r6502_adcpreindexedsequence[];
extern const R6502OP r6502_adcabsxsequence[];
extern const R6502OP r6502_adcabsysequence[];
extern const R6502OP r6502_adcpostindexedsequence[];
extern const R6502OP r6502_ldaimmsequence[];
extern const R6502OP r6502_ldazpgsequence[];
extern const R6502OP r6502_ldaabssequence[];
extern const R6502OP r6502_ldazpgxsequence[];
extern const R6502OP r6502_ldapreindexedsequence[];
extern const R6502OP r6502_ldaabsxsequence[];
extern const R6502OP r6502_ldaabsysequence[];
extern const R6502OP r6502_ldapostindexedsequence[];
extern const R6502OP r6502_ldximmsequence[];
extern const R6502OP r6502_ldxzpgsequence[];
extern const R6502OP r6502_ldxabssequence[];
extern const R6502OP r6502_ldxzpgysequence[];
extern const R6502OP r6502_ldxabsysequence[];
extern const R6502OP r6502_ldyimmsequence[];
extern const R6502OP r6502_ldyzpgsequence[];
extern const R6502OP r6502_ldyabssequence[];
extern const R6502OP r6502_ldyzpgxsequence[];
extern const R6502OP r6502_ldyabsxsequence[];
extern const R6502OP r6502_cmpimmsequence[];
extern const R6502OP r6502_cmpzpgsequence[];
extern const R6502OP r6502_cmpabssequence[];
extern const R6502OP r6502_cmpzpgxsequence[];
extern const R6502OP r6502_cmppreindexedsequence[];
extern const R6502OP r6502_cmpabsxsequence[];
extern const R6502OP r6502_cmpabsysequence[];
extern const R6502OP r6502_cmppostindexedsequence[];
extern const R6502OP r6502_cpximmsequence[];
extern const R6502OP r6502_cpxzpgsequence[];
extern const R6502OP r6502_cpxabssequence[];
extern const R6502OP r6502_cpyimmsequence[];
extern const R6502OP r6502_cpyzpgsequence[];
extern const R6502OP r6502_cpyabssequence[];
extern const R6502OP r6502_sbcimmsequence[];
extern const R6502OP r6502_sbczpgsequence[];
extern const R6502OP r6502_sbcabssequence[];
extern const R6502OP r6502_sbczpgxsequence[];
extern const R6502OP r6502_sbcpreindexedsequence[];
extern const R6502OP r6502_sbcabsxsequence[];
extern const R6502OP r6502_sbcabsysequence[];
extern const R6502OP r6502_sbcpostindexedsequence[];
extern const R6502OP r6502_skbimmsequence[];
extern const R6502OP r6502_skbzpgsequence[];
extern const R6502OP r6502_skbzpgxsequence[];
extern const R6502OP r6502_skwabssequence[];
extern const R6502OP r6502_skwabsxsequence[];
extern const R6502OP r6502_laxzpgsequence[];
extern const R6502OP r6502_laxabssequence[];
extern const R6502OP r6502_laxpreindexedsequence[];
extern const R6502OP r6502_laxzpgysequence[];
extern const R6502OP r6502_laxabsysequence[];
extern const R6502OP r6502_laxpostindexedsequence[];
extern const R6502OP r6502_lasabsysequence[];
extern const R6502OP r6502_ancimmsequence[];
extern const R6502OP r6502_alrimmsequence[];
extern const R6502OP r6502_arrimmsequence[];
extern const R6502OP r6502_xaaimmsequence[];
extern const R6502OP r6502_oalimmsequence[];
extern const R6502OP r6502_sbximmsequence[];
extern const R6502OP r6502_aslasequence[];
extern const R6502OP r6502_aslzpgsequence[];
extern const R6502OP r6502_aslabssequence[];
extern const R6502OP r6502_aslzpgxsequence[];
extern const R6502OP r6502_aslabsxsequence[];
extern const R6502OP r6502_rolasequence[];
extern const R6502OP r6502_rolzpgsequence[];
extern const R6502OP r6502_rolabssequence[];
extern const R6502OP r6502_rolzpgxsequence[];
extern const R6502OP r6502_rolabsxsequence[];
extern const R6502OP r6502_lsrasequence[];
extern const R6502OP r6502_lsrzpgsequence[];
extern const R6502OP r6502_lsrabssequence[];
extern const R6502OP r6502_lsrzpgxsequence[];
extern const R6502OP r6502_lsrabsxsequence[];
extern const R6502OP r6502_rorasequence[];
extern const R6502OP r6502_rorzpgsequence[];
extern const R6502OP r6502_rorabssequence[];
extern const R6502OP r6502_rorzpgxsequence[];
extern const R6502OP r6502_rorabsxsequence[];
extern const R6502OP r6502_dexsequence[];
extern const R6502OP r6502_deysequence[];
extern const R6502OP r6502_deczpgsequence[];
extern const R6502OP r6502_decabssequence[];
extern const R6502OP r6502_deczpgxsequence[];
extern const R6502OP r6502_decabsxsequence[];
extern const R6502OP r6502_inxsequence[];
extern const R6502OP r6502_inysequence[];
extern const R6502OP r6502_inczpgsequence[];
extern const R6502OP r6502_incabssequence[];
extern const R6502OP r6502_inczpgxsequence[];
extern const R6502OP r6502_incabsxsequence[];
extern const R6502OP r6502_asozpgsequence[];
extern const R6502OP r6502_asoabssequence[];
extern const R6502OP r6502_asozpgxsequence[];
extern const R6502OP r6502_asopreindexedsequence[];
extern const R6502OP r6502_asoabsxsequence[];
extern const R6502OP r6502_asoabsysequence[];
extern const R6502OP r6502_asopostindexedsequence[];
extern const R6502OP r6502_rlazpgsequence[];
extern const R6502OP r6502_rlaabssequence[];
extern const R6502OP r6502_rlazpgxsequence[];
extern const R6502OP r6502_rlapreindexedsequence[];
extern const R6502OP r6502_rlaabsxsequence[];
extern const R6502OP r6502_rlaabsysequence[];
extern const R6502OP r6502_rlapostindexedsequence[];
extern const R6502OP r6502_lsezpgsequence[];
extern const R6502OP r6502_lseabssequence[];
extern const R6502OP r6502_lsezpgxsequence[];
extern const R6502OP r6502_lsepreindexedsequence[];
extern const R6502OP r6502_lseabsxsequence[];
extern const R6502OP r6502_lseabsysequence[];
extern const R6502OP r6502_lsepostindexedsequence[];
extern const R6502OP r6502_rrazpgsequence[];
extern const R6502OP r6502_rraabssequence[];
extern const R6502OP r6502_rrazpgxsequence[];
extern const R6502OP r6502_rrapreindexedsequence[];
extern const R6502OP r6502_rraabsxsequence[];
extern const R6502OP r6502_rraabsysequence[];
extern const R6502OP r6502_rrapostindexedsequence[];
extern const R6502OP r6502_dcpzpgsequence[];
extern const R6502OP r6502_dcpabssequence[];
extern const R6502OP r6502_dcpzpgxsequence[];
extern const R6502OP r6502_dcppreindexedsequence[];
extern const R6502OP r6502_dcpabsxsequence[];
extern const R6502OP r6502_dcpabsysequence[];
extern const R6502OP r6502_dcppostindexedsequence[];
extern const R6502OP r6502_isbzpgsequence[];
extern const R6502OP r6502_isbabssequence[];
extern const R6502OP r6502_isbzpgxsequence[];
extern const R6502OP r6502_isbpreindexedsequence[];
extern const R6502OP r6502_isbabsxsequence[];
extern const R6502OP r6502_isbabsysequence[];
extern const R6502OP r6502_isbpostindexedsequence[];
extern const R6502OP r6502_stazpgsequence[];
extern const R6502OP r6502_staabssequence[];
extern const R6502OP r6502_stazpgxsequence[];
extern const R6502OP r6502_stapreindexedsequence[];
extern const R6502OP r6502_staabsxsequence[];
extern const R6502OP r6502_staabsysequence[];
extern const R6502OP r6502_stapostindexedsequence[];
extern const R6502OP r6502_stxzpgsequence[];
extern const R6502OP r6502_stxabssequence[];
extern const R6502OP r6502_stxzpgysequence[];
extern const R6502OP r6502_styzpgsequence[];
extern const R6502OP r6502_styabssequence[];
extern const R6502OP r6502_styzpgxsequence[];
extern const R6502OP r6502_saxzpgsequence[];
extern const R6502OP r6502_saxabssequence[];
extern const R6502OP r6502_saxzpgysequence[];
extern const R6502OP r6502_saxpreindexedsequence[];
extern const R6502OP r6502_axaabsysequence[];
extern const R6502OP r6502_axapostindexedsequence[];
extern const R6502OP r6502_xasabsysequence[];
extern const R6502OP r6502_sayabsxsequence[];
extern const R6502OP r6502_tasabsysequence[];
extern const R6502OP r6502_bplsequence[];
extern const R6502OP r6502_bmisequence[];
extern const R6502OP r6502_bvcsequence[];
extern const R6502OP r6502_bvssequence[];
extern const R6502OP r6502_bccsequence[];
extern const R6502OP r6502_bcssequence[];
extern const R6502OP r6502_bnesequence[];
extern const R6502OP r6502_beqsequence[];
extern const R6502OP r6502_jmpabssequence[];
extern const R6502OP r6502_jmpabsindsequence[];
extern const R6502OP r65c12_jmpabsindsequence[];
extern const R6502OP r6502_jmpindxsequence[];
extern const R6502OP r6502_resetsequence[];
extern const R6502OP r6502_brksequence[];
extern const R6502OP r6502_interruptsequence[];
extern const R6502OP r6502_jsrsequence[];
extern const R6502OP r6502_rtisequence[];
extern const R6502OP r6502_rtssequence[];
extern const R6502OP r65c12_phxsequence[];
extern const R6502OP r65c12_plxsequence[];
extern const R6502OP r65c12_physequence[];
extern const R6502OP r65c12_plysequence[];
extern const R6502OP r65c12_bitimmsequence[];
extern const R6502OP r65c12_bitzpgxsequence[];
extern const R6502OP r65c12_bitabsxsequence[];
extern const R6502OP r65c12_orazpgindsequence[];
extern const R6502OP r65c12_orapreindexedsequence[];
extern const R6502OP r65c12_orazpgxsequence[];
extern const R6502OP r65c12_oraabsxsequence[];
extern const R6502OP r65c12_oraabsysequence[];
extern const R6502OP r65c12_orapostindexedsequence[];
extern const R6502OP r65c12_andzpgindsequence[];
extern const R6502OP r65c12_andpreindexedsequence[];
extern const R6502OP r65c12_andzpgxsequence[];
extern const R6502OP r65c12_andabsxsequence[];
extern const R6502OP r65c12_andabsysequence[];
extern const R6502OP r65c12_andpostindexedsequence[];
extern const R6502OP r65c12_eorzpgindsequence[];
extern const R6502OP r65c12_eorpreindexedsequence[];
extern const R6502OP r65c12_eorzpgxsequence[];
extern const R6502OP r65c12_eorabsxsequence[];
extern const R6502OP r65c12_eorabsysequence[];
extern const R6502OP r65c12_eorpostindexedsequence[];
extern const R6502OP r65c12_adcimmsequence[];
extern const R6502OP r65c12_adczpgsequence[];
extern const R6502OP r65c12_adcabssequence[];
extern const R6502OP r65c12_adczpgindsequence[];
extern const R6502OP r65c12_adczpgxsequence[];
extern const R6502OP r65c12_adcpreindexedsequence[];
extern const R6502OP r65c12_adcabsxsequence[];
extern const R6502OP r65c12_adcabsysequence[];
extern const R6502OP r65c12_adcpostindexedsequence[];
extern const R6502OP r65c12_ldazpgindsequence[];
extern const R6502OP r65c12_ldapreindexedsequence[];
extern const R6502OP r65c12_ldazpgxsequence[];
extern const R6502OP r65c12_ldaabsxsequence[];
extern const R6502OP r65c12_ldaabsysequence[];
extern const R6502OP r65c12_ldapostindexedsequence[];
extern const R6502OP r65c12_ldxzpgysequence[];
extern const R6502OP r65c12_ldxabsysequence[];
extern const R6502OP r65c12_ldyzpgxsequence[];
extern const R6502OP r65c12_ldyabsxsequence[];
extern const R6502OP r65c12_cmpzpgindsequence[];
extern const R6502OP r65c12_cmppreindexedsequence[];
extern const R6502OP r65c12_cmpzpgxindsequence[];
extern const R6502OP r65c12_cmpabsxsequence[];
extern const R6502OP r65c12_cmpabsysequence[];
extern const R6502OP r65c12_cmppostindexedsequence[];
extern const R6502OP r65c12_sbcimmsequence[];
extern const R6502OP r65c12_sbczpgsequence[];
extern const R6502OP r65c12_sbcabssequence[];
extern const R6502OP r65c12_sbczpgindsequence[];
extern const R6502OP r65c12_sbczpgxsequence[];
extern const R6502OP r65c12_sbcpreindexedsequence[];
extern const R6502OP r65c12_sbcabsxsequence[];
extern const R6502OP r65c12_sbcabsysequence[];
extern const R6502OP r65c12_sbcpostindexedsequence[];
extern const R6502OP r65c12_skbwait2sequence[];
extern const R6502OP r65c12_skwwait1sequence[];
extern const R6502OP r65c12_skwwait5sequence[];
extern const R6502OP r65c12_aslzpgsequence[];
extern const R6502OP r65c12_aslabssequence[];
extern const R6502OP r65c12_aslzpgxsequence[];
extern const R6502OP r65c12_aslabsxsequence[];
extern const R6502OP r65c12_rolzpgsequence[];
extern const R6502OP r65c12_rolabssequence[];
extern const R6502OP r65c12_rolzpgxsequence[];
extern const R6502OP r65c12_rolabsxsequence[];
extern const R6502OP r65c12_lsrzpgsequence[];
extern const R6502OP r65c12_lsrabssequence[];
extern const R6502OP r65c12_lsrzpgxsequence[];
extern const R6502OP r65c12_lsrabsxsequence[];
extern const R6502OP r65c12_rorzpgsequence[];
extern const R6502OP r65c12_rorabssequence[];
extern const R6502OP r65c12_rorzpgxsequence[];
extern const R6502OP r65c12_rorabsxsequence[];
extern const R6502OP r65c12_decasequence[];
extern const R6502OP r65c12_deczpgsequence[];
extern const R6502OP r65c12_decabssequence[];
extern const R6502OP r65c12_deczpgxsequence[];
extern const R6502OP r65c12_decabsxsequence[];
extern const R6502OP r65c12_incasequence[];
extern const R6502OP r65c12_inczpgsequence[];
extern const R6502OP r65c12_incabssequence[];
extern const R6502OP r65c12_inczpgxsequence[];
extern const R6502OP r65c12_incabsxsequence[];
extern const R6502OP r65c12_tsbzpgsequence[];
extern const R6502OP r65c12_tsbabssequence[];
extern const R6502OP r65c12_trbzpgsequence[];
extern const R6502OP r65c12_trbabssequence[];
extern const R6502OP r65c12_stazpgindsequence[];
extern const R6502OP r65c12_stapreindexedsequence[];
extern const R6502OP r65c12_stazpgxsequence[];
extern const R6502OP r65c12_staabsxsequence[];
extern const R6502OP r65c12_staabsysequence[];
extern const R6502OP r65c12_stapostindexedsequence[];
extern const R6502OP r65c12_stxzpgysequence[];
extern const R6502OP r65c12_styzpgxsequence[];
extern const R6502OP r65c12_stzzpgsequence[];
extern const R6502OP r65c12_stzabssequence[];
extern const R6502OP r65c12_stzzpgxsequence[];
extern const R6502OP r65c12_stzabsxsequence[];
extern const R6502OP r65c12_bplsequence[];
extern const R6502OP r65c12_bmisequence[];
extern const R6502OP r65c12_bvcsequence[];
extern const R6502OP r65c12_bvssequence[];
extern const R6502OP r65c12_bccsequence[];
extern const R6502OP r65c12_bcssequence[];
extern const R6502OP r65c12_bnesequence[];
extern const R6502OP r65c12_beqsequence[];
extern const R6502OP r65c12_brasequence[];
extern const R6502OP r65c12_jmpabsindsequence[];
extern const R6502OP r65c12_jmpabsxindsequence[];
extern const R6502OP r65c12_resetsequence[];
extern const R6502OP r65c12_brksequence[];
extern const R6502OP r65c12_interruptsequence[];


extern const R6502OP* const r6502sequences[R6502_MAIN_SEQUENCE_COUNT];
extern const R6502OP* const r65c12sequences[R6502_MAIN_SEQUENCE_COUNT];

extern R6502CPUMAP* r6502yield(R6502CPUMAP* cmap, uintptr_t pc_code);
extern R6502CPUMAP* r6502fetch(R6502CPUMAP* cmap, uintptr_t pc_code);
extern R6502CPUMAP* r6502interruptfetch(R6502CPUMAP* cmap, uintptr_t pc_code);
extern R6502CPUMAP* r6502fetchthentestirq(R6502CPUMAP* cmap, uintptr_t pc_code);
extern R6502CPUMAP* r6502enterreset(R6502CPUMAP* cmap, uintptr_t pc_code);

extern R6502CPUMAP* r6502decodestep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502interruptdecodestep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);

extern R6502CPUMAP* r6502waitstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12nopdecodestep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502nopstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502clcstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502secstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502clistep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502seistep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502cldstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502sedstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502clvstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502taxstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502taystep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502txastep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502txsstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502tyastep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502tsxstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502pulledastep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12pulledxstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12pulledystep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502pulledpstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502tohltstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502hltstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502beforepullstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502topullstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502breadcrumbloadzpgstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12tozpgstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502loadzpgstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502latchabslostep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502breadcrumbloadabsstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502loadabsstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502breadcrumbloadzpgxstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502loadzpgxstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502loadzpgystep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502latchzpgindlostep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502loadabsxstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502loadabsystep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502linearloadabsxstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502linearloadabsystep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502breadcrumbfixindexedstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502fixindexedstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12breadcrumbloadabsxstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12loadabsxstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12breadcrumbloadabsystep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12loadabsystep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12linearloadabsxstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12linearloadabsystep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12bitimmediatestep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502bitstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502oraimmediatestep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502orastep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502andimmediatestep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502andstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502eorimmediatestep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502eorstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502adcimmediatestep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502adcstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12adcimmediatestep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12adcstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502ldaimmediatestep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502ldastep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502ldximmediatestep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502ldxstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502ldyimmediatestep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502ldystep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502cmpimmediatestep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502cmpstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502cpximmediatestep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502cpxstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502cpyimmediatestep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502cpystep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502sbcimmediatestep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502sbcstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12sbcimmediatestep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12sbcstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12decimalflagsimmediatestep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12decimalflagsstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502skipimmediatestep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12waitimmediatestep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12skbtowaitstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12skwlostep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502skipstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502laxstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502lasstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502ancimmediatestep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502alrimmediatestep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502arrimmediatestep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502xaaimmediatestep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502oalimmediatestep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502sbximmediatestep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12zpgreadagainstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12readagainstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502tozpgmodifystep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502tomodifystep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502aslastep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502aslzpgstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502aslstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502rolastep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502rolzpgstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502rolstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502lsrastep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502lsrzpgstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502lsrstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502rorastep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502rorzpgstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502rorstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12decastep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502dexstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502deystep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502deczpgstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502decstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12incastep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502inxstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502inystep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502inczpgstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502incstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12tsbzpgstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12tsbstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12trbzpgstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12trbstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502asozpgstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502asostep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502rlazpgstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502rlastep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502lsezpgstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502lsestep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502rrazpgstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502rrastep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502dcpzpgstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502dcpstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502isbzpgstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502isbstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502topushpstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502topushastep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12topushxstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12topushystep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502loadzpgtostastep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502loadabstostastep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502loadzpgxtostastep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502fixindexedtostastep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502loadzpgtostxstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502loadabstostxstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502loadzpgytostxstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502loadzpgtostystep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502loadabstostystep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502loadzpgxtostystep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12loadzpgtostzstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12loadabstostzstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12loadzpgxtostzstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12fixindexedtostzstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502loadzpgtosaxstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502loadabstosaxstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502loadzpgytosaxstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502fixindexedtoaxastep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502fixindexedtoxasstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502fixindexedtosaystep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502fixindexedtotasstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502pushedstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502bplstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502bmistep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502bvcstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502bvsstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502bccstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502bcsstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502bnestep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502beqstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12brastep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502branchtakenstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12branchtakenstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502fixbranchtakenstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12latchjmpabsindlostep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502latchjmpabsindlostep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12fixjmpabsindstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12breadcrumbfixjmpabsxindstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502loadpchstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502waitonresetstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502resetstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502notpushedtonotpushstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502breadcrumbnotpushedtoresetlostep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502pushedtopushpclstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502pushedtopushpstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502pushedtopushpwithoutbstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12breadcrumbpushedtoresetlostep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502breadcrumbpushedtointerruptlostep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12breadcrumbpushedtointerruptlostep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r65c12breadcrumbpushedtobrklostep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502latchveclostep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502tobrkpushpchstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502topushpchstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502latchabslobeforepushstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502tojsrpushpchstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502pushedtojsrpushpclstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502pushedtoloadpchstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502pulledptopullstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502pulledpclstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502loadpchtoincrementstep(R6502CPUMAP* cmap, uintptr_t incremented_cpu_state);
extern R6502CPUMAP* r6502startyield(R6502CPUMAP* cmap);
extern R6502CPUMAP* r6502startinterrupt(R6502CPUMAP* cmap);

extern int r6502reset(R6502CPUMAP* cmap, const R6502OP* const* mainsequences, const R6502OP* const* extrasequences);

extern void r6502aftersnapshot(R6502CPUMAP* cmap);
extern void r6502readmemory(R6502CPUMAP* cmap, char* buffer, uintptr_t naddress, int ncount);
